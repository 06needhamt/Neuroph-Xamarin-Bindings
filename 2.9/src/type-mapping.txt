be/abeel/bioinformatics/dnaproperties/ConversionMapDNAProperty = BE.Abeel.Bioinformatics.Dnaproperties.ConversionMapDNAProperty
  <init>(Ljava/lang/String;)V = .ctor(string)
  length()I = Length()
  normalizedProfile(Ljava/lang/String;)[D = NormalizedProfile(string)
  normalizedValue(Ljava/lang/String;)D = NormalizedValue(string)
  profile(Ljava/lang/String;)[D = Profile(string)
  value(Ljava/lang/String;)D = Value(string)
be/abeel/bioinformatics/dnaproperties/DNAProperty = BE.Abeel.Bioinformatics.Dnaproperties.DNAProperty
  <init>(Ljava/lang/String;)V = .ctor(string)
  A = A
  APhilicity = APhilicity
  AT = At
  ATG = Atg
  BaseStacking = BaseStacking
  bDNATwist = BDNATwist
  Bendability = Bendability
  BendingStiffness = BendingStiffness
  C = C
  DimerRadicalCleavageIntensity = DimerRadicalCleavageIntensity
  DNADenaturation = DNADenaturation
  DuplexStabilityDisruptEnergy = DuplexStabilityDisruptEnergy
  DuplexStabilityFreeEnergy = DuplexStabilityFreeEnergy
  G = G
  GC = Gc
  NucleosomePosition = NucleosomePosition
  PentamerRadicalCleavageIntensity = PentamerRadicalCleavageIntensity
  PropellorTwist = PropellorTwist
  ProteinDeformation = ProteinDeformation
  ProteinDNATwist = ProteinDNATwist
  Purine = Purine
  Pyrimidine = Pyrimidine
  Rise = Rise
  Roll = Roll
  Shift = Shift
  Slide = Slide
  T = T
  TetramerRadicalCleavageIntensity = TetramerRadicalCleavageIntensity
  Tilt = Tilt
  TrimerRadicalCleavageIntensity = TrimerRadicalCleavageIntensity
  Twist = Twist
  zDNA = ZDNA
  create(Ljava/lang/String;)Lbe/abeel/bioinformatics/dnaproperties/DNAProperty; = Create(string)
  length()I = Length()
  normalizedProfile(Ljava/lang/String;)[D = NormalizedProfile(string)
  normalizedValue(Ljava/lang/String;)D = NormalizedValue(string)
  profile(Ljava/lang/String;)[D = Profile(string)
  value(Ljava/lang/String;)D = Value(string)
  values()[Lbe/abeel/bioinformatics/dnaproperties/DNAProperty; = Values()
be/abeel/bioinformatics/dnaproperties/RadicalCleavageIntensity = BE.Abeel.Bioinformatics.Dnaproperties.RadicalCleavageIntensity
  <init>(I)V = .ctor(int)
  length()I = Length()
  normalizedProfile(Ljava/lang/String;)[D = NormalizedProfile(string)
  normalizedValue(Ljava/lang/String;)D = NormalizedValue(string)
  profile(Ljava/lang/String;)[D = Profile(string)
  value(Ljava/lang/String;)D = Value(string)
be/abeel/bioinformatics/Record = BE.Abeel.Bioinformatics.Record
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getDescription()Ljava/lang/String; = Description
  setDescription(Ljava/lang/String;)V = Description
  getSequence()Ljava/lang/String; = Sequence
  setSequence(Ljava/lang/String;)V = Sequence
be/abeel/bioinformatics/SplitFasta = BE.Abeel.Bioinformatics.SplitFasta
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  splitFile(Ljava/io/File;)V = SplitFile(Java.IO.File)
  splitFile(Ljava/lang/String;)V = SplitFile(string)
be/abeel/concurrency/DaemonThread = BE.Abeel.Concurrency.DaemonThread
  <init>(Ljava/lang/Runnable;)V = .ctor(Java.Lang.IRunnable)
be/abeel/concurrency/DaemonThreadFactory = BE.Abeel.Concurrency.DaemonThreadFactory
  <init>()V = .ctor()
  newThread(Ljava/lang/Runnable;)Ljava/lang/Thread; = NewThread(Java.Lang.IRunnable)
be/abeel/graphics/GraphicsFileExport = BE.Abeel.Graphics.GraphicsFileExport
  <init>()V = .ctor()
be/abeel/graphics/Image4Jexport = BE.Abeel.Graphics.Image4Jexport
  <init>()V = .ctor()
be/abeel/graphics/ImageIOexport = BE.Abeel.Graphics.ImageIOexport
  <init>()V = .ctor()
be/abeel/io/Base64 = BE.Abeel.IO.Base64
  DECODE = Decode
  DONT_BREAK_LINES = DontBreakLines
  ENCODE = Encode
  GZIP = Gzip
  NO_OPTIONS = NoOptions
  ORDERED = Ordered
  URL_SAFE = UrlSafe
  decode([BIII)[B = Decode(byte[], int, int, int)
  decode(Ljava/lang/String;)[B = Decode(string)
  decode(Ljava/lang/String;I)[B = Decode(string, int)
  decodeFileToFile(Ljava/lang/String;Ljava/lang/String;)V = DecodeFileToFile(string, string)
  decodeFromFile(Ljava/lang/String;)[B = DecodeFromFile(string)
  decodeToFile(Ljava/lang/String;Ljava/lang/String;)Z = DecodeToFile(string, string)
  decodeToObject(Ljava/lang/String;)Ljava/lang/Object; = DecodeToObject(string)
  encodeBytes([B)Ljava/lang/String; = EncodeBytes(byte[])
  encodeBytes([BI)Ljava/lang/String; = EncodeBytes(byte[], int)
  encodeBytes([BII)Ljava/lang/String; = EncodeBytes(byte[], int, int)
  encodeBytes([BIII)Ljava/lang/String; = EncodeBytes(byte[], int, int, int)
  encodeFileToFile(Ljava/lang/String;Ljava/lang/String;)V = EncodeFileToFile(string, string)
  encodeFromFile(Ljava/lang/String;)Ljava/lang/String; = EncodeFromFile(string)
  encodeObject(Ljava/io/Serializable;)Ljava/lang/String; = EncodeObject(Java.IO.ISerializable)
  encodeObject(Ljava/io/Serializable;I)Ljava/lang/String; = EncodeObject(Java.IO.ISerializable, int)
  encodeToFile([BLjava/lang/String;)Z = EncodeToFile(byte[], string)
  main([Ljava/lang/String;)V = Main(string[])
be/abeel/io/Copier = BE.Abeel.IO.Copier
  <init>()V = .ctor()
  copy(Ljava/lang/Object;)Ljava/lang/Object; = Copy(Java.Lang.Object)
be/abeel/io/DirectoryFilter = BE.Abeel.IO.DirectoryFilter
  <init>()V = .ctor()
  accept(Ljava/io/File;)Z = Accept(Java.IO.File)
be/abeel/io/ExtensionFileFilter = BE.Abeel.IO.ExtensionFileFilter
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<string>)
  accept(Ljava/io/File;)Z = Accept(Java.IO.File)
be/abeel/io/ExtensionManager = BE.Abeel.IO.ExtensionManager
  <init>()V = .ctor()
  BMP = Bmp
  EPS = Eps
  GIF = Gif
  ICO = Ico
  JPG = Jpg
  PDF = Pdf
  PNG = Png
  SVG = Svg
  WEB = Web
  extension(Ljava/io/File;Ljava/lang/String;)Ljava/io/File; = Extension(Java.IO.File, string)
  extension(Ljava/io/File;Ljava/util/List;)Ljava/io/File; = Extension(Java.IO.File, System.Collections.Generic.IList<string>)
  extension(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Extension(string, string)
  extension(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String; = Extension(string, System.Collections.Generic.IList<string>)
be/abeel/io/GZIPPrintWriter = BE.Abeel.IO.GZIPPrintWriter
  <init>(Ljava/io/File;)V = .ctor(Java.IO.File)
  <init>(Ljava/io/File;Ljava/lang/String;)V = .ctor(Java.IO.File, string)
  <init>(Ljava/io/OutputStream;)V = .ctor(System.IO.Stream)
  <init>(Ljava/io/OutputStream;Z)V = .ctor(System.IO.Stream, bool)
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
be/abeel/io/NullStream = BE.Abeel.IO.NullStream
  <init>()V = .ctor()
  write(I)V = Write(int)
be/abeel/io/PatternFileFilter = BE.Abeel.IO.PatternFileFilter
  <init>(Ljava/lang/String;)V = .ctor(string)
  accept(Ljava/io/File;)Z = Accept(Java.IO.File)
be/abeel/io/Serial = BE.Abeel.IO.Serial
  <init>()V = .ctor()
  exists(Ljava/lang/String;)Z = Exists(string)
  load(Ljava/io/File;)Ljava/lang/Object; = Load(Java.IO.File)
  load(Ljava/lang/String;)Ljava/lang/Object; = Load(string)
  store(Ljava/lang/Object;Ljava/lang/String;)Z = Store(Java.Lang.Object, string)
be/abeel/net/ClientHttpRequest = BE.Abeel.Net.ClientHttpRequest
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/net/URL;)V = .ctor(Java.Net.URL)
  <init>(Ljava/net/URLConnection;)V = .ctor(Java.Net.URLConnection)
  connect()V = Connect()
  newline()V = Newline()
  post()Ljava/io/InputStream; = Post()
  post([Ljava/lang/Object;)Ljava/io/InputStream; = Post(Java.Lang.Object[])
  post(Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(string, Java.Lang.Object)
  post(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(string, Java.Lang.Object, string, Java.Lang.Object)
  post(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(string, Java.Lang.Object, string, Java.Lang.Object, string, Java.Lang.Object)
  post(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(string, Java.Lang.Object, string, Java.Lang.Object, string, Java.Lang.Object, string, Java.Lang.Object)
  post([Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/InputStream; = Post(string[], Java.Lang.Object[])
  post(Ljava/net/URL;[Ljava/lang/Object;)Ljava/io/InputStream; = Post(Java.Net.URL, Java.Lang.Object[])
  post(Ljava/net/URL;Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(Java.Net.URL, string, Java.Lang.Object)
  post(Ljava/net/URL;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(Java.Net.URL, string, Java.Lang.Object, string, Java.Lang.Object)
  post(Ljava/net/URL;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(Java.Net.URL, string, Java.Lang.Object, string, Java.Lang.Object, string, Java.Lang.Object)
  post(Ljava/net/URL;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/io/InputStream; = Post(Java.Net.URL, string, Java.Lang.Object, string, Java.Lang.Object, string, Java.Lang.Object, string, Java.Lang.Object)
  post(Ljava/net/URL;[Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/InputStream; = Post(Java.Net.URL, string[], Java.Lang.Object[])
  post(Ljava/net/URL;Ljava/util/Map;)Ljava/io/InputStream; = Post(Java.Net.URL, System.Collections.IDictionary)
  post(Ljava/net/URL;Ljava/util/Map;Ljava/util/Map;)Ljava/io/InputStream; = Post(Java.Net.URL, System.Collections.IDictionary, System.Collections.IDictionary)
  post(Ljava/util/Map;)Ljava/io/InputStream; = Post(System.Collections.IDictionary)
  post(Ljava/util/Map;Ljava/util/Map;)Ljava/io/InputStream; = Post(System.Collections.IDictionary, System.Collections.IDictionary)
  randomString()Ljava/lang/String; = RandomString()
  setCookie(Ljava/lang/String;Ljava/lang/String;)V = SetCookie(string, string)
  setCookies([Ljava/lang/String;)V = SetCookies(string[])
  setCookies(Ljava/util/Map;)V = SetCookies(System.Collections.IDictionary)
  setParameter(Ljava/lang/String;Ljava/io/File;)V = SetParameter(string, Java.IO.File)
  setParameter(Ljava/lang/String;Ljava/lang/Object;)V = SetParameter(string, Java.Lang.Object)
  setParameter(Ljava/lang/String;Ljava/lang/String;)V = SetParameter(string, string)
  setParameter(Ljava/lang/String;Ljava/lang/String;Ljava/io/InputStream;)V = SetParameter(string, string, System.IO.Stream)
  setParameters([Ljava/lang/Object;)V = SetParameters(Java.Lang.Object[])
  setParameters(Ljava/util/Map;)V = SetParameters(System.Collections.IDictionary)
  write(C)V = Write(char)
  write(Ljava/lang/String;)V = Write(string)
  writeln(Ljava/lang/String;)V = Writeln(string)
be/abeel/net/ClientHttpUpload = BE.Abeel.Net.ClientHttpUpload
  <init>()V = .ctor()
  upload(Ljava/io/File;Ljava/net/URL;)Ljava/lang/String; = Upload(Java.IO.File, Java.Net.URL)
be/abeel/net/URIFactory = BE.Abeel.Net.URIFactory
  <init>()V = .ctor()
  uri(Ljava/lang/String;)Ljava/net/URI; = Uri(string)
  url(Ljava/lang/String;)Ljava/net/URL; = Url(string)
be/abeel/security/MD5Tools = BE.Abeel.Security.MD5Tools
  <init>()V = .ctor()
  md5(Ljava/lang/String;)Ljava/lang/String; = Md5(string)
be/abeel/util/Config = BE.Abeel.Util.Config
  <init>(Ljava/lang/String;)V = .ctor(string)
  get(Ljava/lang/String;)Ljava/lang/String; = Get(string)
  get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Get(string, string)
  set(Ljava/lang/String;Ljava/lang/String;)V = Set(string, string)
be/abeel/util/CountMap = BE.Abeel.Util.CountMap
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  copy()Lbe/abeel/util/CountMap; = Copy()
  count(Ljava/lang/Object;)V = Count(Java.Lang.Object)
  count(Ljava/lang/Object;I)V = Count(Java.Lang.Object, int)
  getNormalized(Ljava/lang/Object;)D = GetNormalized(Java.Lang.Object)
  totalCount()I = TotalCount()
be/abeel/util/CountMap2D = BE.Abeel.Util.CountMap2D
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  count(Ljava/lang/Object;Ljava/lang/Object;)V = Count(Java.Lang.Object, Java.Lang.Object)
  getNormalized(Ljava/lang/Object;Ljava/lang/Object;)D = GetNormalized(Java.Lang.Object, Java.Lang.Object)
  totalCount()I = TotalCount()
  totalXCount(Ljava/lang/Object;)I = TotalXCount(Java.Lang.Object)
  totalYCount(Ljava/lang/Object;)I = TotalYCount(Java.Lang.Object)
be/abeel/util/DefaultConcurrentHashMap = BE.Abeel.Util.DefaultConcurrentHashMap
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
be/abeel/util/DefaultHashMap = BE.Abeel.Util.DefaultHashMap
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
be/abeel/util/DefaultHashMap2D = BE.Abeel.Util.DefaultHashMap2D
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
  getDefault()Ljava/lang/Object; = Default
be/abeel/util/DefaultTreeMap = BE.Abeel.Util.DefaultTreeMap
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
be/abeel/util/FrequencyMap = BE.Abeel.Util.FrequencyMap
  <init>()V = .ctor()
  average()D = Average()
  bin(I)Lbe/abeel/util/FrequencyMap; = Bin(int)
  copy()Lbe/abeel/util/FrequencyMap; = Copy()
  count(I)V = Count(int)
  count(II)V = Count(int, int)
  max()I = Max()
  median()I = Median()
  min()I = Min()
  mode()I = Mode()
  removeAbove(I)Lbe/abeel/util/FrequencyMap; = RemoveAbove(int)
  removeBelow(I)Lbe/abeel/util/FrequencyMap; = RemoveBelow(int)
  shift(I)Lbe/abeel/util/FrequencyMap; = Shift(int)
  std()D = Std()
  sum()D = Sum()
  totalCount()I = TotalCount()
  truncate(II)Lbe/abeel/util/FrequencyMap; = Truncate(int, int)
be/abeel/util/HashMap2D = BE.Abeel.Util.HashMap2D
  <init>()V = .ctor()
  containsKey(Ljava/lang/Object;Ljava/lang/Object;)Z = ContainsKey(Java.Lang.Object, Java.Lang.Object)
  get(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; = Get(Java.Lang.Object, Java.Lang.Object)
  put(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V = Put(Java.Lang.Object, Java.Lang.Object, Java.Lang.Object)
  remove(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; = Remove(Java.Lang.Object, Java.Lang.Object)
  toArray()[[Ljava/lang/Object; = ToArray()
be/abeel/util/LRUCache = BE.Abeel.Util.LRUCache
  <init>(I)V = .ctor(int)
  <init>(IJ)V = .ctor(int, long)
be/abeel/util/Pair = BE.Abeel.Util.Pair
  <init>(Ljava/lang/Object;Ljava/lang/Object;)V = .ctor(Java.Lang.Object, Java.Lang.Object)
  x()Ljava/lang/Object; = X()
  y()Ljava/lang/Object; = Y()
be/abeel/util/SetTools = BE.Abeel.Util.SetTools
  <init>()V = .ctor()
  intersection(Ljava/util/Set;Ljava/util/Set;)Ljava/util/Set; = Intersection(System.Collections.Generic.ICollection<object>, System.Collections.Generic.ICollection<object>)
  union(Ljava/util/Set;Ljava/util/Set;)Ljava/util/Set; = Union(System.Collections.Generic.ICollection<object>, System.Collections.Generic.ICollection<object>)
be/abeel/util/TimeInterval = BE.Abeel.Util.TimeInterval
  <init>(J)V = .ctor(long)
  <init>(Ljava/lang/String;)V = .ctor(string)
  getDays()J = Days
  getHours()J = Hours
  getLengthInMilliseconds()J = LengthInMilliseconds
  getMilliseconds()J = Milliseconds
  getMinutes()J = Minutes
  getSeconds()J = Seconds
be/abeel/util/Triplet = BE.Abeel.Util.Triplet
  <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V = .ctor(Java.Lang.Object, Java.Lang.Object, Java.Lang.Object)
  x()Ljava/lang/Object; = X()
  y()Ljava/lang/Object; = Y()
  z()Ljava/lang/Object; = Z()
ch/qos/logback/classic/ClassicConstants = CH.Qos.Logback.Classic.ClassicConstants
  <init>()V = .ctor()
  DEFAULT_MAX_CALLEDER_DATA_DEPTH = DefaultMaxCallederDataDepth
  FINALIZE_SESSION = FinalizeSession
  GAFFER_CONFIGURATOR_FQCN = GafferConfiguratorFqcn
  JNDI_CONFIGURATION_RESOURCE = JndiConfigurationResource
  JNDI_CONTEXT_NAME = JndiContextName
  LOGBACK_CONTEXT_SELECTOR = LogbackContextSelector
  MAX_DOTS = MaxDots
  REQUEST_QUERY_STRING = RequestQueryString
  REQUEST_REMOTE_HOST_MDC_KEY = RequestRemoteHostMdcKey
  REQUEST_REQUEST_URI = RequestRequestUri
  REQUEST_REQUEST_URL = RequestRequestUrl
  REQUEST_USER_AGENT_MDC_KEY = RequestUserAgentMdcKey
  REQUEST_X_FORWARDED_FOR = RequestXForwardedFor
  USER_MDC_KEY = UserMdcKey
ch/qos/logback/classic/db/names/ColumnName = CH.Qos.Logback.Classic.DB.Names.ColumnName
  ARG0 = Arg0
  ARG1 = Arg1
  ARG2 = Arg2
  ARG3 = Arg3
  CALLER_CLASS = CallerClass
  CALLER_FILENAME = CallerFilename
  CALLER_LINE = CallerLine
  CALLER_METHOD = CallerMethod
  EVENT_ID = EventId
  FORMATTED_MESSAGE = FormattedMessage
  I = I
  LEVEL_STRING = LevelString
  LOGGER_NAME = LoggerName
  MAPPED_KEY = MappedKey
  MAPPED_VALUE = MappedValue
  REFERENCE_FLAG = ReferenceFlag
  THREAD_NAME = ThreadName
  TIMESTMP = Timestmp
  TRACE_LINE = TraceLine
  valueOf(Ljava/lang/String;)Lch/qos/logback/classic/db/names/ColumnName; = ValueOf(string)
  values()[Lch/qos/logback/classic/db/names/ColumnName; = Values()
ch/qos/logback/classic/db/names/DBNameResolver = CH.Qos.Logback.Classic.DB.Names.IDBNameResolver
  getColumnName(Ljava/lang/Enum;)Ljava/lang/String; = GetColumnName(Java.Lang.Object)
  getTableName(Ljava/lang/Enum;)Ljava/lang/String; = GetTableName(Java.Lang.Object)
ch/qos/logback/classic/db/names/DefaultDBNameResolver = CH.Qos.Logback.Classic.DB.Names.DefaultDBNameResolver
  <init>()V = .ctor()
  getColumnName(Ljava/lang/Enum;)Ljava/lang/String; = GetColumnName(Java.Lang.Object)
  getTableName(Ljava/lang/Enum;)Ljava/lang/String; = GetTableName(Java.Lang.Object)
ch/qos/logback/classic/db/names/SimpleDBNameResolver = CH.Qos.Logback.Classic.DB.Names.SimpleDBNameResolver
  <init>()V = .ctor()
  getColumnName(Ljava/lang/Enum;)Ljava/lang/String; = GetColumnName(Java.Lang.Object)
  getTableName(Ljava/lang/Enum;)Ljava/lang/String; = GetTableName(Java.Lang.Object)
  setColumnNamePrefix(Ljava/lang/String;)V = SetColumnNamePrefix(string)
  setColumnNameSuffix(Ljava/lang/String;)V = SetColumnNameSuffix(string)
  setTableNamePrefix(Ljava/lang/String;)V = SetTableNamePrefix(string)
  setTableNameSuffix(Ljava/lang/String;)V = SetTableNameSuffix(string)
ch/qos/logback/classic/db/names/TableName = CH.Qos.Logback.Classic.DB.Names.TableName
  LOGGING_EVENT = LoggingEvent
  LOGGING_EVENT_EXCEPTION = LoggingEventException
  LOGGING_EVENT_PROPERTY = LoggingEventProperty
  valueOf(Ljava/lang/String;)Lch/qos/logback/classic/db/names/TableName; = ValueOf(string)
  values()[Lch/qos/logback/classic/db/names/TableName; = Values()
ch/qos/logback/classic/db/SQLBuilder = CH.Qos.Logback.Classic.DB.SQLBuilder
  <init>()V = .ctor()
ch/qos/logback/classic/gaffer/ConfigurationContributor = CH.Qos.Logback.Classic.Gaffer.IConfigurationContributor
  getMappings()Ljava/util/Map; = Mappings
ch/qos/logback/classic/Level = CH.Qos.Logback.Classic.Level
  ALL = All
  ALL_INT = AllInt
  ALL_INTEGER = AllInteger
  DEBUG = Debug
  DEBUG_INT = DebugInt
  DEBUG_INTEGER = DebugInteger
  ERROR = Error
  ERROR_INT = ErrorInt
  ERROR_INTEGER = ErrorInteger
  INFO = Info
  INFO_INT = InfoInt
  INFO_INTEGER = InfoInteger
  levelInt = LevelInt
  levelStr = LevelStr
  OFF = Off
  OFF_INT = OffInt
  OFF_INTEGER = OffInteger
  TRACE = Trace
  TRACE_INT = TraceInt
  TRACE_INTEGER = TraceInteger
  WARN = Warn
  WARN_INT = WarnInt
  WARN_INTEGER = WarnInteger
  fromLocationAwareLoggerInteger(I)Lch/qos/logback/classic/Level; = FromLocationAwareLoggerInteger(int)
  isGreaterOrEqual(Lch/qos/logback/classic/Level;)Z = IsGreaterOrEqual(CH.Qos.Logback.Classic.Level)
  toInt()I = ToInt()
  toInteger()Ljava/lang/Integer; = ToInteger()
  toLevel(I)Lch/qos/logback/classic/Level; = ToLevel(int)
  toLevel(ILch/qos/logback/classic/Level;)Lch/qos/logback/classic/Level; = ToLevel(int, CH.Qos.Logback.Classic.Level)
  toLevel(Ljava/lang/String;)Lch/qos/logback/classic/Level; = ToLevel(string)
  toLevel(Ljava/lang/String;Lch/qos/logback/classic/Level;)Lch/qos/logback/classic/Level; = ToLevel(string, CH.Qos.Logback.Classic.Level)
  toLocationAwareLoggerInteger(Lch/qos/logback/classic/Level;)I = ToLocationAwareLoggerInteger(CH.Qos.Logback.Classic.Level)
  valueOf(Ljava/lang/String;)Lch/qos/logback/classic/Level; = ValueOf(string)
ch/qos/logback/classic/pattern/Abbreviator = CH.Qos.Logback.Classic.Pattern.IAbbreviator
  abbreviate(Ljava/lang/String;)Ljava/lang/String; = Abbreviate(string)
ch/qos/logback/classic/pattern/ClassNameOnlyAbbreviator = CH.Qos.Logback.Classic.Pattern.ClassNameOnlyAbbreviator
  <init>()V = .ctor()
  abbreviate(Ljava/lang/String;)Ljava/lang/String; = Abbreviate(string)
ch/qos/logback/classic/pattern/TargetLengthBasedClassNameAbbreviator = CH.Qos.Logback.Classic.Pattern.TargetLengthBasedClassNameAbbreviator
  <init>(I)V = .ctor(int)
  abbreviate(Ljava/lang/String;)Ljava/lang/String; = Abbreviate(string)
ch/qos/logback/classic/pattern/Util = CH.Qos.Logback.Classic.Pattern.Util
  <init>()V = .ctor()
ch/qos/logback/classic/spi/CallerData = CH.Qos.Logback.Classic.Spi.CallerData
  <init>()V = .ctor()
  CALLER_DATA_NA = CallerDataNa
  EMPTY_CALLER_DATA_ARRAY = EmptyCallerDataArray
  LINE_NA = LineNa
  NA = Na
  extract(Ljava/lang/Throwable;Ljava/lang/String;ILjava/util/List;)[Ljava/lang/StackTraceElement; = Extract(Java.Lang.Throwable, string, int, System.Collections.Generic.IList<string>)
  naInstance()Ljava/lang/StackTraceElement; = NaInstance()
ch/qos/logback/classic/spi/ClassPackagingData = CH.Qos.Logback.Classic.Spi.ClassPackagingData
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Ljava/lang/String;Ljava/lang/String;Z)V = .ctor(string, string, bool)
  getCodeLocation()Ljava/lang/String; = CodeLocation
  isExact()Z = IsExact
  getVersion()Ljava/lang/String; = Version
ch/qos/logback/classic/spi/IThrowableProxy = CH.Qos.Logback.Classic.Spi.IThrowableProxy
  getCause()Lch/qos/logback/classic/spi/IThrowableProxy; = Cause
  getClassName()Ljava/lang/String; = ClassName
  getCommonFrames()I = CommonFrames
  getMessage()Ljava/lang/String; = Message
  getStackTraceElementProxyArray()[Lch/qos/logback/classic/spi/StackTraceElementProxy; = GetStackTraceElementProxyArray()
  getSuppressed()[Lch/qos/logback/classic/spi/IThrowableProxy; = GetSuppressed()
ch/qos/logback/classic/spi/PackagingDataCalculator = CH.Qos.Logback.Classic.Spi.PackagingDataCalculator
  <init>()V = .ctor()
  calculate(Lch/qos/logback/classic/spi/IThrowableProxy;)V = Calculate(CH.Qos.Logback.Classic.Spi.IThrowableProxy)
ch/qos/logback/classic/spi/PlatformInfo = CH.Qos.Logback.Classic.Spi.PlatformInfo
  <init>()V = .ctor()
  hasJMXObjectName()Z = HasJMXObjectName
ch/qos/logback/classic/spi/StackTraceElementProxy = CH.Qos.Logback.Classic.Spi.StackTraceElementProxy
  <init>(Ljava/lang/StackTraceElement;)V = .ctor(Java.Lang.StackTraceElement)
  getClassPackagingData()Lch/qos/logback/classic/spi/ClassPackagingData; = ClassPackagingData
  setClassPackagingData(Lch/qos/logback/classic/spi/ClassPackagingData;)V = ClassPackagingData
  getStackTraceElement()Ljava/lang/StackTraceElement; = StackTraceElement
  getSTEAsString()Ljava/lang/String; = STEAsString
ch/qos/logback/classic/spi/STEUtil = CH.Qos.Logback.Classic.Spi.STEUtil
  <init>()V = .ctor()
ch/qos/logback/classic/spi/ThrowableProxy = CH.Qos.Logback.Classic.Spi.ThrowableProxy
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
  getCause()Lch/qos/logback/classic/spi/IThrowableProxy; = Cause
  getClassName()Ljava/lang/String; = ClassName
  getCommonFrames()I = CommonFrames
  getMessage()Ljava/lang/String; = Message
  getPackagingDataCalculator()Lch/qos/logback/classic/spi/PackagingDataCalculator; = PackagingDataCalculator
  getThrowable()Ljava/lang/Throwable; = Throwable
  calculatePackagingData()V = CalculatePackagingData()
  fullDump()V = FullDump()
  getStackTraceElementProxyArray()[Lch/qos/logback/classic/spi/StackTraceElementProxy; = GetStackTraceElementProxyArray()
  getSuppressed()[Lch/qos/logback/classic/spi/IThrowableProxy; = GetSuppressed()
ch/qos/logback/classic/spi/ThrowableProxyUtil = CH.Qos.Logback.Classic.Spi.ThrowableProxyUtil
  <init>()V = .ctor()
  REGULAR_EXCEPTION_INDENT = RegularExceptionIndent
  SUPPRESSED_EXCEPTION_INDENT = SuppressedExceptionIndent
  asString(Lch/qos/logback/classic/spi/IThrowableProxy;)Ljava/lang/String; = AsString(CH.Qos.Logback.Classic.Spi.IThrowableProxy)
  build(Lch/qos/logback/classic/spi/ThrowableProxy;Ljava/lang/Throwable;Lch/qos/logback/classic/spi/ThrowableProxy;)V = Build(CH.Qos.Logback.Classic.Spi.ThrowableProxy, Java.Lang.Throwable, CH.Qos.Logback.Classic.Spi.ThrowableProxy)
  subjoinFirstLine(Ljava/lang/StringBuilder;Lch/qos/logback/classic/spi/IThrowableProxy;)V = SubjoinFirstLine(Java.Lang.StringBuilder, CH.Qos.Logback.Classic.Spi.IThrowableProxy)
  subjoinFirstLineRootCauseFirst(Ljava/lang/StringBuilder;Lch/qos/logback/classic/spi/IThrowableProxy;)V = SubjoinFirstLineRootCauseFirst(Java.Lang.StringBuilder, CH.Qos.Logback.Classic.Spi.IThrowableProxy)
  subjoinPackagingData(Ljava/lang/StringBuilder;Lch/qos/logback/classic/spi/StackTraceElementProxy;)V = SubjoinPackagingData(Java.Lang.StringBuilder, CH.Qos.Logback.Classic.Spi.StackTraceElementProxy)
  subjoinSTEP(Ljava/lang/StringBuilder;Lch/qos/logback/classic/spi/StackTraceElementProxy;)V = SubjoinSTEP(Java.Lang.StringBuilder, CH.Qos.Logback.Classic.Spi.StackTraceElementProxy)
  subjoinSTEPArray(Ljava/lang/StringBuilder;Lch/qos/logback/classic/spi/IThrowableProxy;)V = SubjoinSTEPArray(Java.Lang.StringBuilder, CH.Qos.Logback.Classic.Spi.IThrowableProxy)
  subjoinSTEPArray(Ljava/lang/StringBuilder;ILch/qos/logback/classic/spi/IThrowableProxy;)V = SubjoinSTEPArray(Java.Lang.StringBuilder, int, CH.Qos.Logback.Classic.Spi.IThrowableProxy)
ch/qos/logback/classic/spi/ThrowableProxyVO = CH.Qos.Logback.Classic.Spi.ThrowableProxyVO
  <init>()V = .ctor()
  getCause()Lch/qos/logback/classic/spi/IThrowableProxy; = Cause
  getClassName()Ljava/lang/String; = ClassName
  getCommonFrames()I = CommonFrames
  getMessage()Ljava/lang/String; = Message
  build(Lch/qos/logback/classic/spi/IThrowableProxy;)Lch/qos/logback/classic/spi/ThrowableProxyVO; = Build(CH.Qos.Logback.Classic.Spi.IThrowableProxy)
  getStackTraceElementProxyArray()[Lch/qos/logback/classic/spi/StackTraceElementProxy; = GetStackTraceElementProxyArray()
  getSuppressed()[Lch/qos/logback/classic/spi/IThrowableProxy; = GetSuppressed()
ch/qos/logback/classic/turbo/MDCValueLevelPair = CH.Qos.Logback.Classic.Turbo.MDCValueLevelPair
  <init>()V = .ctor()
  getLevel()Lch/qos/logback/classic/Level; = Level
  setLevel(Lch/qos/logback/classic/Level;)V = Level
  getValue()Ljava/lang/String; = Value
  setValue(Ljava/lang/String;)V = Value
ch/qos/logback/classic/util/CopyOnInheritThreadLocal = CH.Qos.Logback.Classic.Util.CopyOnInheritThreadLocal
  <init>()V = .ctor()
  childValue(Ljava/util/HashMap;)Ljava/util/HashMap; = ChildValue(System.Collections.Generic.IDictionary<string, string>)
ch/qos/logback/classic/util/EnvUtil = CH.Qos.Logback.Classic.Util.EnvUtil
  <init>()V = .ctor()
  isGroovyAvailable()Z = IsGroovyAvailable
ch/qos/logback/classic/util/JNDIUtil = CH.Qos.Logback.Classic.Util.JNDIUtil
  <init>()V = .ctor()
ch/qos/logback/classic/util/LogbackMDCAdapter = CH.Qos.Logback.Classic.Util.LogbackMDCAdapter
  <init>()V = .ctor()
  getCopyOfContextMap()Ljava/util/Map; = CopyOfContextMap
  getKeys()Ljava/util/Set; = Keys
  getPropertyMap()Ljava/util/Map; = PropertyMap
  clear()V = Clear()
  get(Ljava/lang/String;)Ljava/lang/String; = Get(string)
  put(Ljava/lang/String;Ljava/lang/String;)V = Put(string, string)
  remove(Ljava/lang/String;)V = Remove(string)
  setContextMap(Ljava/util/Map;)V = SetContextMap(System.Collections.IDictionary)
ch/qos/logback/classic/util/LoggerNameUtil = CH.Qos.Logback.Classic.Util.LoggerNameUtil
  <init>()V = .ctor()
  computeNameParts(Ljava/lang/String;)Ljava/util/List; = ComputeNameParts(string)
  getFirstSeparatorIndexOf(Ljava/lang/String;)I = GetFirstSeparatorIndexOf(string)
  getSeparatorIndexOf(Ljava/lang/String;I)I = GetSeparatorIndexOf(string, int)
net/sf/image4j/codec/bmp/BMPConstants = Net.SF.Image4j.Codec.Bmp.BMPConstants
  BI_RGB = BiRgb
  BI_RLE4 = BiRle4
  BI_RLE8 = BiRle8
  FILE_HEADER = FileHeader
net/sf/image4j/codec/bmp/BMPDecoder = Net.SF.Image4j.Codec.Bmp.BMPDecoder
  <init>(Ljava/io/InputStream;)V = .ctor(System.IO.Stream)
  getInfoHeader()Lnet/sf/image4j/codec/bmp/InfoHeader; = InfoHeader
  readColorTable(Lnet/sf/image4j/codec/bmp/InfoHeader;Lnet/sf/image4j/io/LittleEndianInputStream;)[Lnet/sf/image4j/codec/bmp/ColorEntry; = ReadColorTable(Net.SF.Image4j.Codec.Bmp.InfoHeader, Net.SF.Image4j.IO.LittleEndianInputStream)
  readExt(Ljava/io/File;)Lnet/sf/image4j/codec/bmp/BMPImage; = ReadExt(Java.IO.File)
  readExt(Ljava/io/InputStream;)Lnet/sf/image4j/codec/bmp/BMPImage; = ReadExt(System.IO.Stream)
  readInfoHeader(Lnet/sf/image4j/io/LittleEndianInputStream;)Lnet/sf/image4j/codec/bmp/InfoHeader; = ReadInfoHeader(Net.SF.Image4j.IO.LittleEndianInputStream)
  readInfoHeader(Lnet/sf/image4j/io/LittleEndianInputStream;I)Lnet/sf/image4j/codec/bmp/InfoHeader; = ReadInfoHeader(Net.SF.Image4j.IO.LittleEndianInputStream, int)
net/sf/image4j/codec/bmp/BMPEncoder = Net.SF.Image4j.Codec.Bmp.BMPEncoder
  getBitmapSize(III)I = GetBitmapSize(int, int, int)
  getBytesPerLine1(I)I = GetBytesPerLine1(int)
  getBytesPerLine24(I)I = GetBytesPerLine24(int)
  getBytesPerLine4(I)I = GetBytesPerLine4(int)
  getBytesPerLine8(I)I = GetBytesPerLine8(int)
  getColorMapSize(S)I = GetColorMapSize(short)
  writeFileHeader(IILnet/sf/image4j/io/LittleEndianOutputStream;)V = WriteFileHeader(int, int, Net.SF.Image4j.IO.LittleEndianOutputStream)
net/sf/image4j/codec/bmp/BMPImage = Net.SF.Image4j.Codec.Bmp.BMPImage
  infoHeader = InfoHeader
  getColourCount()I = ColourCount
  getColourDepth()I = ColourDepth
  getHeight()I = Height
  getInfoHeader()Lnet/sf/image4j/codec/bmp/InfoHeader; = InfoHeader
  setInfoHeader(Lnet/sf/image4j/codec/bmp/InfoHeader;)V = InfoHeader
  isIndexed()Z = IsIndexed
  getWidth()I = Width
net/sf/image4j/codec/bmp/ColorEntry = Net.SF.Image4j.Codec.Bmp.ColorEntry
  <init>()V = .ctor()
  <init>(IIII)V = .ctor(int, int, int, int)
  <init>(Lnet/sf/image4j/io/LittleEndianInputStream;)V = .ctor(Net.SF.Image4j.IO.LittleEndianInputStream)
  bBlue = BBlue
  bGreen = BGreen
  bRed = BRed
  bReserved = BReserved
net/sf/image4j/codec/bmp/InfoHeader = Net.SF.Image4j.Codec.Bmp.InfoHeader
  <init>()V = .ctor()
  <init>(Lnet/sf/image4j/codec/bmp/InfoHeader;)V = .ctor(Net.SF.Image4j.Codec.Bmp.InfoHeader)
  <init>(Lnet/sf/image4j/io/LittleEndianInputStream;)V = .ctor(Net.SF.Image4j.IO.LittleEndianInputStream)
  <init>(Lnet/sf/image4j/io/LittleEndianInputStream;I)V = .ctor(Net.SF.Image4j.IO.LittleEndianInputStream, int)
  iColorsImportant = IColorsImportant
  iColorsUsed = IColorsUsed
  iCompression = ICompression
  iHeight = IHeight
  iImageSize = IImageSize
  iNumColors = INumColors
  iSize = ISize
  iWidth = IWidth
  iXpixelsPerM = IXpixelsPerM
  iYpixelsPerM = IYpixelsPerM
  sBitCount = SBitCount
  sPlanes = SPlanes
  init(Lnet/sf/image4j/io/LittleEndianInputStream;I)V = Init(Net.SF.Image4j.IO.LittleEndianInputStream, int)
  write(Lnet/sf/image4j/io/LittleEndianOutputStream;)V = Write(Net.SF.Image4j.IO.LittleEndianOutputStream)
net/sf/image4j/codec/ico/ICOConstants = Net.SF.Image4j.Codec.Ico.ICOConstants
  <init>()V = .ctor()
  TYPE_CURSOR = TypeCursor
  TYPE_ICON = TypeIcon
net/sf/image4j/codec/ico/ICODecoder = Net.SF.Image4j.Codec.Ico.ICODecoder
  readExt(Ljava/io/File;)Ljava/util/List; = ReadExt(Java.IO.File)
  readExt(Ljava/io/InputStream;)Ljava/util/List; = ReadExt(System.IO.Stream)
net/sf/image4j/codec/ico/ICOEncoder = Net.SF.Image4j.Codec.Ico.ICOEncoder
  createIconEntry(Lnet/sf/image4j/codec/bmp/InfoHeader;)Lnet/sf/image4j/codec/ico/IconEntry; = CreateIconEntry(Net.SF.Image4j.Codec.Bmp.InfoHeader)
  writeFileHeader(IILnet/sf/image4j/io/LittleEndianOutputStream;)V = WriteFileHeader(int, int, Net.SF.Image4j.IO.LittleEndianOutputStream)
net/sf/image4j/codec/ico/ICOImage = Net.SF.Image4j.Codec.Ico.ICOImage
  iconEntry = IconEntry
  iconIndex = IconIndex
  pngCompressed = PngCompressed
  getIconEntry()Lnet/sf/image4j/codec/ico/IconEntry; = IconEntry
  setIconEntry(Lnet/sf/image4j/codec/ico/IconEntry;)V = IconEntry
  getIconIndex()I = IconIndex
  setIconIndex(I)V = IconIndex
  isPngCompressed()Z = PngCompressed
  setPngCompressed(Z)V = PngCompressed
net/sf/image4j/codec/ico/IconEntry = Net.SF.Image4j.Codec.Ico.IconEntry
  <init>()V = .ctor()
  <init>(Lnet/sf/image4j/io/LittleEndianInputStream;)V = .ctor(Net.SF.Image4j.IO.LittleEndianInputStream)
  bColorCount = BColorCount
  bHeight = BHeight
  bReserved = BReserved
  bWidth = BWidth
  iFileOffset = IFileOffset
  iSizeInBytes = ISizeInBytes
  sBitCount = SBitCount
  sPlanes = SPlanes
  write(Lnet/sf/image4j/io/LittleEndianOutputStream;)V = Write(Net.SF.Image4j.IO.LittleEndianOutputStream)
net/sf/image4j/io/EndianUtils = Net.SF.Image4j.IO.EndianUtils
  <init>()V = .ctor()
  swapDouble(D)D = SwapDouble(double)
  swapFloat(F)F = SwapFloat(float)
  swapInteger(I)I = SwapInteger(int)
  swapLong(J)J = SwapLong(long)
  swapShort(S)S = SwapShort(short)
net/sf/image4j/io/LittleEndianInputStream = Net.SF.Image4j.IO.LittleEndianInputStream
  <init>(Ljava/io/InputStream;)V = .ctor(System.IO.Stream)
  readDoubleLE()D = ReadDoubleLE()
  readFloatLE()F = ReadFloatLE()
  readIntLE()I = ReadIntLE()
  readLongLE()J = ReadLongLE()
  readShortLE()S = ReadShortLE()
  readUnsignedInt()J = ReadUnsignedInt()
  readUnsignedIntLE()J = ReadUnsignedIntLE()
net/sf/image4j/io/LittleEndianOutputStream = Net.SF.Image4j.IO.LittleEndianOutputStream
  <init>(Ljava/io/OutputStream;)V = .ctor(System.IO.Stream)
  writeDoubleLE(D)V = WriteDoubleLE(double)
  writeFloatLE(F)V = WriteFloatLE(float)
  writeIntLE(I)V = WriteIntLE(int)
  writeLongLE(J)V = WriteLongLE(long)
  writeShortLE(S)V = WriteShortLE(short)
  writeUnsignedInt(J)V = WriteUnsignedInt(long)
  writeUnsignedIntLE(J)V = WriteUnsignedIntLE(long)
net/sf/image4j/io/LittleEndianRandomAccessFile = Net.SF.Image4j.IO.LittleEndianRandomAccessFile
  <init>(Ljava/io/File;Ljava/lang/String;)V = .ctor(Java.IO.File, string)
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  readDoubleLE()D = ReadDoubleLE()
  readFloatLE()F = ReadFloatLE()
  readIntLE()I = ReadIntLE()
  readLongLE()J = ReadLongLE()
  readShortLE()S = ReadShortLE()
  writeDoubleLE(D)V = WriteDoubleLE(double)
  writeFloatLE(F)V = WriteFloatLE(float)
  writeIntLE(I)V = WriteIntLE(int)
  writeLongLE(J)V = WriteLongLE(long)
  writeShortLE(S)V = WriteShortLE(short)
net/sf/image4j/util/ConvertUtil = Net.SF.Image4j.Util.ConvertUtil
  <init>()V = .ctor()
net/sf/image4j/util/ImageUtil = Net.SF.Image4j.Util.ImageUtil
  <init>()V = .ctor()
org/neuroph/adapters/jml/JMLDataSetConverter = Org.Neuroph.Adapters.Jml.JMLDataSetConverter
  <init>()V = .ctor()
org/neuroph/adapters/jml/JMLNeurophClassifier = Org.Neuroph.Adapters.Jml.JMLNeurophClassifier
  <init>(Lorg/neuroph/core/NeuralNetwork;)V = .ctor(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/adapters/jml/JMLNeurophSample = Org.Neuroph.Adapters.Jml.JMLNeurophSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  printDataset(Lorg/neuroph/core/data/DataSet;)V = PrintDataset(Org.Neuroph.Core.Data.DataSet)
org/neuroph/adapters/weka/WekaDataSetConverter = Org.Neuroph.Adapters.Weka.WekaDataSetConverter
  <init>()V = .ctor()
org/neuroph/adapters/weka/WekaNeurophSample = Org.Neuroph.Adapters.Weka.WekaNeurophSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  printDataSet(Lorg/neuroph/core/data/DataSet;)V = PrintDataSet(Org.Neuroph.Core.Data.DataSet)
org/neuroph/contrib/matrixmlp/MatrixInputLayer = Org.Neuroph.Contrib.Matrixmlp.MatrixInputLayer
  <init>(I)V = .ctor(int)
  calculate()V = Calculate()
  getInputs()[D = GetInputs()
  getOutputs()[D = GetOutputs()
  setInputs([D)V = SetInputs(double[])
  setOutputs([D)V = SetOutputs(double[])
org/neuroph/contrib/matrixmlp/MatrixLayer = Org.Neuroph.Contrib.Matrixmlp.IMatrixLayer
  calculate()V = Calculate()
  getInputs()[D = GetInputs()
  getOutputs()[D = GetOutputs()
  setInputs([D)V = SetInputs(double[])
  setOutputs([D)V = SetOutputs(double[])
org/neuroph/contrib/matrixmlp/MatrixMlpLayer = Org.Neuroph.Contrib.Matrixmlp.MatrixMlpLayer
  <init>(Lorg/neuroph/core/Layer;Lorg/neuroph/contrib/matrixmlp/MatrixLayer;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Layer, Org.Neuroph.Contrib.Matrixmlp.IMatrixLayer, Org.Neuroph.Core.Transfer.TransferFunction)
  getNeuronsCount()I = NeuronsCount
  getNextLayer()Lorg/neuroph/contrib/matrixmlp/MatrixLayer; = NextLayer
  setNextLayer(Lorg/neuroph/contrib/matrixmlp/MatrixLayer;)V = NextLayer
  getPreviousLayer()Lorg/neuroph/contrib/matrixmlp/MatrixLayer; = PreviousLayer
  setPreviousLayer(Lorg/neuroph/contrib/matrixmlp/MatrixLayer;)V = PreviousLayer
  getTransferFunction()Lorg/neuroph/core/transfer/TransferFunction; = TransferFunction
  calculate()V = Calculate()
  copyMatricesToNeurons()V = CopyMatricesToNeurons()
  copyNeuronsToMatrices()V = CopyNeuronsToMatrices()
  getDeltaWeights()[[D = GetDeltaWeights()
  getErrors()[D = GetErrors()
  getInputs()[D = GetInputs()
  getInputsFromPreviousLayer()V = GetInputsFromPreviousLayer()
  getNetInput()[D = GetNetInput()
  getOutputs()[D = GetOutputs()
  getWeights()[[D = GetWeights()
  saveCurrentWeights()V = SaveCurrentWeights()
  setErrors([D)V = SetErrors(double[])
  setInputs([D)V = SetInputs(double[])
  setOutputs([D)V = SetOutputs(double[])
  sync()V = Sync()
org/neuroph/contrib/matrixmlp/MatrixMomentumBackpropagation = Org.Neuroph.Contrib.Matrixmlp.MatrixMomentumBackpropagation
  <init>()V = .ctor()
  updateLayerWeights(Lorg/neuroph/contrib/matrixmlp/MatrixMlpLayer;[D)V = UpdateLayerWeights(Org.Neuroph.Contrib.Matrixmlp.MatrixMlpLayer, double[])
org/neuroph/contrib/matrixmlp/MatrixMultiLayerPerceptron = Org.Neuroph.Contrib.Matrixmlp.MatrixMultiLayerPerceptron
  <init>(Lorg/neuroph/nnet/MultiLayerPerceptron;)V = .ctor(Org.Neuroph.Nnet.MultiLayerPerceptron)
  getMatrixLayers()[Lorg/neuroph/contrib/matrixmlp/MatrixLayer; = GetMatrixLayers()
org/neuroph/contrib/matrixmlp/TestMatrixMLP = Org.Neuroph.Contrib.Matrixmlp.TestMatrixMLP
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/contrib/norm/DataSetStatistics = Org.Neuroph.Contrib.Norm.DataSetStatistics
  <init>()V = .ctor()
  calculateMaxByColumns(Lorg/neuroph/core/data/DataSet;)[D = CalculateMaxByColumns(Org.Neuroph.Core.Data.DataSet)
  calculateMean(Lorg/neuroph/core/data/DataSet;)[D = CalculateMean(Org.Neuroph.Core.Data.DataSet)
  calculateMinByColumns(Lorg/neuroph/core/data/DataSet;)[D = CalculateMinByColumns(Org.Neuroph.Core.Data.DataSet)
org/neuroph/contrib/norm/ZeroMeanNormalizer = Org.Neuroph.Contrib.Norm.ZeroMeanNormalizer
  <init>()V = .ctor()
  normalize(Lorg/neuroph/core/data/DataSet;)V = Normalize(Org.Neuroph.Core.Data.DataSet)
org/neuroph/contrib/RecommenderNetwork = Org.Neuroph.Contrib.RecommenderNetwork
  <init>()V = .ctor()
  createDemoNetwork()V = CreateDemoNetwork()
org/neuroph/contrib/samples/stockmarket/Main = Org.Neuroph.Contrib.Samples.Stockmarket.Main
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/contrib/samples/stockmarket/StockFileReader = Org.Neuroph.Contrib.Samples.Stockmarket.StockFileReader
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  getMaxCounter()I = MaxCounter
  setMaxCounter(I)V = MaxCounter
  getValuesRow()[Ljava/lang/String; = GetValuesRow()
  read(Ljava/lang/String;)V = Read(string)
  setValuesRow([Ljava/lang/String;)V = SetValuesRow(string[])
org/neuroph/contrib/samples/stockmarket/StockSocketReader = Org.Neuroph.Contrib.Samples.Stockmarket.StockSocketReader
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  getMaxCounter()I = MaxCounter
  setMaxCounter(I)V = MaxCounter
  getTsleep()J = Tsleep
  setTsleep(J)V = Tsleep
  getValuesRow()[Ljava/lang/String; = GetValuesRow()
  run()V = Run()
  setValuesRow([Ljava/lang/String;)V = SetValuesRow(string[])
org/neuroph/contrib/samples/stockmarket/StockTrainingSetImport = Org.Neuroph.Contrib.Samples.Stockmarket.StockTrainingSetImport
  <init>()V = .ctor()
  importFromArray([DII)Lorg/neuroph/core/data/DataSet; = ImportFromArray(double[], int, int)
org/neuroph/contrib/samples/stockmarket/TrainingData = Org.Neuroph.Contrib.Samples.Stockmarket.TrainingData
  <init>()V = .ctor()
  <init>([Ljava/lang/String;)V = .ctor(string[])
  getNormalizer()D = Normalizer
  setNormalizer(D)V = Normalizer
  getTrainingSet()Lorg/neuroph/core/data/DataSet; = TrainingSet
  setTrainingSet(Lorg/neuroph/core/data/DataSet;)V = TrainingSet
  getValuesRow()[Ljava/lang/String; = GetValuesRow()
  setValuesRow([Ljava/lang/String;)V = SetValuesRow(string[])
org/neuroph/contrib/samples/SunSpots = Org.Neuroph.Contrib.Samples.SunSpots
  <init>()V = .ctor()
  EVALUATE_END = EvaluateEnd
  EVALUATE_START = EvaluateStart
  MAX_ERROR = MaxError
  STARTING_YEAR = StartingYear
  SUNSPOTS = Sunspots
  TRAIN_END = TrainEnd
  TRAIN_START = TrainStart
  WINDOW_SIZE = WindowSize
  generateTrainingData()Lorg/neuroph/core/data/DataSet; = GenerateTrainingData()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  normalizeSunspots(DD)V = NormalizeSunspots(double, double)
  predict(Lorg/neuroph/core/NeuralNetwork;)V = Predict(Org.Neuroph.Core.NeuralNetwork)
  run()V = Run()
org/neuroph/contrib/samples/timeseries/GenerateSet = Org.Neuroph.Contrib.Samples.Timeseries.GenerateSet
  <init>(Ljava/lang/String;ZII)V = .ctor(string, bool, int, int)
  doIt()V = DoIt()
org/neuroph/contrib/samples/timeseries/GenerateSineWave = Org.Neuroph.Contrib.Samples.Timeseries.GenerateSineWave
  getNextSample()D = NextSample
org/neuroph/contrib/samples/timeseries/GenerateTrainingSets = Org.Neuroph.Contrib.Samples.Timeseries.GenerateTrainingSets
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/contrib/samples/timeseries/TestTimeSeries = Org.Neuroph.Contrib.Samples.Timeseries.TestTimeSeries
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork()V = TestNeuralNetwork()
  train()V = Train()
org/neuroph/core/Connection = Org.Neuroph.Core.Connection
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron)
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Weight;)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Weight)
  fromNeuron = FromNeuron
  toNeuron = ToNeuron
  weight = Weight
  getFromNeuron()Lorg/neuroph/core/Neuron; = FromNeuron
  setFromNeuron(Lorg/neuroph/core/Neuron;)V = FromNeuron
  getInput()D = Input
  getToNeuron()Lorg/neuroph/core/Neuron; = ToNeuron
  setToNeuron(Lorg/neuroph/core/Neuron;)V = ToNeuron
  getWeight()Lorg/neuroph/core/Weight; = Weight
  setWeight(Lorg/neuroph/core/Weight;)V = Weight
  getWeightedInput()D = WeightedInput
org/neuroph/core/data/DataSet = Org.Neuroph.Core.Data.DataSet
  <init>(I)V = .ctor(int)
  <init>(II)V = .ctor(int, int)
  getFilePath()Ljava/lang/String; = FilePath
  setFilePath(Ljava/lang/String;)V = FilePath
  getInputSize()I = InputSize
  isEmpty()Z = IsEmpty
  isSupervised()Z = IsSupervised
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getOutputSize()I = OutputSize
  getRows()Ljava/util/List; = Rows
  addRow([D)V = AddRow(double[])
  addRow([D[D)V = AddRow(double[], double[])
  addRow(Lorg/neuroph/core/data/DataSetRow;)V = AddRow(Org.Neuroph.Core.Data.DataSetRow)
  clear()V = Clear()
  createFromFile(Ljava/lang/String;IILjava/lang/String;Z)Lorg/neuroph/core/data/DataSet; = CreateFromFile(string, int, int, string, bool)
  createTrainingAndTestSubsets(II)[Lorg/neuroph/core/data/DataSet; = CreateTrainingAndTestSubsets(int, int)
  getColumnName(I)Ljava/lang/String; = GetColumnName(int)
  getColumnNames()[Ljava/lang/String; = GetColumnNames()
  getRowAt(I)Lorg/neuroph/core/data/DataSetRow; = GetRowAt(int)
  iterator()Ljava/util/Iterator; = Iterator()
  load(Ljava/lang/String;)Lorg/neuroph/core/data/DataSet; = Load(string)
  removeRowAt(I)V = RemoveRowAt(int)
  sample(I)[Lorg/neuroph/core/data/DataSet; = Sample(int)
  sample(Lorg/neuroph/util/data/sample/Sampling;)[Lorg/neuroph/core/data/DataSet; = Sample(Org.Neuroph.Util.Data.Sample.ISampling)
  save()V = Save()
  save(Ljava/lang/String;)V = Save(string)
  saveAsTxt(Ljava/lang/String;Ljava/lang/String;)V = SaveAsTxt(string, string)
  setColumnName(ILjava/lang/String;)V = SetColumnName(int, string)
  setColumnNames([Ljava/lang/String;)V = SetColumnNames(string[])
  shuffle()V = Shuffle()
  size()I = Size()
  toCSV()Ljava/lang/String; = ToCSV()
org/neuroph/core/data/DataSetRow = Org.Neuroph.Core.Data.DataSetRow
  <init>([D)V = .ctor(params double[])
  <init>([D[D)V = .ctor(double[], double[])
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Ljava/util/ArrayList;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Double>)
  <init>(Ljava/util/ArrayList;Ljava/util/ArrayList;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Double>, System.Collections.Generic.IList<Java.Lang.Double>)
  input = Input
  label = Label
  isSupervised()Z = IsSupervised
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getDesiredOutput()[D = GetDesiredOutput()
  getInput()[D = GetInput()
  setDesiredOutput([D)V = SetDesiredOutput(double[])
  setInput([D)V = SetInput(double[])
  toCSV()Ljava/lang/String; = ToCSV()
org/neuroph/core/events/LearningEvent = Org.Neuroph.Core.Events.LearningEvent
  <init>(Lorg/neuroph/core/learning/LearningRule;Lorg/neuroph/core/events/LearningEventType;)V = .ctor(Org.Neuroph.Core.Learning.LearningRule, Org.Neuroph.Core.Events.LearningEventType)
  getEventType()Lorg/neuroph/core/events/LearningEventType; = EventType
org/neuroph/core/events/LearningEventListener = Org.Neuroph.Core.Events.ILearningEventListener
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
org/neuroph/core/events/LearningEventType = Org.Neuroph.Core.Events.LearningEventType
  EPOCH_ENDED = EpochEnded
  LEARNING_STOPPED = LearningStopped
  valueOf(Ljava/lang/String;)Lorg/neuroph/core/events/LearningEventType; = ValueOf(string)
  values()[Lorg/neuroph/core/events/LearningEventType; = Values()
org/neuroph/core/events/NeuralNetworkEvent = Org.Neuroph.Core.Events.NeuralNetworkEvent
  <init>(Lorg/neuroph/core/Layer;Lorg/neuroph/core/events/NeuralNetworkEventType;)V = .ctor(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Events.NeuralNetworkEventType)
  <init>(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/events/NeuralNetworkEventType;)V = .ctor(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Events.NeuralNetworkEventType)
  getEventType()Lorg/neuroph/core/events/NeuralNetworkEventType; = EventType
org/neuroph/core/events/NeuralNetworkEventListener = Org.Neuroph.Core.Events.INeuralNetworkEventListener
  handleNeuralNetworkEvent(Lorg/neuroph/core/events/NeuralNetworkEvent;)V = HandleNeuralNetworkEvent(Org.Neuroph.Core.Events.NeuralNetworkEvent)
org/neuroph/core/events/NeuralNetworkEventType = Org.Neuroph.Core.Events.NeuralNetworkEventType
  CALCULATED = Calculated
  CONNECTION_ADDED = ConnectionAdded
  CONNECTION_REMOVED = ConnectionRemoved
  LAYER_ADDED = LayerAdded
  LAYER_REMOVED = LayerRemoved
  NEURON_ADDED = NeuronAdded
  NEURON_REMOVED = NeuronRemoved
  valueOf(Ljava/lang/String;)Lorg/neuroph/core/events/NeuralNetworkEventType; = ValueOf(string)
  values()[Lorg/neuroph/core/events/NeuralNetworkEventType; = Values()
org/neuroph/core/exceptions/NeurophException = Org.Neuroph.Core.Exceptions.NeurophException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/core/exceptions/VectorSizeMismatchException = Org.Neuroph.Core.Exceptions.VectorSizeMismatchException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/core/input/And = Org.Neuroph.Core.Input.And
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Difference = Org.Neuroph.Core.Input.Difference
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/InputFunction = Org.Neuroph.Core.Input.InputFunction
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Max = Org.Neuroph.Core.Input.Max
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Min = Org.Neuroph.Core.Input.Min
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Or = Org.Neuroph.Core.Input.Or
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Product = Org.Neuroph.Core.Input.Product
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Sum = Org.Neuroph.Core.Input.Sum
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/SumSqr = Org.Neuroph.Core.Input.SumSqr
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/WeightedSum = Org.Neuroph.Core.Input.WeightedSum
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/Layer = Org.Neuroph.Core.Layer
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
  isEmpty()Z = IsEmpty
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getNeuronsCount()I = NeuronsCount
  getParentNetwork()Lorg/neuroph/core/NeuralNetwork; = ParentNetwork
  setParentNetwork(Lorg/neuroph/core/NeuralNetwork;)V = ParentNetwork
  addNeuron(ILorg/neuroph/core/Neuron;)V = AddNeuron(int, Org.Neuroph.Core.Neuron)
  addNeuron(Lorg/neuroph/core/Neuron;)V = AddNeuron(Org.Neuroph.Core.Neuron)
  calculate()V = Calculate()
  getNeuronAt(I)Lorg/neuroph/core/Neuron; = GetNeuronAt(int)
  getNeurons()[Lorg/neuroph/core/Neuron; = GetNeurons()
  indexOf(Lorg/neuroph/core/Neuron;)I = IndexOf(Org.Neuroph.Core.Neuron)
  initializeWeights(D)V = InitializeWeights(double)
  removeAllNeurons()V = RemoveAllNeurons()
  removeNeuron(Lorg/neuroph/core/Neuron;)V = RemoveNeuron(Org.Neuroph.Core.Neuron)
  removeNeuronAt(I)V = RemoveNeuronAt(int)
  reset()V = Reset()
  setNeuron(ILorg/neuroph/core/Neuron;)V = SetNeuron(int, Org.Neuroph.Core.Neuron)
org/neuroph/core/learning/error/ErrorFunction = Org.Neuroph.Core.Learning.Error.IErrorFunction
  getTotalError()D = TotalError
  addOutputError([D)V = AddOutputError(double[])
  reset()V = Reset()
org/neuroph/core/learning/error/MeanSquaredError = Org.Neuroph.Core.Learning.Error.MeanSquaredError
  <init>(D)V = .ctor(double)
  getTotalError()D = TotalError
  addOutputError([D)V = AddOutputError(double[])
  reset()V = Reset()
org/neuroph/core/learning/IterativeLearning = Org.Neuroph.Core.Learning.IterativeLearning
  <init>()V = .ctor()
  currentIteration = CurrentIteration
  learningRate = LearningRate
  stopConditions = StopConditions
  getCurrentIteration()Ljava/lang/Integer; = CurrentIteration
  hasReachedStopCondition()Z = HasReachedStopCondition
  isIterationsLimited()Z = IsIterationsLimited
  isPausedLearning()Z = IsPausedLearning
  getLearningRate()D = LearningRate
  setLearningRate(D)V = LearningRate
  getMaxIterations()I = MaxIterations
  setMaxIterations(I)V = MaxIterations
  afterEpoch()V = AfterEpoch()
  beforeEpoch()V = BeforeEpoch()
  doLearningEpoch(Lorg/neuroph/core/data/DataSet;)V = DoLearningEpoch(Org.Neuroph.Core.Data.DataSet)
  doOneLearningIteration(Lorg/neuroph/core/data/DataSet;)V = DoOneLearningIteration(Org.Neuroph.Core.Data.DataSet)
  learn(Lorg/neuroph/core/data/DataSet;)V = Learn(Org.Neuroph.Core.Data.DataSet)
  learn(Lorg/neuroph/core/data/DataSet;I)V = Learn(Org.Neuroph.Core.Data.DataSet, int)
  pause()V = Pause()
  resume()V = Resume()
org/neuroph/core/learning/LearningRule = Org.Neuroph.Core.Learning.LearningRule
  <init>()V = .ctor()
  listeners = Listeners
  neuralNetwork = NeuralNetwork
  isStopped()Z = IsStopped
  getNeuralNetwork()Lorg/neuroph/core/NeuralNetwork; = NeuralNetwork
  setNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;)V = NeuralNetwork
  getTrainingSet()Lorg/neuroph/core/data/DataSet; = TrainingSet
  setTrainingSet(Lorg/neuroph/core/data/DataSet;)V = TrainingSet
  addListener(Lorg/neuroph/core/events/LearningEventListener;)V = AddListener(Org.Neuroph.Core.Events.ILearningEventListener)
  fireLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = FireLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  learn(Lorg/neuroph/core/data/DataSet;)V = Learn(Org.Neuroph.Core.Data.DataSet)
  onStart()V = OnStart()
  onStop()V = OnStop()
  removeListener(Lorg/neuroph/core/events/LearningEventListener;)V = RemoveListener(Org.Neuroph.Core.Events.ILearningEventListener)
  stopLearning()V = StopLearning()
org/neuroph/core/learning/stop/MaxErrorStop = Org.Neuroph.Core.Learning.Stop.MaxErrorStop
  <init>(Lorg/neuroph/core/learning/SupervisedLearning;)V = .ctor(Org.Neuroph.Core.Learning.SupervisedLearning)
  isReached()Z = IsReached
org/neuroph/core/learning/stop/MaxIterationsStop = Org.Neuroph.Core.Learning.Stop.MaxIterationsStop
  <init>(Lorg/neuroph/core/learning/IterativeLearning;)V = .ctor(Org.Neuroph.Core.Learning.IterativeLearning)
  isReached()Z = IsReached
org/neuroph/core/learning/stop/SmallErrorChangeStop = Org.Neuroph.Core.Learning.Stop.SmallErrorChangeStop
  <init>(Lorg/neuroph/core/learning/SupervisedLearning;)V = .ctor(Org.Neuroph.Core.Learning.SupervisedLearning)
  isReached()Z = IsReached
org/neuroph/core/learning/stop/StopCondition = Org.Neuroph.Core.Learning.Stop.IStopCondition
  isReached()Z = IsReached
org/neuroph/core/learning/SupervisedLearning = Org.Neuroph.Core.Learning.SupervisedLearning
  <init>()V = .ctor()
  maxError = MaxError
  previousEpochError = PreviousEpochError
  totalNetworkError = TotalNetworkError
  totalSquaredErrorSum = TotalSquaredErrorSum
  getErrorFunction()Lorg/neuroph/core/learning/error/ErrorFunction; = ErrorFunction
  setErrorFunction(Lorg/neuroph/core/learning/error/ErrorFunction;)V = ErrorFunction
  isInBatchMode()Z = IsInBatchMode
  getMaxError()D = MaxError
  setMaxError(D)V = MaxError
  getMinErrorChange()D = MinErrorChange
  setMinErrorChange(D)V = MinErrorChange
  getMinErrorChangeIterationsCount()I = MinErrorChangeIterationsCount
  getMinErrorChangeIterationsLimit()I = MinErrorChangeIterationsLimit
  setMinErrorChangeIterationsLimit(I)V = MinErrorChangeIterationsLimit
  getPreviousEpochError()D = PreviousEpochError
  getTotalNetworkError()D = TotalNetworkError
  addToSquaredErrorSum([D)V = AddToSquaredErrorSum(double[])
  calculateOutputError([D[D)[D = CalculateOutputError(double[], double[])
  doBatchWeightsUpdate()V = DoBatchWeightsUpdate()
  doLearningEpoch(Lorg/neuroph/core/data/DataSet;)V = DoLearningEpoch(Org.Neuroph.Core.Data.DataSet)
  learn(Lorg/neuroph/core/data/DataSet;D)V = Learn(Org.Neuroph.Core.Data.DataSet, double)
  learn(Lorg/neuroph/core/data/DataSet;DI)V = Learn(Org.Neuroph.Core.Data.DataSet, double, int)
  learnPattern(Lorg/neuroph/core/data/DataSetRow;)V = LearnPattern(Org.Neuroph.Core.Data.DataSetRow)
  setBatchMode(Z)V = SetBatchMode(bool)
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
org/neuroph/core/learning/UnsupervisedLearning = Org.Neuroph.Core.Learning.UnsupervisedLearning
  <init>()V = .ctor()
  doLearningEpoch(Lorg/neuroph/core/data/DataSet;)V = DoLearningEpoch(Org.Neuroph.Core.Data.DataSet)
  learnPattern(Lorg/neuroph/core/data/DataSetRow;)V = LearnPattern(Org.Neuroph.Core.Data.DataSetRow)
  updateNetworkWeights()V = UpdateNetworkWeights()
org/neuroph/core/NeuralNetwork = Org.Neuroph.Core.NeuralNetwork
  <init>()V = .ctor()
  getInputsCount()I = InputsCount
  isEmpty()Z = IsEmpty
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getLayersCount()I = LayersCount
  getLearningRule()Lorg/neuroph/core/learning/LearningRule; = LearningRule
  setLearningRule(Lorg/neuroph/core/learning/LearningRule;)V = LearningRule
  getLearningThread()Ljava/lang/Thread; = LearningThread
  getNetworkType()Lorg/neuroph/util/NeuralNetworkType; = NetworkType
  setNetworkType(Lorg/neuroph/util/NeuralNetworkType;)V = NetworkType
  getOutputsCount()I = OutputsCount
  addLayer(ILorg/neuroph/core/Layer;)V = AddLayer(int, Org.Neuroph.Core.Layer)
  addLayer(Lorg/neuroph/core/Layer;)V = AddLayer(Org.Neuroph.Core.Layer)
  addListener(Lorg/neuroph/core/events/NeuralNetworkEventListener;)V = AddListener(Org.Neuroph.Core.Events.INeuralNetworkEventListener)
  addPlugin(Lorg/neuroph/util/plugins/PluginBase;)V = AddPlugin(Org.Neuroph.Util.Plugins.PluginBase)
  calculate()V = Calculate()
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  createFromFile(Ljava/io/File;)Lorg/neuroph/core/NeuralNetwork; = CreateFromFile(Java.IO.File)
  createFromFile(Ljava/lang/String;)Lorg/neuroph/core/NeuralNetwork; = CreateFromFile(string)
  fireNetworkEvent(Lorg/neuroph/core/events/NeuralNetworkEvent;)V = FireNetworkEvent(Org.Neuroph.Core.Events.NeuralNetworkEvent)
  getInputNeurons()[Lorg/neuroph/core/Neuron; = GetInputNeurons()
  getLayerAt(I)Lorg/neuroph/core/Layer; = GetLayerAt(int)
  getLayers()[Lorg/neuroph/core/Layer; = GetLayers()
  getOutput()[D = GetOutput()
  getOutputNeurons()[Lorg/neuroph/core/Neuron; = GetOutputNeurons()
  getPlugin(Ljava/lang/Class;)Lorg/neuroph/util/plugins/PluginBase; = GetPlugin(Java.Lang.Class)
  getWeights()[Ljava/lang/Double; = GetWeights()
  indexOf(Lorg/neuroph/core/Layer;)I = IndexOf(Org.Neuroph.Core.Layer)
  learn(Lorg/neuroph/core/data/DataSet;)V = Learn(Org.Neuroph.Core.Data.DataSet)
  learn(Lorg/neuroph/core/data/DataSet;Lorg/neuroph/core/learning/LearningRule;)V = Learn(Org.Neuroph.Core.Data.DataSet, Java.Lang.Object)
  learnInNewThread(Lorg/neuroph/core/data/DataSet;)V = LearnInNewThread(Org.Neuroph.Core.Data.DataSet)
  learnInNewThread(Lorg/neuroph/core/data/DataSet;Lorg/neuroph/core/learning/LearningRule;)V = LearnInNewThread(Org.Neuroph.Core.Data.DataSet, Java.Lang.Object)
  load(Ljava/io/InputStream;)Lorg/neuroph/core/NeuralNetwork; = Load(System.IO.Stream)
  load(Ljava/lang/String;)Lorg/neuroph/core/NeuralNetwork; = Load(string)
  pauseLearning()V = PauseLearning()
  randomizeWeights()V = RandomizeWeights()
  randomizeWeights(DD)V = RandomizeWeights(double, double)
  randomizeWeights(Ljava/util/Random;)V = RandomizeWeights(Java.Util.Random)
  randomizeWeights(Lorg/neuroph/util/random/WeightsRandomizer;)V = RandomizeWeights(Org.Neuroph.Util.Random.WeightsRandomizer)
  removeLayer(Lorg/neuroph/core/Layer;)V = RemoveLayer(Org.Neuroph.Core.Layer)
  removeLayerAt(I)V = RemoveLayerAt(int)
  removeListener(Lorg/neuroph/core/events/NeuralNetworkEventListener;)V = RemoveListener(Org.Neuroph.Core.Events.INeuralNetworkEventListener)
  removePlugin(Ljava/lang/Class;)V = RemovePlugin(Java.Lang.Class)
  reset()V = Reset()
  resumeLearning()V = ResumeLearning()
  save(Ljava/lang/String;)V = Save(string)
  setInput([D)V = SetInput(params double[])
  setInputNeurons([Lorg/neuroph/core/Neuron;)V = SetInputNeurons(Org.Neuroph.Core.Neuron[])
  setOutputLabels([Ljava/lang/String;)V = SetOutputLabels(string[])
  setOutputNeurons([Lorg/neuroph/core/Neuron;)V = SetOutputNeurons(Org.Neuroph.Core.Neuron[])
  setWeights([D)V = SetWeights(double[])
  stopLearning()V = StopLearning()
org/neuroph/core/Neuron = Org.Neuroph.Core.Neuron
  <init>()V = .ctor()
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  getError()D = Error
  setError(D)V = Error
  hasInputConnections()Z = HasInputConnections
  getInputFunction()Lorg/neuroph/core/input/InputFunction; = InputFunction
  setInputFunction(Lorg/neuroph/core/input/InputFunction;)V = InputFunction
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getNetInput()D = NetInput
  getOutput()D = Output
  setOutput(D)V = Output
  getParentLayer()Lorg/neuroph/core/Layer; = ParentLayer
  setParentLayer(Lorg/neuroph/core/Layer;)V = ParentLayer
  getTransferFunction()Lorg/neuroph/core/transfer/TransferFunction; = TransferFunction
  setTransferFunction(Lorg/neuroph/core/transfer/TransferFunction;)V = TransferFunction
  addInputConnection(Lorg/neuroph/core/Connection;)V = AddInputConnection(Org.Neuroph.Core.Connection)
  addInputConnection(Lorg/neuroph/core/Neuron;)V = AddInputConnection(Org.Neuroph.Core.Neuron)
  addInputConnection(Lorg/neuroph/core/Neuron;D)V = AddInputConnection(Org.Neuroph.Core.Neuron, double)
  addOutputConnection(Lorg/neuroph/core/Connection;)V = AddOutputConnection(Org.Neuroph.Core.Connection)
  calculate()V = Calculate()
  getConnectionFrom(Lorg/neuroph/core/Neuron;)Lorg/neuroph/core/Connection; = GetConnectionFrom(Org.Neuroph.Core.Neuron)
  getInputConnections()[Lorg/neuroph/core/Connection; = GetInputConnections()
  getOutConnections()[Lorg/neuroph/core/Connection; = GetOutConnections()
  getWeights()[Lorg/neuroph/core/Weight; = GetWeights()
  hasInputConnectionFrom(Lorg/neuroph/core/Neuron;)Z = HasInputConnectionFrom(Org.Neuroph.Core.Neuron)
  hasOutputConnectionTo(Lorg/neuroph/core/Neuron;)Z = HasOutputConnectionTo(Org.Neuroph.Core.Neuron)
  initializeWeights(D)V = InitializeWeights(double)
  removeAllConnections()V = RemoveAllConnections()
  removeAllInputConnections()V = RemoveAllInputConnections()
  removeAllOutputConnections()V = RemoveAllOutputConnections()
  removeInputConnection(Lorg/neuroph/core/Connection;)V = RemoveInputConnection(Org.Neuroph.Core.Connection)
  removeInputConnectionFrom(Lorg/neuroph/core/Neuron;)V = RemoveInputConnectionFrom(Org.Neuroph.Core.Neuron)
  removeOutputConnection(Lorg/neuroph/core/Connection;)V = RemoveOutputConnection(Org.Neuroph.Core.Connection)
  removeOutputConnectionTo(Lorg/neuroph/core/Neuron;)V = RemoveOutputConnectionTo(Org.Neuroph.Core.Neuron)
  reset()V = Reset()
  setInput(D)V = SetInput(double)
org/neuroph/core/transfer/Gaussian = Org.Neuroph.Core.Transfer.Gaussian
  <init>()V = .ctor()
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSigma()D = Sigma
  setSigma(D)V = Sigma
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Linear = Org.Neuroph.Core.Transfer.Linear
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Log = Org.Neuroph.Core.Transfer.Log
  <init>()V = .ctor()
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Ramp = Org.Neuroph.Core.Transfer.Ramp
  <init>()V = .ctor()
  <init>(DDDDD)V = .ctor(double, double, double, double, double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getXHigh()D = XHigh
  setXHigh(D)V = XHigh
  getXLow()D = XLow
  setXLow(D)V = XLow
  getYHigh()D = YHigh
  setYHigh(D)V = YHigh
  getYLow()D = YLow
  setYLow(D)V = YLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sgn = Org.Neuroph.Core.Transfer.Sgn
  <init>()V = .ctor()
  getProperties()Ljava/util/Properties; = Properties
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sigmoid = Org.Neuroph.Core.Transfer.Sigmoid
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sin = Org.Neuroph.Core.Transfer.Sin
  <init>()V = .ctor()
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Step = Org.Neuroph.Core.Transfer.Step
  <init>()V = .ctor()
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getProperties()Lorg/neuroph/util/Properties; = Properties
  getYHigh()D = YHigh
  setYHigh(D)V = YHigh
  getYLow()D = YLow
  setYLow(D)V = YLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Tanh = Org.Neuroph.Core.Transfer.Tanh
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getDerivative(D)D = GetDerivative(double)
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/TransferFunction = Org.Neuroph.Core.Transfer.TransferFunction
  <init>()V = .ctor()
  output = Output
  getDerivative(D)D = GetDerivative(double)
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Trapezoid = Org.Neuroph.Core.Transfer.Trapezoid
  <init>()V = .ctor()
  <init>(DDDD)V = .ctor(double, double, double, double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getLeftHigh()D = LeftHigh
  setLeftHigh(D)V = LeftHigh
  getLeftLow()D = LeftLow
  setLeftLow(D)V = LeftLow
  getRightHigh()D = RightHigh
  setRightHigh(D)V = RightHigh
  getRightLow()D = RightLow
  setRightLow(D)V = RightLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/Weight = Org.Neuroph.Core.Weight
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  value = Value
  weightChange = WeightChange
  getTrainingData()Ljava/lang/Object; = TrainingData
  setTrainingData(Ljava/lang/Object;)V = TrainingData
  getValue()D = Value
  setValue(D)V = Value
  dec(D)V = Dec(double)
  inc(D)V = Inc(double)
  randomize()V = Randomize()
  randomize(DD)V = Randomize(double, double)
  randomize(Ljava/util/Random;)V = Randomize(Java.Util.Random)
org/neuroph/imgrec/ColorMode = Org.Neuroph.Imgrec.ColorMode
  BLACK_AND_WHITE = BlackAndWhite
  FULL_COLOR = FullColor
  valueOf(Ljava/lang/String;)Lorg/neuroph/imgrec/ColorMode; = ValueOf(string)
  values()[Lorg/neuroph/imgrec/ColorMode; = Values()
org/neuroph/imgrec/FractionRgbData = Org.Neuroph.Imgrec.FractionRgbData
  <init>(Lorg/neuroph/imgrec/image/Image;)V = .ctor(Org.Neuroph.Imgrec.Image.IImage)
  blueValues = BlueValues
  flattenedRgbValues = FlattenedRgbValues
  greenValues = GreenValues
  redValues = RedValues
  getHeight()I = Height
  getWidth()I = Width
  convertRgbInputToBinaryBlackAndWhite([D)[D = ConvertRgbInputToBinaryBlackAndWhite(double[])
  getBlueValues()[[D = GetBlueValues()
  getFlattenedRgbValues()[D = GetFlattenedRgbValues()
  getGreenValues()[[D = GetGreenValues()
  getRedValues()[[D = GetRedValues()
  populateRGBArrays(Lorg/neuroph/imgrec/image/Image;)V = PopulateRGBArrays(Org.Neuroph.Imgrec.Image.IImage)
org/neuroph/imgrec/image/Color = Org.Neuroph.Imgrec.Image.Color
  <init>(I)V = .ctor(int)
  getBlue(I)I = GetBlue(int)
  getColor()I = GetColor()
  getGreen(I)I = GetGreen(int)
  getRed(I)I = GetRed(int)
org/neuroph/imgrec/image/Dimension = Org.Neuroph.Imgrec.Image.Dimension
  <init>(II)V = .ctor(int, int)
  getHeight()I = Height
  setHeight(I)V = Height
  getWidth()I = Width
  setWidth(I)V = Width
org/neuroph/imgrec/image/Image = Org.Neuroph.Imgrec.Image.IImage
  getHeight()I = Height
  getType()I = Type
  getWidth()I = Width
  crop(IIII)Lorg/neuroph/imgrec/image/Image; = Crop(int, int, int, int)
  getPixel(II)I = GetPixel(int, int)
  getPixels(IIIIII)[I = GetPixels(int, int, int, int, int, int)
  resize(II)Lorg/neuroph/imgrec/image/Image; = Resize(int, int)
  setPixel(III)V = SetPixel(int, int, int)
  setPixels([IIIIIII)V = SetPixels(int[], int, int, int, int, int, int)
org/neuroph/imgrec/image/ImageAndroid = Org.Neuroph.Imgrec.Image.ImageAndroid
  <init>(Landroid/graphics/Bitmap;)V = .ctor(Android.Graphics.Bitmap)
  getBitmap()Landroid/graphics/Bitmap; = Bitmap
  setBitmap(Landroid/graphics/Bitmap;)V = Bitmap
  getHeight()I = Height
  getType()I = Type
  getWidth()I = Width
  crop(IIII)Lorg/neuroph/imgrec/image/Image; = Crop(int, int, int, int)
  getPixel(II)I = GetPixel(int, int)
  getPixels(IIIIII)[I = GetPixels(int, int, int, int, int, int)
  resize(II)Lorg/neuroph/imgrec/image/Image; = Resize(int, int)
  setPixel(III)V = SetPixel(int, int, int)
  setPixels([IIIIIII)V = SetPixels(int[], int, int, int, int, int, int)
org/neuroph/imgrec/image/ImageFactory = Org.Neuroph.Imgrec.Image.ImageFactory
  <init>()V = .ctor()
  createImage(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)Lorg/neuroph/imgrec/image/Image; = CreateImage(Java.Lang.Integer, Java.Lang.Integer, Java.Lang.Integer)
  getImage(Ljava/io/File;)Lorg/neuroph/imgrec/image/Image; = GetImage(Java.IO.File)
  getImage(Ljava/lang/String;)Lorg/neuroph/imgrec/image/Image; = GetImage(string)
  getImage(Ljava/net/URL;)Lorg/neuroph/imgrec/image/Image; = GetImage(Java.Net.URL)
org/neuroph/imgrec/image/ImageJ2SE = Org.Neuroph.Imgrec.Image.ImageJ2SE
  getHeight()I = Height
  getType()I = Type
  getWidth()I = Width
  crop(IIII)Lorg/neuroph/imgrec/image/Image; = Crop(int, int, int, int)
  getPixel(II)I = GetPixel(int, int)
  getPixels(IIIIII)[I = GetPixels(int, int, int, int, int, int)
  resize(II)Lorg/neuroph/imgrec/image/Image; = Resize(int, int)
  setPixel(III)V = SetPixel(int, int, int)
  setPixels([IIIIIII)V = SetPixels(int[], int, int, int, int, int, int)
org/neuroph/imgrec/image/ImageType = Org.Neuroph.Imgrec.Image.ImageType
  <init>()V = .ctor()
  ANDROID_TYPE_ALPHA_8 = AndroidTypeAlpha8
  ANDROID_TYPE_ARGB_8888 = AndroidTypeArgb8888
  ANDROID_TYPE_RGB_565 = AndroidTypeRgb565
  J2SE_TYPE_3BYTE_BGR = J2seType3byteBgr
  J2SE_TYPE_4BYTE_ABGR = J2seType4byteAbgr
  J2SE_TYPE_4BYTE_ABGR_PRE = J2seType4byteAbgrPre
  J2SE_TYPE_BYTE_BINARY = J2seTypeByteBinary
  J2SE_TYPE_BYTE_GRAY = J2seTypeByteGray
  J2SE_TYPE_BYTE_INDEXED = J2seTypeByteIndexed
  J2SE_TYPE_CUSTOM = J2seTypeCustom
  J2SE_TYPE_INT_ARGB = J2seTypeIntArgb
  J2SE_TYPE_INT_ARGB_PRE = J2seTypeIntArgbPre
  J2SE_TYPE_INT_BGR = J2seTypeIntBgr
  J2SE_TYPE_INT_RGB = J2seTypeIntRgb
  J2SE_TYPE_USHORT_555_RGB = J2seTypeUshort555Rgb
  J2SE_TYPE_USHORT_565_RGB = J2seTypeUshort565Rgb
  J2SE_TYPE_USHORT_GRAY = J2seTypeUshortGray
org/neuroph/imgrec/ImageRecognitionHelper = Org.Neuroph.Imgrec.ImageRecognitionHelper
  <init>()V = .ctor()
  createBlackAndWhiteTrainingSet(Ljava/util/List;Ljava/util/Map;)Lorg/neuroph/core/data/DataSet; = CreateBlackAndWhiteTrainingSet(System.Collections.Generic.IList<string>, System.Collections.Generic.IDictionary<string, Org.Neuroph.Imgrec.FractionRgbData>)
  createNewNeuralNetwork(Ljava/lang/String;Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;Ljava/util/List;Ljava/util/List;Lorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/core/NeuralNetwork; = CreateNewNeuralNetwork(string, Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode, System.Collections.Generic.IList<string>, System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.TransferFunctionType)
  createTrainingSet(Ljava/util/List;Ljava/util/Map;)Lorg/neuroph/core/data/DataSet; = CreateTrainingSet(System.Collections.Generic.IList<string>, System.Collections.Generic.IDictionary<string, Org.Neuroph.Imgrec.FractionRgbData>)
org/neuroph/imgrec/ImageRecognitionPlugin = Org.Neuroph.Imgrec.ImageRecognitionPlugin
  <init>(Lorg/neuroph/imgrec/image/Dimension;)V = .ctor(Org.Neuroph.Imgrec.Image.Dimension)
  <init>(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;)V = .ctor(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode)
  IMG_REC_PLUGIN_NAME = ImgRecPluginName
  getColorMode()Lorg/neuroph/imgrec/ColorMode; = ColorMode
  getMaxOutput()Ljava/util/HashMap; = MaxOutput
  getOutput()Ljava/util/HashMap; = Output
  getSamplingResolution()Lorg/neuroph/imgrec/image/Dimension; = SamplingResolution
  processInput()V = ProcessInput()
  recognizeImage(Ljava/io/File;)Ljava/util/HashMap; = RecognizeImage(Java.IO.File)
  recognizeImage(Ljava/net/URL;)Ljava/util/HashMap; = RecognizeImage(Java.Net.URL)
  recognizeImage(Lorg/neuroph/imgrec/image/Image;)Ljava/util/HashMap; = RecognizeImage(Org.Neuroph.Imgrec.Image.IImage)
  setInput(Ljava/io/File;)V = SetInput(Java.IO.File)
  setInput(Ljava/net/URL;)V = SetInput(Java.Net.URL)
  setInput(Lorg/neuroph/imgrec/image/Image;)V = SetInput(Org.Neuroph.Imgrec.Image.IImage)
org/neuroph/imgrec/ImageRecognitionSample = Org.Neuroph.Imgrec.ImageRecognitionSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/imgrec/ImageSampler = Org.Neuroph.Imgrec.ImageSampler
  <init>()V = .ctor()
  downSampleImage(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = DownSampleImage(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.Image.IImage)
  downSampleImage(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/image/Image;I)Lorg/neuroph/imgrec/image/Image; = DownSampleImage(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.Image.IImage, int)
org/neuroph/imgrec/ImageSizeMismatchException = Org.Neuroph.Imgrec.ImageSizeMismatchException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/imgrec/ImageUtilities = Org.Neuroph.Imgrec.ImageUtilities
  <init>()V = .ctor()
  resizeImage(Lorg/neuroph/imgrec/image/Image;II)Lorg/neuroph/imgrec/image/Image; = ResizeImage(Org.Neuroph.Imgrec.Image.IImage, int, int)
org/neuroph/nnet/Adaline = Org.Neuroph.Nnet.Adaline
  <init>(I)V = .ctor(int)
org/neuroph/nnet/AutoencoderNetwork = Org.Neuroph.Nnet.AutoencoderNetwork
  <init>([I)V = .ctor(params int[])
org/neuroph/nnet/BAM = Org.Neuroph.Nnet.BAM
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/comp/ConvolutionalUtils = Org.Neuroph.Nnet.Comp.ConvolutionalUtils
  <init>()V = .ctor()
  connectFeatureMaps(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;II)V = ConnectFeatureMaps(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, int, int)
  fullConectMapLayers(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;)V = FullConectMapLayers(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer)
org/neuroph/nnet/comp/DelayedConnection = Org.Neuroph.Nnet.Comp.DelayedConnection
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;DI)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double, int)
  getDelay()I = Delay
  setDelay(I)V = Delay
org/neuroph/nnet/comp/Kernel = Org.Neuroph.Nnet.Comp.Kernel
  <init>(II)V = .ctor(int, int)
  getArea()I = Area
  getHeight()I = Height
  setHeight(I)V = Height
  getWidth()I = Width
  setWidth(I)V = Width
org/neuroph/nnet/comp/layer/CompetitiveLayer = Org.Neuroph.Nnet.Comp.Layer.CompetitiveLayer
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
  getMaxIterations()I = MaxIterations
  setMaxIterations(I)V = MaxIterations
  getWinner()Lorg/neuroph/nnet/comp/neuron/CompetitiveNeuron; = Winner
org/neuroph/nnet/comp/layer/ConvolutionalLayer = Org.Neuroph.Nnet.Comp.Layer.ConvolutionalLayer
  <init>(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/nnet/comp/Kernel;)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Nnet.Comp.Kernel)
  <init>(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/nnet/comp/Kernel;I)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Nnet.Comp.Kernel, int)
  <init>(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/nnet/comp/Kernel;ILorg/neuroph/util/NeuronProperties;)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Nnet.Comp.Kernel, int, Org.Neuroph.Util.NeuronProperties)
  DEFAULT_NEURON_PROP = DefaultNeuronProp
org/neuroph/nnet/comp/layer/FeatureMapsLayer = Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer
  <init>(Lorg/neuroph/nnet/comp/Kernel;)V = .ctor(Org.Neuroph.Nnet.Comp.Kernel)
  <init>(Lorg/neuroph/nnet/comp/Kernel;Lorg/neuroph/nnet/comp/layer/Layer2D$Dimensions;)V = .ctor(Org.Neuroph.Nnet.Comp.Kernel, Org.Neuroph.Nnet.Comp.Layer.Layer2D.Dimensions)
  <init>(Lorg/neuroph/nnet/comp/Kernel;Lorg/neuroph/nnet/comp/layer/Layer2D$Dimensions;ILorg/neuroph/util/NeuronProperties;)V = .ctor(Org.Neuroph.Nnet.Comp.Kernel, Org.Neuroph.Nnet.Comp.Layer.Layer2D.Dimensions, int, Org.Neuroph.Util.NeuronProperties)
  getKernel()Lorg/neuroph/nnet/comp/Kernel; = Kernel
  getMapDimensions()Lorg/neuroph/nnet/comp/layer/Layer2D$Dimensions; = MapDimensions
  getNumberOfMaps()I = NumberOfMaps
  addFeatureMap(Lorg/neuroph/nnet/comp/layer/Layer2D;)V = AddFeatureMap(Org.Neuroph.Nnet.Comp.Layer.Layer2D)
  connectMaps(Lorg/neuroph/nnet/comp/layer/Layer2D;Lorg/neuroph/nnet/comp/layer/Layer2D;)V = ConnectMaps(Org.Neuroph.Nnet.Comp.Layer.Layer2D, Org.Neuroph.Nnet.Comp.Layer.Layer2D)
  createFeatureMaps(ILorg/neuroph/nnet/comp/layer/Layer2D$Dimensions;Lorg/neuroph/util/NeuronProperties;)V = CreateFeatureMaps(int, Org.Neuroph.Nnet.Comp.Layer.Layer2D.Dimensions, Org.Neuroph.Util.NeuronProperties)
  getFeatureMap(I)Lorg/neuroph/nnet/comp/layer/Layer2D; = GetFeatureMap(int)
  getNeuronAt(III)Lorg/neuroph/core/Neuron; = GetNeuronAt(int, int, int)
org/neuroph/nnet/comp/layer/InputLayer = Org.Neuroph.Nnet.Comp.Layer.InputLayer
  <init>(I)V = .ctor(int)
org/neuroph/nnet/comp/layer/InputMapsLayer = Org.Neuroph.Nnet.Comp.Layer.InputMapsLayer
  <init>(Lorg/neuroph/nnet/comp/layer/Layer2D$Dimensions;I)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.Layer2D.Dimensions, int)
  DEFAULT_NEURON_PROP = DefaultNeuronProp
org/neuroph/nnet/comp/layer/Layer2D = Org.Neuroph.Nnet.Comp.Layer.Layer2D
  <init>(Lorg/neuroph/nnet/comp/layer/Layer2D$Dimensions;)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.Layer2D.Dimensions)
  <init>(Lorg/neuroph/nnet/comp/layer/Layer2D$Dimensions;Lorg/neuroph/util/NeuronProperties;)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.Layer2D.Dimensions, Org.Neuroph.Util.NeuronProperties)
  getHeight()I = Height
  getWidth()I = Width
  getDimensions()Lorg/neuroph/nnet/comp/layer/Layer2D$Dimensions; = GetDimensions()
  getNeuronAt(II)Lorg/neuroph/core/Neuron; = GetNeuronAt(int, int)
org/neuroph/nnet/comp/layer/PoolingLayer = Org.Neuroph.Nnet.Comp.Layer.PoolingLayer
  <init>(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/nnet/comp/Kernel;)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Nnet.Comp.Kernel)
  <init>(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/nnet/comp/Kernel;ILorg/neuroph/util/NeuronProperties;)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Nnet.Comp.Kernel, int, Org.Neuroph.Util.NeuronProperties)
  DEFAULT_NEURON_PROP = DefaultNeuronProp
org/neuroph/nnet/comp/neuron/BiasNeuron = Org.Neuroph.Nnet.Comp.Neuron.BiasNeuron
  <init>()V = .ctor()
org/neuroph/nnet/comp/neuron/CompetitiveNeuron = Org.Neuroph.Nnet.Comp.Neuron.CompetitiveNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  isCompeting()Z = IsCompeting
  setIsCompeting(Z)V = IsCompeting
  getConnectionsFromOtherLayers()[Lorg/neuroph/core/Connection; = GetConnectionsFromOtherLayers()
org/neuroph/nnet/comp/neuron/DelayedNeuron = Org.Neuroph.Nnet.Comp.Neuron.DelayedNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  outputHistory = OutputHistory
  getOutput(I)D = GetOutput(int)
org/neuroph/nnet/comp/neuron/InputNeuron = Org.Neuroph.Nnet.Comp.Neuron.InputNeuron
  <init>()V = .ctor()
org/neuroph/nnet/comp/neuron/InputOutputNeuron = Org.Neuroph.Nnet.Comp.Neuron.InputOutputNeuron
  <init>()V = .ctor()
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  getBias()D = Bias
  setBias(D)V = Bias
org/neuroph/nnet/comp/neuron/ThresholdNeuron = Org.Neuroph.Nnet.Comp.Neuron.ThresholdNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  thresh = Thresh
  getThresh()D = Thresh
  setThresh(D)V = Thresh
org/neuroph/nnet/CompetitiveNetwork = Org.Neuroph.Nnet.CompetitiveNetwork
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/ConvolutionalNetwork = Org.Neuroph.Nnet.ConvolutionalNetwork
  <init>()V = .ctor()
org/neuroph/nnet/ElmanNetwork = Org.Neuroph.Nnet.ElmanNetwork
  <init>(IIII)V = .ctor(int, int, int, int)
org/neuroph/nnet/Hopfield = Org.Neuroph.Nnet.Hopfield
  <init>(I)V = .ctor(int)
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
org/neuroph/nnet/Instar = Org.Neuroph.Nnet.Instar
  <init>(I)V = .ctor(int)
org/neuroph/nnet/JordanNetwork = Org.Neuroph.Nnet.JordanNetwork
  <init>(IIII)V = .ctor(int, int, int, int)
org/neuroph/nnet/Kohonen = Org.Neuroph.Nnet.Kohonen
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/learning/AntiHebbianLearning = Org.Neuroph.Nnet.Learning.AntiHebbianLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/BackPropagation = Org.Neuroph.Nnet.Learning.BackPropagation
  <init>()V = .ctor()
  calculateErrorAndUpdateHiddenNeurons()V = CalculateErrorAndUpdateHiddenNeurons()
  calculateErrorAndUpdateOutputNeurons([D)V = CalculateErrorAndUpdateOutputNeurons(double[])
  calculateHiddenNeuronError(Lorg/neuroph/core/Neuron;)D = CalculateHiddenNeuronError(Org.Neuroph.Core.Neuron)
org/neuroph/nnet/learning/BinaryDeltaRule = Org.Neuroph.Nnet.Learning.BinaryDeltaRule
  <init>()V = .ctor()
  getErrorCorrection()D = ErrorCorrection
  setErrorCorrection(D)V = ErrorCorrection
org/neuroph/nnet/learning/BinaryHebbianLearning = Org.Neuroph.Nnet.Learning.BinaryHebbianLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/CompetitiveLearning = Org.Neuroph.Nnet.Learning.CompetitiveLearning
  <init>()V = .ctor()
  updateNetworkWeights()V = UpdateNetworkWeights()
org/neuroph/nnet/learning/ConvolutionalBackpropagation = Org.Neuroph.Nnet.Learning.ConvolutionalBackpropagation
  <init>()V = .ctor()
org/neuroph/nnet/learning/DynamicBackPropagation = Org.Neuroph.Nnet.Learning.DynamicBackPropagation
  <init>()V = .ctor()
  getLearningRateChange()D = LearningRateChange
  setLearningRateChange(D)V = LearningRateChange
  getMaxLearningRate()D = MaxLearningRate
  setMaxLearningRate(D)V = MaxLearningRate
  getMaxMomentum()D = MaxMomentum
  setMaxMomentum(D)V = MaxMomentum
  getMinLearningRate()D = MinLearningRate
  setMinLearningRate(D)V = MinLearningRate
  getMinMomentum()D = MinMomentum
  setMinMomentum(D)V = MinMomentum
  getMomentumChange()D = MomentumChange
  setMomentumChange(D)V = MomentumChange
  getUseDynamicLearningRate()Z = UseDynamicLearningRate
  setUseDynamicLearningRate(Z)V = UseDynamicLearningRate
  getUseDynamicMomentum()Z = UseDynamicMomentum
  setUseDynamicMomentum(Z)V = UseDynamicMomentum
  adjustLearningRate()V = AdjustLearningRate()
  adjustMomentum()V = AdjustMomentum()
org/neuroph/nnet/learning/GeneralizedHebbianLearning = Org.Neuroph.Nnet.Learning.GeneralizedHebbianLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/HopfieldLearning = Org.Neuroph.Nnet.Learning.HopfieldLearning
  <init>()V = .ctor()
  learn(Lorg/neuroph/core/data/DataSet;)V = Learn(Org.Neuroph.Core.Data.DataSet)
org/neuroph/nnet/learning/InstarLearning = Org.Neuroph.Nnet.Learning.InstarLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/kmeans/Cluster = Org.Neuroph.Nnet.Learning.Kmeans.Cluster
  <init>()V = .ctor()
  getCentroid()Lorg/neuroph/nnet/learning/kmeans/KVector; = Centroid
  setCentroid(Lorg/neuroph/nnet/learning/kmeans/KVector;)V = Centroid
  getPoints()Ljava/util/List; = Points
  assignVector(Lorg/neuroph/nnet/learning/kmeans/KVector;)V = AssignVector(Org.Neuroph.Nnet.Learning.Kmeans.KVector)
  getAvgSum()[D = GetAvgSum()
  removePoint(Lorg/neuroph/nnet/learning/kmeans/KVector;)V = RemovePoint(Org.Neuroph.Nnet.Learning.Kmeans.KVector)
  size()I = Size()
org/neuroph/nnet/learning/kmeans/KMeansClustering = Org.Neuroph.Nnet.Learning.Kmeans.KMeansClustering
  <init>(Lorg/neuroph/core/data/DataSet;)V = .ctor(Org.Neuroph.Core.Data.DataSet)
  <init>(Lorg/neuroph/core/data/DataSet;I)V = .ctor(Org.Neuroph.Core.Data.DataSet, int)
  getDataSet()Lorg/neuroph/core/data/DataSet; = DataSet
  setDataSet(Lorg/neuroph/core/data/DataSet;)V = DataSet
  getLog()Ljava/lang/String; = Log
  doClustering()V = DoClustering()
  getClusters()[Lorg/neuroph/nnet/learning/kmeans/Cluster; = GetClusters()
  initClusters()V = InitClusters()
  setNumberOfClusters(I)V = SetNumberOfClusters(int)
org/neuroph/nnet/learning/kmeans/KVector = Org.Neuroph.Nnet.Learning.Kmeans.KVector
  <init>([D)V = .ctor(double[])
  <init>(I)V = .ctor(int)
  getCluster()Lorg/neuroph/nnet/learning/kmeans/Cluster; = Cluster
  setCluster(Lorg/neuroph/nnet/learning/kmeans/Cluster;)V = Cluster
  getDistance()D = Distance
  setDistance(D)V = Distance
  getIntensity()D = Intensity
  distanceFrom(Lorg/neuroph/nnet/learning/kmeans/KVector;)D = DistanceFrom(Org.Neuroph.Nnet.Learning.Kmeans.KVector)
  getValueAt(I)D = GetValueAt(int)
  getValues()[D = GetValues()
  setValueAt(ID)V = SetValueAt(int, double)
  setValues([D)V = SetValues(double[])
  size()I = Size()
org/neuroph/nnet/learning/knn/KNearestNeighbour = Org.Neuroph.Nnet.Learning.Knn.KNearestNeighbour
  <init>()V = .ctor()
  getDataSet()Ljava/util/List; = DataSet
  setDataSet(Ljava/util/List;)V = DataSet
  getKNearestNeighbours(Lorg/neuroph/nnet/learning/kmeans/KVector;I)[Lorg/neuroph/nnet/learning/kmeans/KVector; = GetKNearestNeighbours(Org.Neuroph.Nnet.Learning.Kmeans.KVector, int)
org/neuroph/nnet/learning/KohonenLearning = Org.Neuroph.Nnet.Learning.KohonenLearning
  <init>()V = .ctor()
  getIteration()Ljava/lang/Integer; = Iteration
  getLearningRate()D = LearningRate
  setLearningRate(D)V = LearningRate
  getMapSize()I = MapSize
  learn(Lorg/neuroph/core/data/DataSet;)V = Learn(Org.Neuroph.Core.Data.DataSet)
  setIterations(II)V = SetIterations(int, int)
org/neuroph/nnet/learning/LMS = Org.Neuroph.Nnet.Learning.LMS
  <init>()V = .ctor()
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updateNeuronWeights(Lorg/neuroph/core/Neuron;)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron)
org/neuroph/nnet/learning/MomentumBackpropagation = Org.Neuroph.Nnet.Learning.MomentumBackpropagation
  <init>()V = .ctor()
  momentum = Momentum
  getMomentum()D = Momentum
  setMomentum(D)V = Momentum
org/neuroph/nnet/learning/OjaLearning = Org.Neuroph.Nnet.Learning.OjaLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/OutstarLearning = Org.Neuroph.Nnet.Learning.OutstarLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/PerceptronLearning = Org.Neuroph.Nnet.Learning.PerceptronLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/RBFLearning = Org.Neuroph.Nnet.Learning.RBFLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/ResilientPropagation = Org.Neuroph.Nnet.Learning.ResilientPropagation
  <init>()V = .ctor()
  getDecreaseFactor()D = DecreaseFactor
  setDecreaseFactor(D)V = DecreaseFactor
  getIncreaseFactor()D = IncreaseFactor
  setIncreaseFactor(D)V = IncreaseFactor
  getInitialDelta()D = InitialDelta
  setInitialDelta(D)V = InitialDelta
  getMaxDelta()D = MaxDelta
  setMaxDelta(D)V = MaxDelta
  getMinDelta()D = MinDelta
  setMinDelta(D)V = MinDelta
  resillientWeightUpdate(Lorg/neuroph/core/Weight;)V = ResillientWeightUpdate(Org.Neuroph.Core.Weight)
org/neuroph/nnet/learning/SigmoidDeltaRule = Org.Neuroph.Nnet.Learning.SigmoidDeltaRule
  <init>()V = .ctor()
org/neuroph/nnet/learning/SimulatedAnnealingLearning = Org.Neuroph.Nnet.Learning.SimulatedAnnealingLearning
  <init>(Lorg/neuroph/core/NeuralNetwork;)V = .ctor(Org.Neuroph.Core.NeuralNetwork)
  <init>(Lorg/neuroph/core/NeuralNetwork;DDI)V = .ctor(Org.Neuroph.Core.NeuralNetwork, double, double, int)
  network = Network
  temperature = Temperature
  getNetwork()Lorg/neuroph/core/NeuralNetwork; = Network
  randomize()V = Randomize()
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updateTotalNetworkError([D)V = UpdateTotalNetworkError(double[])
org/neuroph/nnet/learning/SupervisedHebbianLearning = Org.Neuroph.Nnet.Learning.SupervisedHebbianLearning
  <init>()V = .ctor()
  updateNeuronWeights(Lorg/neuroph/core/Neuron;D)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron, double)
org/neuroph/nnet/learning/UnsupervisedHebbianLearning = Org.Neuroph.Nnet.Learning.UnsupervisedHebbianLearning
  <init>()V = .ctor()
  updateNetworkWeights()V = UpdateNetworkWeights()
  updateNeuronWeights(Lorg/neuroph/core/Neuron;)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron)
org/neuroph/nnet/MaxNet = Org.Neuroph.Nnet.MaxNet
  <init>(I)V = .ctor(int)
org/neuroph/nnet/MultiLayerPerceptron = Org.Neuroph.Nnet.MultiLayerPerceptron
  <init>([I)V = .ctor(params int[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>)
  <init>(Ljava/util/List;Lorg/neuroph/util/NeuronProperties;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.NeuronProperties)
  <init>(Ljava/util/List;Lorg/neuroph/util/TransferFunctionType;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.TransferFunctionType)
  <init>(Lorg/neuroph/util/TransferFunctionType;[I)V = .ctor(Org.Neuroph.Util.TransferFunctionType, params int[])
  connectInputsToOutputs()V = ConnectInputsToOutputs()
org/neuroph/nnet/NeuroFuzzyPerceptron = Org.Neuroph.Nnet.NeuroFuzzyPerceptron
  <init>([[D[[D)V = .ctor(double[][], double[][])
  <init>(ILjava/util/Vector;I)V = .ctor(int, Java.Util.Vector, int)
org/neuroph/nnet/Outstar = Org.Neuroph.Nnet.Outstar
  <init>(I)V = .ctor(int)
org/neuroph/nnet/Perceptron = Org.Neuroph.Nnet.Perceptron
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/nnet/RBFNetwork = Org.Neuroph.Nnet.RBFNetwork
  <init>(III)V = .ctor(int, int, int)
org/neuroph/nnet/SupervisedHebbianNetwork = Org.Neuroph.Nnet.SupervisedHebbianNetwork
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/nnet/UnsupervisedHebbianNetwork = Org.Neuroph.Nnet.UnsupervisedHebbianNetwork
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/ocr/CharExtractor = Org.Neuroph.Ocr.CharExtractor
org/neuroph/ocr/OcrHelper = Org.Neuroph.Ocr.OcrHelper
  <init>()V = .ctor()
  createNewNeuralNetwork(Ljava/lang/String;Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;Ljava/util/List;Ljava/util/List;Lorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/core/NeuralNetwork; = CreateNewNeuralNetwork(string, Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode, System.Collections.Generic.IList<string>, System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/ocr/OcrPlugin = Org.Neuroph.Ocr.OcrPlugin
  <init>(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;)V = .ctor(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode)
  OCR_PLUGIN_NAME = OcrPluginName
  getColorMode()Lorg/neuroph/imgrec/ColorMode; = ColorMode
  getSamplingResolution()Lorg/neuroph/imgrec/image/Dimension; = SamplingResolution
  recognizeCharacter(Lorg/neuroph/imgrec/image/Image;)Ljava/lang/Character; = RecognizeCharacter(Org.Neuroph.Imgrec.Image.IImage)
  recognizeCharacter(Lorg/neuroph/imgrec/image/Image;Lorg/neuroph/imgrec/image/Dimension;)Ljava/lang/Character; = RecognizeCharacter(Org.Neuroph.Imgrec.Image.IImage, Org.Neuroph.Imgrec.Image.Dimension)
  recognizeCharacterProbabilities(Lorg/neuroph/imgrec/image/Image;)Ljava/util/HashMap; = RecognizeCharacterProbabilities(Org.Neuroph.Imgrec.Image.IImage)
org/neuroph/ocr/OcrSample = Org.Neuroph.Ocr.OcrSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/ocr/OcrUtils = Org.Neuroph.Ocr.OcrUtils
  <init>()V = .ctor()
  blackAndGrayCleaning(Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = BlackAndGrayCleaning(Org.Neuroph.Imgrec.Image.IImage)
  blackAndLightGrayCleaning(Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = BlackAndLightGrayCleaning(Org.Neuroph.Imgrec.Image.IImage)
  blackAndWhiteCleaning(Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = BlackAndWhiteCleaning(Org.Neuroph.Imgrec.Image.IImage)
  colorCleaning(Lorg/neuroph/imgrec/image/Image;I)Lorg/neuroph/imgrec/image/Image; = ColorCleaning(Org.Neuroph.Imgrec.Image.IImage, int)
  getFractionRgbDataForImages(Ljava/util/HashMap;)Ljava/util/Map; = GetFractionRgbDataForImages(System.Collections.Generic.IDictionary<string, Org.Neuroph.Imgrec.Image.IImage>)
  loadAndCleanImage(Ljava/io/File;)Lorg/neuroph/imgrec/image/Image; = LoadAndCleanImage(Java.IO.File)
  loadImage(Ljava/io/File;)Lorg/neuroph/imgrec/image/Image; = LoadImage(Java.IO.File)
org/neuroph/samples/convolution/MNISTDataSet = Org.Neuroph.Samples.Convolution.MNISTDataSet
  <init>()V = .ctor()
  TEST_IMAGE_NAME = TestImageName
  TEST_LABEL_NAME = TestLabelName
  TRAIN_IMAGE_NAME = TrainImageName
  TRAIN_LABEL_NAME = TrainLabelName
  createFromFile(Ljava/lang/String;Ljava/lang/String;I)Lorg/neuroph/core/data/DataSet; = CreateFromFile(string, string, int)
org/neuroph/samples/convolution/MNISTImage = Org.Neuroph.Samples.Convolution.MNISTImage
  <init>(I[B)V = .ctor(int, byte[])
  getLabel()I = Label
  getSize()I = Size
  getData()[B = GetData()
org/neuroph/samples/convolution/MNISTImageLoader = Org.Neuroph.Samples.Convolution.MNISTImageLoader
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  COLUMNS = Columns
  ROWS = Rows
  loadDigitImages()Ljava/util/List; = LoadDigitImages()
org/neuroph/samples/convolution/ModelMetric = Org.Neuroph.Samples.Convolution.ModelMetric
  <init>()V = .ctor()
  calculateModelMetric(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = CalculateModelMetric(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/convolution/OCRExample = Org.Neuroph.Samples.Convolution.OCRExample
  <init>()V = .ctor()
  fullConnect(Lorg/neuroph/nnet/comp/layer/FeatureMapsLayer;Lorg/neuroph/core/Layer;Z)V = FullConnect(Org.Neuroph.Nnet.Comp.Layer.FeatureMapsLayer, Org.Neuroph.Core.Layer, bool)
  main([Ljava/lang/String;)V = Main(string[])
  saveImage(Lorg/neuroph/nnet/comp/layer/Layer2D;)V = SaveImage(Org.Neuroph.Nnet.Comp.Layer.Layer2D)
  test(Lorg/neuroph/nnet/ConvolutionalNetwork;Lorg/neuroph/core/data/DataSet;)V = Test(Org.Neuroph.Nnet.ConvolutionalNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/convolution/SimpleLearningExample = Org.Neuroph.Samples.Convolution.SimpleLearningExample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testLearningOneLayer()V = TestLearningOneLayer()
org/neuroph/samples/convolution/WeightVisualiser = Org.Neuroph.Samples.Convolution.WeightVisualiser
  <init>(Lorg/neuroph/nnet/comp/layer/Layer2D;Lorg/neuroph/nnet/comp/Kernel;)V = .ctor(Org.Neuroph.Nnet.Comp.Layer.Layer2D, Org.Neuroph.Nnet.Comp.Kernel)
  displayWeights()V = DisplayWeights()
org/neuroph/samples/FileIOSample = Org.Neuroph.Samples.FileIOSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/HopfieldSample = Org.Neuroph.Samples.HopfieldSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/IrisClassificationSample = Org.Neuroph.Samples.IrisClassificationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/JDBCSample = Org.Neuroph.Samples.JDBCSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/NormalizationSample = Org.Neuroph.Samples.NormalizationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/PerceptronSample = Org.Neuroph.Samples.PerceptronSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/RandomizationSample = Org.Neuroph.Samples.RandomizationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  printWeights(Lorg/neuroph/core/NeuralNetwork;)V = PrintWeights(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/samples/RBFClassificationSample = Org.Neuroph.Samples.RBFClassificationSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/AnimalsClassificationSample = Org.Neuroph.Samples.Uci.AnimalsClassificationSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/BalanceScaleSample = Org.Neuroph.Samples.Uci.BalanceScaleSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/CarEvaluationSample = Org.Neuroph.Samples.Uci.CarEvaluationSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/ConceptLearningAndClassificationSample = Org.Neuroph.Samples.Uci.ConceptLearningAndClassificationSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/ConcreteStrenghtTestSample = Org.Neuroph.Samples.Uci.ConcreteStrenghtTestSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/ForestFiresSample = Org.Neuroph.Samples.Uci.ForestFiresSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/GlassIdentificationSample = Org.Neuroph.Samples.Uci.GlassIdentificationSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/LensesClassificationSample = Org.Neuroph.Samples.Uci.LensesClassificationSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/PredictingPerformanceOfCPUSample = Org.Neuroph.Samples.Uci.PredictingPerformanceOfCPUSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/PredictingPokerHandsSample = Org.Neuroph.Samples.Uci.PredictingPokerHandsSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/PredictingTheReligionSample = Org.Neuroph.Samples.Uci.PredictingTheReligionSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/ShuttleLandingControlSample = Org.Neuroph.Samples.Uci.ShuttleLandingControlSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/uci/WineClassificationSample = Org.Neuroph.Samples.Uci.WineClassificationSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/XorMultiLayerPerceptronSample = Org.Neuroph.Samples.XorMultiLayerPerceptronSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/samples/XorResilientPropagationSample = Org.Neuroph.Samples.XorResilientPropagationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/data/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Data.DataSet)
org/neuroph/util/benchmark/Benchmark = Org.Neuroph.Util.Benchmark.Benchmark
  <init>()V = .ctor()
  addTask(Lorg/neuroph/util/benchmark/BenchmarkTask;)V = AddTask(Org.Neuroph.Util.Benchmark.BenchmarkTask)
  run()V = Run()
  runTask(Lorg/neuroph/util/benchmark/BenchmarkTask;)V = RunTask(Org.Neuroph.Util.Benchmark.BenchmarkTask)
org/neuroph/util/benchmark/BenchmarkSample = Org.Neuroph.Util.Benchmark.BenchmarkSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/util/benchmark/BenchmarkTask = Org.Neuroph.Util.Benchmark.BenchmarkTask
  <init>(Ljava/lang/String;)V = .ctor(string)
  getName()Ljava/lang/String; = Name
  setName(Ljava/lang/String;)V = Name
  getTestIterations()I = TestIterations
  setTestIterations(I)V = TestIterations
  getWarmupIterations()I = WarmupIterations
  setWarmupIterations(I)V = WarmupIterations
  prepareTest()V = PrepareTest()
  runTest()V = RunTest()
org/neuroph/util/benchmark/BenchmarkTaskResults = Org.Neuroph.Util.Benchmark.BenchmarkTaskResults
  <init>(I)V = .ctor(int)
  getAverageTestTime()D = AverageTestTime
  getMaxTestTime()D = MaxTestTime
  getMinTestTime()D = MinTestTime
  getStandardDeviation()D = StandardDeviation
  getTestIterations()I = TestIterations
  addElapsedTime(J)V = AddElapsedTime(long)
  calculateStatistics()V = CalculateStatistics()
  getElapsedTimes()[J = GetElapsedTimes()
org/neuroph/util/benchmark/MyBenchmarkTask = Org.Neuroph.Util.Benchmark.MyBenchmarkTask
  <init>(Ljava/lang/String;)V = .ctor(string)
  prepareTest()V = PrepareTest()
  runTest()V = RunTest()
org/neuroph/util/benchmark/Stopwatch = Org.Neuroph.Util.Benchmark.Stopwatch
  <init>()V = .ctor()
  getElapsedTime()J = ElapsedTime
  reset()V = Reset()
  start()V = Start()
  stop()V = Stop()
org/neuroph/util/ConnectionFactory = Org.Neuroph.Util.ConnectionFactory
  <init>()V = .ctor()
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Layer;)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Layer)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;DI)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double, int)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Weight;)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Weight)
  forwardConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;)V = ForwardConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer)
  forwardConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;D)V = ForwardConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, double)
  fullConnect(Lorg/neuroph/core/Layer;)V = FullConnect(Org.Neuroph.Core.Layer)
  fullConnect(Lorg/neuroph/core/Layer;D)V = FullConnect(Org.Neuroph.Core.Layer, double)
  fullConnect(Lorg/neuroph/core/Layer;DI)V = FullConnect(Org.Neuroph.Core.Layer, double, int)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;Z)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, bool)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;D)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, double)
org/neuroph/util/data/norm/DecimalScaleNormalizer = Org.Neuroph.Util.Data.Norm.DecimalScaleNormalizer
  <init>()V = .ctor()
  findScaleVectors()V = FindScaleVectors()
  normalize(Lorg/neuroph/core/data/DataSet;)V = Normalize(Org.Neuroph.Core.Data.DataSet)
org/neuroph/util/data/norm/MaxMinNormalizer = Org.Neuroph.Util.Data.Norm.MaxMinNormalizer
  <init>()V = .ctor()
  normalize(Lorg/neuroph/core/data/DataSet;)V = Normalize(Org.Neuroph.Core.Data.DataSet)
org/neuroph/util/data/norm/MaxNormalizer = Org.Neuroph.Util.Data.Norm.MaxNormalizer
  <init>()V = .ctor()
  normalize(Lorg/neuroph/core/data/DataSet;)V = Normalize(Org.Neuroph.Core.Data.DataSet)
  normalizeMax([D[D)[D = NormalizeMax(double[], double[])
org/neuroph/util/data/norm/Normalizer = Org.Neuroph.Util.Data.Norm.INormalizer
  normalize(Lorg/neuroph/core/data/DataSet;)V = Normalize(Org.Neuroph.Core.Data.DataSet)
org/neuroph/util/data/norm/RangeNormalizer = Org.Neuroph.Util.Data.Norm.RangeNormalizer
  <init>(DD)V = .ctor(double, double)
  normalize(Lorg/neuroph/core/data/DataSet;)V = Normalize(Org.Neuroph.Core.Data.DataSet)
org/neuroph/util/data/sample/Sampling = Org.Neuroph.Util.Data.Sample.ISampling
  sample(Lorg/neuroph/core/data/DataSet;)[Lorg/neuroph/core/data/DataSet; = Sample(Org.Neuroph.Core.Data.DataSet)
org/neuroph/util/data/sample/SubSampling = Org.Neuroph.Util.Data.Sample.SubSampling
  <init>(I)V = .ctor(int)
  sample(Lorg/neuroph/core/data/DataSet;)[Lorg/neuroph/core/data/DataSet; = Sample(Org.Neuroph.Core.Data.DataSet)
org/neuroph/util/FileUtils = Org.Neuroph.Util.FileUtils
  <init>()V = .ctor()
  readStringFromFile(Ljava/io/File;)Ljava/lang/String; = ReadStringFromFile(Java.IO.File)
  writeStringToFile(Ljava/io/File;Ljava/lang/String;)V = WriteStringToFile(Java.IO.File, string)
org/neuroph/util/io/FileInputAdapter = Org.Neuroph.Util.IO.FileInputAdapter
  <init>(Ljava/io/File;)V = .ctor(Java.IO.File)
  <init>(Ljava/lang/String;)V = .ctor(string)
org/neuroph/util/io/FileOutputAdapter = Org.Neuroph.Util.IO.FileOutputAdapter
  <init>(Ljava/io/File;)V = .ctor(Java.IO.File)
  <init>(Ljava/lang/String;)V = .ctor(string)
org/neuroph/util/io/InputAdapter = Org.Neuroph.Util.IO.IInputAdapter
  close()V = Close()
  readInput()[D = ReadInput()
org/neuroph/util/io/InputStreamAdapter = Org.Neuroph.Util.IO.InputStreamAdapter
  <init>(Ljava/io/BufferedReader;)V = .ctor(Java.IO.BufferedReader)
  <init>(Ljava/io/InputStream;)V = .ctor(System.IO.Stream)
  bufferedReader = BufferedReader
  close()V = Close()
  readInput()[D = ReadInput()
org/neuroph/util/io/IOHelper = Org.Neuroph.Util.IO.IOHelper
  <init>()V = .ctor()
  process(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/util/io/InputAdapter;Lorg/neuroph/util/io/OutputAdapter;)V = Process(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Util.IO.IInputAdapter, Org.Neuroph.Util.IO.IOutputAdapter)
org/neuroph/util/io/JDBCInputAdapter = Org.Neuroph.Util.IO.JDBCInputAdapter
  <init>(Ljava/sql/Connection;Ljava/lang/String;)V = .ctor(Java.Sql.IConnection, string)
  close()V = Close()
  readInput()[D = ReadInput()
org/neuroph/util/io/JDBCOutputAdapter = Org.Neuroph.Util.IO.JDBCOutputAdapter
  <init>(Ljava/sql/Connection;Ljava/lang/String;)V = .ctor(Java.Sql.IConnection, string)
  close()V = Close()
  writeOutput([D)V = WriteOutput(double[])
org/neuroph/util/io/NeurophInputException = Org.Neuroph.Util.IO.NeurophInputException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/util/io/NeurophOutputException = Org.Neuroph.Util.IO.NeurophOutputException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/util/io/OutputAdapter = Org.Neuroph.Util.IO.IOutputAdapter
  close()V = Close()
  writeOutput([D)V = WriteOutput(double[])
org/neuroph/util/io/OutputStreamAdapter = Org.Neuroph.Util.IO.OutputStreamAdapter
  <init>(Ljava/io/BufferedWriter;)V = .ctor(Java.IO.BufferedWriter)
  <init>(Ljava/io/OutputStream;)V = .ctor(System.IO.Stream)
  bufferedWriter = BufferedWriter
  close()V = Close()
  writeOutput([D)V = WriteOutput(double[])
org/neuroph/util/io/URLInputAdapter = Org.Neuroph.Util.IO.URLInputAdapter
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/net/URL;)V = .ctor(Java.Net.URL)
org/neuroph/util/io/URLOutputAdapter = Org.Neuroph.Util.IO.URLOutputAdapter
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/net/URL;)V = .ctor(Java.Net.URL)
org/neuroph/util/LayerFactory = Org.Neuroph.Util.LayerFactory
  <init>()V = .ctor()
  createLayer(ILjava/lang/Class;)Lorg/neuroph/core/Layer; = CreateLayer(int, Java.Lang.Class)
  createLayer(ILorg/neuroph/util/NeuronProperties;)Lorg/neuroph/core/Layer; = CreateLayer(int, Org.Neuroph.Util.NeuronProperties)
  createLayer(ILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/core/Layer; = CreateLayer(int, Org.Neuroph.Util.TransferFunctionType)
  createLayer(Ljava/util/List;)Lorg/neuroph/core/Layer; = CreateLayer(System.Collections.Generic.IList<Org.Neuroph.Util.NeuronProperties>)
org/neuroph/util/NeuralNetworkCODEC = Org.Neuroph.Util.NeuralNetworkCODEC
  array2network([DLorg/neuroph/core/NeuralNetwork;)V = Array2network(double[], Org.Neuroph.Core.NeuralNetwork)
  determineArraySize(Lorg/neuroph/core/NeuralNetwork;)I = DetermineArraySize(Org.Neuroph.Core.NeuralNetwork)
  network2array(Lorg/neuroph/core/NeuralNetwork;[D)V = Network2array(Org.Neuroph.Core.NeuralNetwork, double[])
org/neuroph/util/NeuralNetworkFactory = Org.Neuroph.Util.NeuralNetworkFactory
  <init>()V = .ctor()
  createAdaline(I)Lorg/neuroph/nnet/Adaline; = CreateAdaline(int)
  createBam(II)Lorg/neuroph/nnet/BAM; = CreateBam(int, int)
  createCompetitiveNetwork(II)Lorg/neuroph/nnet/CompetitiveNetwork; = CreateCompetitiveNetwork(int, int)
  createHopfield(I)Lorg/neuroph/nnet/Hopfield; = CreateHopfield(int)
  createInstar(I)Lorg/neuroph/nnet/Instar; = CreateInstar(int)
  createKohonen(II)Lorg/neuroph/nnet/Kohonen; = CreateKohonen(int, int)
  createMaxNet(I)Lorg/neuroph/nnet/MaxNet; = CreateMaxNet(int)
  createMLPerceptron(Ljava/lang/String;Lorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/MultiLayerPerceptron; = CreateMLPerceptron(string, Org.Neuroph.Util.TransferFunctionType)
  createMLPerceptron(Ljava/lang/String;Lorg/neuroph/util/TransferFunctionType;Ljava/lang/Class;ZZ)Lorg/neuroph/nnet/MultiLayerPerceptron; = CreateMLPerceptron(string, Org.Neuroph.Util.TransferFunctionType, Java.Lang.Class, bool, bool)
  createOutstar(I)Lorg/neuroph/nnet/Outstar; = CreateOutstar(int)
  createPerceptron(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/Perceptron; = CreatePerceptron(int, int, Org.Neuroph.Util.TransferFunctionType)
  createPerceptron(IILorg/neuroph/util/TransferFunctionType;Ljava/lang/Class;)Lorg/neuroph/nnet/Perceptron; = CreatePerceptron(int, int, Org.Neuroph.Util.TransferFunctionType, Java.Lang.Class)
  createRbfNetwork(III)Lorg/neuroph/nnet/RBFNetwork; = CreateRbfNetwork(int, int, int)
  createSupervisedHebbian(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/SupervisedHebbianNetwork; = CreateSupervisedHebbian(int, int, Org.Neuroph.Util.TransferFunctionType)
  createUnsupervisedHebbian(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/UnsupervisedHebbianNetwork; = CreateUnsupervisedHebbian(int, int, Org.Neuroph.Util.TransferFunctionType)
  setDefaultIO(Lorg/neuroph/core/NeuralNetwork;)V = SetDefaultIO(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/util/NeuralNetworkType = Org.Neuroph.Util.NeuralNetworkType
  ADALINE = Adaline
  BAM = Bam
  BOLTZMAN = Boltzman
  COMPETITIVE = Competitive
  COUNTERPROPAGATION = Counterpropagation
  HOPFIELD = Hopfield
  INSTAR = Instar
  INSTAR_OUTSTAR = InstarOutstar
  KOHONEN = Kohonen
  MAXNET = Maxnet
  MULTI_LAYER_PERCEPTRON = MultiLayerPerceptron
  NEURO_FUZZY_REASONER = NeuroFuzzyReasoner
  OUTSTAR = Outstar
  PCA_NETWORK = PcaNetwork
  PERCEPTRON = Perceptron
  RBF_NETWORK = RbfNetwork
  RECOMMENDER = Recommender
  SUPERVISED_HEBBIAN_NET = SupervisedHebbianNet
  UNSUPERVISED_HEBBIAN_NET = UnsupervisedHebbianNet
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/NeuralNetworkType; = ValueOf(string)
  values()[Lorg/neuroph/util/NeuralNetworkType; = Values()
org/neuroph/util/NeuronFactory = Org.Neuroph.Util.NeuronFactory
  <init>()V = .ctor()
  createNeuron(Lorg/neuroph/util/NeuronProperties;)Lorg/neuroph/core/Neuron; = CreateNeuron(Org.Neuroph.Util.NeuronProperties)
org/neuroph/util/NeuronProperties = Org.Neuroph.Util.NeuronProperties
  <init>()V = .ctor()
  <init>(Ljava/lang/Class;)V = .ctor(Java.Lang.Class)
  <init>(Ljava/lang/Class;Ljava/lang/Class;)V = .ctor(Java.Lang.Class, Java.Lang.Class)
  <init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V = .ctor(Java.Lang.Class, Java.Lang.Class, Java.Lang.Class)
  <init>(Ljava/lang/Class;Lorg/neuroph/util/TransferFunctionType;)V = .ctor(Java.Lang.Class, Org.Neuroph.Util.TransferFunctionType)
  <init>(Lorg/neuroph/util/TransferFunctionType;Z)V = .ctor(Org.Neuroph.Util.TransferFunctionType, bool)
  getInputFunction()Ljava/lang/Class; = InputFunction
  getNeuronType()Ljava/lang/Class; = NeuronType
  getTransferFunction()Ljava/lang/Class; = TransferFunction
  getTransferFunctionProperties()Lorg/neuroph/util/Properties; = TransferFunctionProperties
  setProperty(Ljava/lang/String;Ljava/lang/Object;)V = SetProperty(string, Java.Lang.Object)
org/neuroph/util/Neuroph = Org.Neuroph.Util.Neuroph
  <init>()V = .ctor()
  getInputFunctions()Ljava/util/ArrayList; = InputFunctions
  getInstance()Lorg/neuroph/util/Neuroph; = Instance
  getLayers()Ljava/util/ArrayList; = Layers
  getLearningRules()Ljava/util/ArrayList; = LearningRules
  getNeurons()Ljava/util/ArrayList; = Neurons
  getTransferFunctions()Ljava/util/ArrayList; = TransferFunctions
  getVersion()Ljava/lang/String; = Version
  setFlattenNetworks(Z)V = SetFlattenNetworks(bool)
  shouldFlattenNetworks()Z = ShouldFlattenNetworks()
  shutdown()V = Shutdown()
org/neuroph/util/plugins/PluginBase = Org.Neuroph.Util.Plugins.PluginBase
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  getName()Ljava/lang/String; = Name
  getParentNetwork()Lorg/neuroph/core/NeuralNetwork; = ParentNetwork
  setParentNetwork(Lorg/neuroph/core/NeuralNetwork;)V = ParentNetwork
org/neuroph/util/Properties = Org.Neuroph.Util.Properties
  <init>()V = .ctor()
  createKeys([Ljava/lang/String;)V = CreateKeys(params string[])
  getProperty(Ljava/lang/String;)Ljava/lang/Object; = GetProperty(string)
  hasProperty(Ljava/lang/String;)Z = HasProperty(string)
  setProperty(Ljava/lang/String;Ljava/lang/Object;)V = SetProperty(string, Java.Lang.Object)
org/neuroph/util/random/DistortRandomizer = Org.Neuroph.Util.Random.DistortRandomizer
  <init>(D)V = .ctor(double)
org/neuroph/util/random/GaussianRandomizer = Org.Neuroph.Util.Random.GaussianRandomizer
  <init>(DD)V = .ctor(double, double)
org/neuroph/util/random/NguyenWidrowRandomizer = Org.Neuroph.Util.Random.NguyenWidrowRandomizer
  <init>(DD)V = .ctor(double, double)
org/neuroph/util/random/RangeRandomizer = Org.Neuroph.Util.Random.RangeRandomizer
  <init>(DD)V = .ctor(double, double)
  max = Max
  min = Min
org/neuroph/util/random/WeightsRandomizer = Org.Neuroph.Util.Random.WeightsRandomizer
  <init>()V = .ctor()
  <init>(Ljava/util/Random;)V = .ctor(Java.Util.Random)
  randomGenerator = RandomGenerator
  getRandomGenerator()Ljava/util/Random; = RandomGenerator
  setRandomGenerator(Ljava/util/Random;)V = RandomGenerator
  nextRandomWeight()D = NextRandomWeight()
  randomize(Lorg/neuroph/core/Layer;)V = Randomize(Org.Neuroph.Core.Layer)
  randomize(Lorg/neuroph/core/NeuralNetwork;)V = Randomize(Org.Neuroph.Core.NeuralNetwork)
  randomize(Lorg/neuroph/core/Neuron;)V = Randomize(Org.Neuroph.Core.Neuron)
org/neuroph/util/TrainingSetImport = Org.Neuroph.Util.TrainingSetImport
  <init>()V = .ctor()
  importFromFile(Ljava/lang/String;IILjava/lang/String;)Lorg/neuroph/core/data/DataSet; = ImportFromFile(string, int, int, string)
org/neuroph/util/TransferFunctionType = Org.Neuroph.Util.TransferFunctionType
  GAUSSIAN = Gaussian
  LINEAR = Linear
  LOG = Log
  RAMP = Ramp
  SGN = Sgn
  SIGMOID = Sigmoid
  SIN = Sin
  STEP = Step
  TANH = Tanh
  TRAPEZOID = Trapezoid
  getTypeClass()Ljava/lang/Class; = TypeClass
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/TransferFunctionType; = ValueOf(string)
  values()[Lorg/neuroph/util/TransferFunctionType; = Values()
org/neuroph/util/VectorParser = Org.Neuroph.Util.VectorParser
  <init>()V = .ctor()
  convertToVector([D)Ljava/util/ArrayList; = ConvertToVector(double[])
  parseDoubleArray(Ljava/lang/String;)[D = ParseDoubleArray(string)
  parseInteger(Ljava/lang/String;)Ljava/util/ArrayList; = ParseInteger(string)
  toDoubleArray(Ljava/util/List;)[D = ToDoubleArray(System.Collections.Generic.IList<Java.Lang.Double>)
org/slf4j/impl/StaticMarkerBinder = Org.Slf4j.Impl.StaticMarkerBinder
  SINGLETON = Singleton
  getMarkerFactoryClassStr()Ljava/lang/String; = MarkerFactoryClassStr
org/slf4j/impl/StaticMarkerBinder = Org.Slf4j.Impl.StaticMarkerBinder
  SINGLETON = Singleton
  getMarkerFactoryClassStr()Ljava/lang/String; = MarkerFactoryClassStr
org/slf4j/impl/StaticMDCBinder = Org.Slf4j.Impl.StaticMDCBinder
  SINGLETON = Singleton
  getMDCAdapterClassStr()Ljava/lang/String; = MDCAdapterClassStr
org/slf4j/impl/StaticMDCBinder = Org.Slf4j.Impl.StaticMDCBinder
  SINGLETON = Singleton
  getMDCAdapterClassStr()Ljava/lang/String; = MDCAdapterClassStr
