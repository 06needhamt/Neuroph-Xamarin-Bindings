org/encog/engine/concurrency/DetermineWorkload = Org.Encog.Engine.Concurrency.DetermineWorkload
  <init>(II)V = .ctor(int, int)
  MIN_WORTHWHILE = MinWorthwhile
  getThreadCount()I = ThreadCount
  calculateWorkers()Ljava/util/List; = CalculateWorkers()
org/encog/engine/concurrency/EngineConcurrency = Org.Encog.Engine.Concurrency.EngineConcurrency
  <init>()V = .ctor()
  getInstance()Lorg/encog/engine/concurrency/EngineConcurrency; = Instance
  checkError()V = CheckError()
  createTaskGroup()Lorg/encog/engine/concurrency/TaskGroup; = CreateTaskGroup()
  processTask(Lorg/encog/engine/concurrency/EngineTask;)V = ProcessTask(Org.Encog.Engine.Concurrency.IEngineTask)
  processTask(Lorg/encog/engine/concurrency/EngineTask;Lorg/encog/engine/concurrency/TaskGroup;)V = ProcessTask(Org.Encog.Engine.Concurrency.IEngineTask, Org.Encog.Engine.Concurrency.TaskGroup)
  registerError(Ljava/lang/Throwable;)V = RegisterError(Java.Lang.Throwable)
  shutdown(J)V = Shutdown(long)
org/encog/engine/concurrency/EngineTask = Org.Encog.Engine.Concurrency.IEngineTask
  run()V = Run()
org/encog/engine/concurrency/job/ConcurrentJob = Org.Encog.Engine.Concurrency.Job.ConcurrentJob
  <init>(Lorg/encog/engine/StatusReportable;)V = .ctor(Org.Encog.Engine.IStatusReportable)
  getShouldStop()Z = ShouldStop
  loadWorkload()I = LoadWorkload()
  performJobUnit(Lorg/encog/engine/concurrency/job/JobUnitContext;)V = PerformJobUnit(Org.Encog.Engine.Concurrency.Job.JobUnitContext)
  process()V = Process()
  reportStatus(Lorg/encog/engine/concurrency/job/JobUnitContext;Ljava/lang/String;)V = ReportStatus(Org.Encog.Engine.Concurrency.Job.JobUnitContext, string)
  requestNextTask()Ljava/lang/Object; = RequestNextTask()
  stop()V = Stop()
org/encog/engine/concurrency/job/JobUnitContext = Org.Encog.Engine.Concurrency.Job.JobUnitContext
  <init>()V = .ctor()
  getJobUnit()Ljava/lang/Object; = JobUnit
  setJobUnit(Ljava/lang/Object;)V = JobUnit
  getOwner()Lorg/encog/engine/concurrency/job/ConcurrentJob; = Owner
  setOwner(Lorg/encog/engine/concurrency/job/ConcurrentJob;)V = Owner
  getTaskNumber()I = TaskNumber
  setTaskNumber(I)V = TaskNumber
org/encog/engine/concurrency/job/JobUnitWorker = Org.Encog.Engine.Concurrency.Job.JobUnitWorker
  <init>(Lorg/encog/engine/concurrency/job/JobUnitContext;)V = .ctor(Org.Encog.Engine.Concurrency.Job.JobUnitContext)
  run()V = Run()
org/encog/engine/concurrency/PoolItem = Org.Encog.Engine.Concurrency.PoolItem
  <init>(Lorg/encog/engine/concurrency/EngineTask;Lorg/encog/engine/concurrency/TaskGroup;)V = .ctor(Org.Encog.Engine.Concurrency.IEngineTask, Org.Encog.Engine.Concurrency.TaskGroup)
  run()V = Run()
org/encog/engine/concurrency/TaskGroup = Org.Encog.Engine.Concurrency.TaskGroup
  <init>(I)V = .ctor(int)
  getID()I = ID
  getNoTasks()Z = NoTasks
  taskStarting()V = TaskStarting()
  taskStopping()V = TaskStopping()
  waitForComplete()V = WaitForComplete()
org/encog/engine/data/BasicEngineData = Org.Encog.Engine.Data.BasicEngineData
  <init>([D)V = .ctor(double[])
  <init>([D[D)V = .ctor(double[], double[])
  isSupervised()Z = IsSupervised
  createPair(II)Lorg/encog/engine/data/EngineData; = CreatePair(int, int)
  getIdealArray()[D = GetIdealArray()
  getInputArray()[D = GetInputArray()
  setIdealArray([D)V = SetIdealArray(double[])
  setInputArray([D)V = SetInputArray(double[])
org/encog/engine/data/BasicEngineDataSet = Org.Encog.Engine.Data.BasicEngineDataSet
  <init>()V = .ctor()
  <init>([[D[[D)V = .ctor(double[][], double[][])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Org.Encog.Engine.Data.IEngineData>)
  getData()Ljava/util/List; = Data
  setData(Ljava/util/List;)V = Data
  getIdealSize()I = IdealSize
  getInputSize()I = InputSize
  isSupervised()Z = IsSupervised
  getRecordCount()J = RecordCount
  add([D)V = Add(double[])
  add([D[D)V = Add(double[], double[])
  add(Lorg/encog/engine/data/EngineData;)V = Add(Org.Encog.Engine.Data.IEngineData)
  getRecord(JLorg/encog/engine/data/EngineData;)V = GetRecord(long, Org.Encog.Engine.Data.IEngineData)
  openAdditional()Lorg/encog/engine/data/EngineIndexableSet; = OpenAdditional()
org/encog/engine/data/EngineData = Org.Encog.Engine.Data.IEngineData
  isSupervised()Z = IsSupervised
  getIdealArray()[D = GetIdealArray()
  getInputArray()[D = GetInputArray()
  setIdealArray([D)V = SetIdealArray(double[])
  setInputArray([D)V = SetInputArray(double[])
org/encog/engine/data/EngineDataSet = Org.Encog.Engine.Data.IEngineDataSet
  getIdealSize()I = IdealSize
  getInputSize()I = InputSize
  isSupervised()Z = IsSupervised
org/encog/engine/data/EngineIndexableSet = Org.Encog.Engine.Data.IEngineIndexableSet
  getRecordCount()J = RecordCount
  getRecord(JLorg/encog/engine/data/EngineData;)V = GetRecord(long, Org.Encog.Engine.Data.IEngineData)
  openAdditional()Lorg/encog/engine/data/EngineIndexableSet; = OpenAdditional()
org/encog/engine/EncogEngine = Org.Encog.Engine.EncogEngine
  <init>()V = .ctor()
  DEFAULT_ZERO_TOLERANCE = DefaultZeroTolerance
  getCL()Lorg/encog/engine/opencl/EncogCL; = CL
  getInstance()Lorg/encog/engine/EncogEngine; = Instance
  initCL()V = InitCL()
  shutdown()V = Shutdown()
org/encog/engine/EncogEngineError = Org.Encog.Engine.EncogEngineError
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/encog/engine/EngineMachineLearning = Org.Encog.Engine.IEngineMachineLearning
  getInputCount()I = InputCount
  getOutputCount()I = OutputCount
  compute([D[D)V = Compute(double[], double[])
org/encog/engine/EngineNeuralNetwork = Org.Encog.Engine.IEngineNeuralNetwork
  getEncodeLength()I = EncodeLength
  decodeNetwork([D)V = DecodeNetwork(double[])
  encodeNetwork()[D = EncodeNetwork()
org/encog/engine/network/activation/ActivationBiPolar = Org.Encog.Engine.Network.Activation.ActivationBiPolar
  <init>()V = .ctor()
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationCompetitive = Org.Encog.Engine.Network.Activation.ActivationCompetitive
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  PARAM_COMPETITIVE_MAX_WINNERS = ParamCompetitiveMaxWinners
  hasDerivative()Z = HasDerivative
  getMaxWinners()I = MaxWinners
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationFunction = Org.Encog.Engine.Network.Activation.IActivationFunction
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationGaussian = Org.Encog.Engine.Network.Activation.ActivationGaussian
  <init>(DDD)V = .ctor(double, double, double)
  PARAM_GAUSSIAN_CENTER = ParamGaussianCenter
  PARAM_GAUSSIAN_PEAK = ParamGaussianPeak
  PARAM_GAUSSIAN_WIDTH = ParamGaussianWidth
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationLinear = Org.Encog.Engine.Network.Activation.ActivationLinear
  <init>()V = .ctor()
  PARAM_LINEAR_SLOPE = ParamLinearSlope
  hasDerivative()Z = HasDerivative
  getSlope()D = Slope
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationLOG = Org.Encog.Engine.Network.Activation.ActivationLOG
  <init>()V = .ctor()
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationRamp = Org.Encog.Engine.Network.Activation.ActivationRamp
  <init>()V = .ctor()
  <init>(DDDD)V = .ctor(double, double, double, double)
  PARAM_RAMP_HIGH = ParamRampHigh
  PARAM_RAMP_HIGH_THRESHOLD = ParamRampHighThreshold
  PARAM_RAMP_LOW = ParamRampLow
  PARAM_RAMP_LOW_THRESHOLD = ParamRampLowThreshold
  hasDerivative()Z = HasDerivative
  getHigh()D = High
  setHigh(D)V = High
  getLow()D = Low
  setLow(D)V = Low
  getThresholdHigh()D = ThresholdHigh
  setThresholdHigh(D)V = ThresholdHigh
  getThresholdLow()D = ThresholdLow
  setThresholdLow(D)V = ThresholdLow
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationSigmoid = Org.Encog.Engine.Network.Activation.ActivationSigmoid
  <init>()V = .ctor()
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationSIN = Org.Encog.Engine.Network.Activation.ActivationSIN
  <init>()V = .ctor()
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationSoftMax = Org.Encog.Engine.Network.Activation.ActivationSoftMax
  <init>()V = .ctor()
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationStep = Org.Encog.Engine.Network.Activation.ActivationStep
  <init>()V = .ctor()
  <init>(DDD)V = .ctor(double, double, double)
  PARAM_STEP_CENTER = ParamStepCenter
  PARAM_STEP_HIGH = ParamStepHigh
  PARAM_STEP_LOW = ParamStepLow
  getCenter()D = Center
  setCenter(D)V = Center
  hasDerivative()Z = HasDerivative
  getHigh()D = High
  setHigh(D)V = High
  getLow()D = Low
  setLow(D)V = Low
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/activation/ActivationTANH = Org.Encog.Engine.Network.Activation.ActivationTANH
  <init>()V = .ctor()
  hasDerivative()Z = HasDerivative
  activationFunction([DII)V = ActivationFunction(double[], int, int)
  clone()Lorg/encog/engine/network/activation/ActivationFunction; = Clone()
  derivativeFunction(D)D = DerivativeFunction(double)
  getOpenCLExpression(Z)Ljava/lang/String; = GetOpenCLExpression(bool)
  getParamNames()[Ljava/lang/String; = GetParamNames()
  getParams()[D = GetParams()
  setParam(ID)V = SetParam(int, double)
org/encog/engine/network/flat/FlatLayer = Org.Encog.Engine.Network.Flat.FlatLayer
  <init>(Lorg/encog/engine/network/activation/ActivationFunction;ID[D)V = .ctor(Org.Encog.Engine.Network.Activation.IActivationFunction, int, double, double[])
  getActivation()Lorg/encog/engine/network/activation/ActivationFunction; = Activation
  getBiasActivation()D = BiasActivation
  getContectCount()I = ContectCount
  getContextFedBy()Lorg/encog/engine/network/flat/FlatLayer; = ContextFedBy
  setContextFedBy(Lorg/encog/engine/network/flat/FlatLayer;)V = ContextFedBy
  getCount()I = Count
  isBias()Z = IsBias
  getTotalCount()I = TotalCount
org/encog/engine/network/flat/FlatNetwork = Org.Encog.Engine.Network.Flat.FlatNetwork
  <init>()V = .ctor()
  <init>([Lorg/encog/engine/network/flat/FlatLayer;)V = .ctor(Org.Encog.Engine.Network.Flat.FlatLayer[])
  <init>(IIIIZ)V = .ctor(int, int, int, int, bool)
  DEFAULT_BIAS_ACTIVATION = DefaultBiasActivation
  NO_BIAS_ACTIVATION = NoBiasActivation
  getBeginTraining()I = BeginTraining
  setBeginTraining(I)V = BeginTraining
  getConnectionLimit()D = ConnectionLimit
  setConnectionLimit(D)V = ConnectionLimit
  getEncodeLength()I = EncodeLength
  getEndTraining()I = EndTraining
  setEndTraining(I)V = EndTraining
  getInputCount()I = InputCount
  isLimited()Z = IsLimited
  getNeuronCount()I = NeuronCount
  getOutputCount()I = OutputCount
  calculateError(Lorg/encog/engine/data/EngineIndexableSet;)D = CalculateError(Org.Encog.Engine.Data.IEngineIndexableSet)
  clearConnectionLimit()V = ClearConnectionLimit()
  clearContext()V = ClearContext()
  clone()Lorg/encog/engine/network/flat/FlatNetwork; = Clone()
  cloneFlatNetwork(Lorg/encog/engine/network/flat/FlatNetwork;)V = CloneFlatNetwork(Org.Encog.Engine.Network.Flat.FlatNetwork)
  compute([D[D)V = Compute(double[], double[])
  computeLayer(I)V = ComputeLayer(int)
  decodeNetwork([D)V = DecodeNetwork(double[])
  encodeNetwork()[D = EncodeNetwork()
  getActivationFunctions()[Lorg/encog/engine/network/activation/ActivationFunction; = GetActivationFunctions()
  getContextTargetOffset()[I = GetContextTargetOffset()
  getContextTargetSize()[I = GetContextTargetSize()
  getLayerCounts()[I = GetLayerCounts()
  getLayerFeedCounts()[I = GetLayerFeedCounts()
  getLayerIndex()[I = GetLayerIndex()
  getLayerOutput()[D = GetLayerOutput()
  getWeightIndex()[I = GetWeightIndex()
  getWeights()[D = GetWeights()
  hasSameActivationFunction()Ljava/lang/Class; = HasSameActivationFunction()
  init([Lorg/encog/engine/network/flat/FlatLayer;)V = Init(Org.Encog.Engine.Network.Flat.FlatLayer[])
  randomize()V = Randomize()
  randomize(DD)V = Randomize(double, double)
org/encog/engine/network/flat/FlatNetworkRBF = Org.Encog.Engine.Network.Flat.FlatNetworkRBF
  <init>()V = .ctor()
  <init>(III[[D[D)V = .ctor(int, int, int, double[][], double[])
org/encog/engine/network/flat/ValidateForOpenCL = Org.Encog.Engine.Network.Flat.ValidateForOpenCL
  <init>()V = .ctor()
  isValid(Lorg/encog/engine/EngineMachineLearning;)Ljava/lang/String; = IsValid(Org.Encog.Engine.IEngineMachineLearning)
org/encog/engine/network/rbf/RadialBasisFunction = Org.Encog.Engine.Network.Rbf.IRadialBasisFunction
  getDimensions()I = Dimensions
  getPeak()D = Peak
  setPeak(D)V = Peak
  getWidth()D = Width
  setWidth(D)V = Width
  calculate([D)D = Calculate(double[])
  getCenter(I)D = GetCenter(int)
  getCenters()[D = GetCenters()
  setCenters([D)V = SetCenters(double[])
org/encog/engine/network/train/gradient/FlatGradientWorker = Org.Encog.Engine.Network.Train.Gradient.IFlatGradientWorker
  getElapsedTime()J = ElapsedTime
  getNetwork()Lorg/encog/engine/network/flat/FlatNetwork; = Network
  getWeights()[D = GetWeights()
org/encog/engine/network/train/gradient/GradientWorkerCPU = Org.Encog.Engine.Network.Train.Gradient.GradientWorkerCPU
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/network/train/prop/TrainFlatNetworkProp;Lorg/encog/engine/data/EngineIndexableSet;II)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Network.Train.Prop.TrainFlatNetworkProp, Org.Encog.Engine.Data.IEngineIndexableSet, int, int)
  getElapsedTime()J = ElapsedTime
  getNetwork()Lorg/encog/engine/network/flat/FlatNetwork; = Network
  getWeights()[D = GetWeights()
  run()V = Run()
org/encog/engine/network/train/prop/OpenCLTrainingProfile = Org.Encog.Engine.Network.Train.Prop.OpenCLTrainingProfile
  <init>(Lorg/encog/engine/opencl/EncogCLDevice;)V = .ctor(Org.Encog.Engine.Opencl.EncogCLDevice)
  <init>(Lorg/encog/engine/opencl/EncogCLDevice;DID)V = .ctor(Org.Encog.Engine.Opencl.EncogCLDevice, double, int, double)
  getDevice()Lorg/encog/engine/opencl/EncogCLDevice; = Device
  setDevice(Lorg/encog/engine/opencl/EncogCLDevice;)V = Device
  getGlobalRatio()I = GlobalRatio
  getKernelGlobalWorkgroup()I = KernelGlobalWorkgroup
  getKernelLocalWorkgroup()I = KernelLocalWorkgroup
  getKernelNumberOfCalls()I = KernelNumberOfCalls
  getKernelRemainder()I = KernelRemainder
  getKernelRemainderGlobal()I = KernelRemainderGlobal
  getKernelRemainderPer()I = KernelRemainderPer
  getKernelWorkPerCall()I = KernelWorkPerCall
  getLocalRatio()D = LocalRatio
  getSegmentationRatio()D = SegmentationRatio
  calculateKernelParams(Lorg/encog/engine/opencl/kernels/EncogKernel;Lorg/encog/engine/data/EngineIndexableSet;)V = CalculateKernelParams(Org.Encog.Engine.Opencl.Kernels.EncogKernel, Org.Encog.Engine.Data.IEngineIndexableSet)
org/encog/engine/network/train/prop/RPROPConst = Org.Encog.Engine.Network.Train.Prop.RPROPConst
  DEFAULT_INITIAL_UPDATE = DefaultInitialUpdate
  DEFAULT_MAX_STEP = DefaultMaxStep
  DEFAULT_ZERO_TOLERANCE = DefaultZeroTolerance
  DELTA_MIN = DeltaMin
  NEGATIVE_ETA = NegativeEta
  POSITIVE_ETA = PositiveEta
org/encog/engine/network/train/prop/TrainFlatNetworkBackPropagation = Org.Encog.Engine.Network.Train.Prop.TrainFlatNetworkBackPropagation
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineDataSet;DD)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineDataSet, double, double)
  getLearningRate()D = LearningRate
  setLearningRate(D)V = LearningRate
  getMomentum()D = Momentum
  setMomentum(D)V = Momentum
  getLastDelta()[D = GetLastDelta()
  setLastDelta([D)V = SetLastDelta(double[])
  updateWeight([D[DI)D = UpdateWeight(double[], double[], int)
org/encog/engine/network/train/prop/TrainFlatNetworkManhattan = Org.Encog.Engine.Network.Train.Prop.TrainFlatNetworkManhattan
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineDataSet;D)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineDataSet, double)
  updateWeight([D[DI)D = UpdateWeight(double[], double[], int)
org/encog/engine/network/train/prop/TrainFlatNetworkOpenCL = Org.Encog.Engine.Network.Train.Prop.TrainFlatNetworkOpenCL
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineDataSet;Lorg/encog/engine/network/train/prop/OpenCLTrainingProfile;)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineDataSet, Org.Encog.Engine.Network.Train.Prop.OpenCLTrainingProfile)
  LEARN_BPROP = LearnBprop
  LEARN_MANHATTAN = LearnManhattan
  LEARN_RPROP = LearnRprop
  getError()D = Error
  getIteration()I = Iteration
  setIteration(I)V = Iteration
  getLearningRate()D = LearningRate
  getLearningType()I = LearningType
  getMaxStep()D = MaxStep
  getMomentum()D = Momentum
  getNetwork()Lorg/encog/engine/network/flat/FlatNetwork; = Network
  getNumThreads()I = NumThreads
  setNumThreads(I)V = NumThreads
  getTraining()Lorg/encog/engine/data/EngineDataSet; = Training
  finishTraining()V = FinishTraining()
  getLastGradient()[D = GetLastGradient()
  getUpdateValues()[D = GetUpdateValues()
  iteration()V = Iteration()
  iteration(I)V = Iteration(int)
  learnBPROP(DD)V = LearnBPROP(double, double)
  learnManhattan(D)V = LearnManhattan(double)
  learnRPROP()V = LearnRPROP()
  learnRPROP(DD)V = LearnRPROP(double, double)
org/encog/engine/network/train/prop/TrainFlatNetworkProp = Org.Encog.Engine.Network.Train.Prop.TrainFlatNetworkProp
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineDataSet;)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineDataSet)
  currentError = CurrentError
  gradients = Gradients
  indexable = Indexable
  iteration = Iteration
  lastGradient = LastGradient
  network = Network
  numThreads = NumThreads
  reportedException = ReportedException
  totalError = TotalError
  training = Training
  workers = Workers
  getError()D = Error
  getIteration()I = Iteration
  setIteration(I)V = Iteration
  getNetwork()Lorg/encog/engine/network/flat/FlatNetwork; = Network
  getNumThreads()I = NumThreads
  setNumThreads(I)V = NumThreads
  getTraining()Lorg/encog/engine/data/EngineDataSet; = Training
  calculateGradients()V = CalculateGradients()
  finishTraining()V = FinishTraining()
  getLastGradient()[D = GetLastGradient()
  iteration()V = Iteration()
  iteration(I)V = Iteration(int)
  learn()V = Learn()
  learnLimited()V = LearnLimited()
  report([DDLjava/lang/Throwable;)V = Report(double[], double, Java.Lang.Throwable)
  updateWeight([D[DI)D = UpdateWeight(double[], double[], int)
org/encog/engine/network/train/prop/TrainFlatNetworkResilient = Org.Encog.Engine.Network.Train.Prop.TrainFlatNetworkResilient
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineDataSet;)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineDataSet)
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineDataSet;DDD)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineDataSet, double, double, double)
  getUpdateValues()[D = GetUpdateValues()
  updateWeight([D[DI)D = UpdateWeight(double[], double[], int)
org/encog/engine/network/train/prop/TrainFlatNetworkSCG = Org.Encog.Engine.Network.Train.Prop.TrainFlatNetworkSCG
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineDataSet;)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineDataSet)
  FIRST_LAMBDA = FirstLambda
  FIRST_SIGMA = FirstSigma
  updateWeight([D[DI)D = UpdateWeight(double[], double[], int)
org/encog/engine/network/train/TrainFlatNetwork = Org.Encog.Engine.Network.Train.ITrainFlatNetwork
  getError()D = Error
  getIteration()I = Iteration
  setIteration(I)V = Iteration
  getNetwork()Lorg/encog/engine/network/flat/FlatNetwork; = Network
  getNumThreads()I = NumThreads
  setNumThreads(I)V = NumThreads
  getTraining()Lorg/encog/engine/data/EngineDataSet; = Training
  finishTraining()V = FinishTraining()
  iteration()V = Iteration()
  iteration(I)V = Iteration(int)
org/encog/engine/opencl/EncogCL = Org.Encog.Engine.Opencl.EncogCL
  <init>()V = .ctor()
  getDevices()Ljava/util/List; = Devices
  getEnabledDevices()Ljava/util/List; = EnabledDevices
  getPlatforms()Ljava/util/List; = Platforms
  areCPUsPresent()Z = AreCPUsPresent()
  chooseDevice()Lorg/encog/engine/opencl/EncogCLDevice; = ChooseDevice()
  chooseDevice(Z)Lorg/encog/engine/opencl/EncogCLDevice; = ChooseDevice(bool)
  disableAllCPUs()V = DisableAllCPUs()
  enableAllCPUs()V = EnableAllCPUs()
org/encog/engine/opencl/EncogCLDevice = Org.Encog.Engine.Opencl.EncogCLDevice
  <init>(Lorg/encog/engine/opencl/EncogCLPlatform;Lorg/jocl/cl_device_id;)V = .ctor(Org.Encog.Engine.Opencl.EncogCLPlatform, Org.Jocl.Cl_device_id)
  getDevice()Lorg/jocl/cl_device_id; = Device
  getGlobalMemorySize()J = GlobalMemorySize
  isCPU()Z = IsCPU
  getLocalMemorySize()J = LocalMemorySize
  getMaxClockFrequency()J = MaxClockFrequency
  getMaxComputeUnits()J = MaxComputeUnits
  getMaxWorkGroupSize()J = MaxWorkGroupSize
  getPlatform()Lorg/encog/engine/opencl/EncogCLPlatform; = Platform
  getQueue()Lorg/encog/engine/opencl/EncogCLQueue; = Queue
  getDeviceLong(I)J = GetDeviceLong(int)
  getDeviceString(I)Ljava/lang/String; = GetDeviceString(int)
org/encog/engine/opencl/EncogCLError = Org.Encog.Engine.Opencl.EncogCLError
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/encog/engine/opencl/EncogCLItem = Org.Encog.Engine.Opencl.EncogCLItem
  <init>()V = .ctor()
  isEnabled()Z = Enabled
  setEnabled(Z)V = Enabled
  getName()Ljava/lang/String; = Name
  setName(Ljava/lang/String;)V = Name
  getVender()Ljava/lang/String; = Vender
  setVender(Ljava/lang/String;)V = Vender
org/encog/engine/opencl/EncogCLPlatform = Org.Encog.Engine.Opencl.EncogCLPlatform
  <init>(Lorg/jocl/cl_platform_id;)V = .ctor(Org.Jocl.Cl_platform_id)
  getContext()Lorg/jocl/cl_context; = Context
  getDevices()Ljava/util/List; = Devices
  getPlatform()Lorg/jocl/cl_platform_id; = Platform
  getPlatformString(I)Ljava/lang/String; = GetPlatformString(int)
org/encog/engine/opencl/EncogCLQueue = Org.Encog.Engine.Opencl.EncogCLQueue
  <init>(Lorg/encog/engine/opencl/EncogCLDevice;)V = .ctor(Org.Encog.Engine.Opencl.EncogCLDevice)
  getCommands()Lorg/jocl/cl_command_queue; = Commands
  getDevice()Lorg/encog/engine/opencl/EncogCLDevice; = Device
  array2Buffer([FLorg/jocl/cl_mem;)V = Array2Buffer(float[], Org.Jocl.Cl_mem)
  array2Buffer([ILorg/jocl/cl_mem;)V = Array2Buffer(int[], Org.Jocl.Cl_mem)
  buffer2Array(Lorg/jocl/cl_mem;[F)V = Buffer2Array(Org.Jocl.Cl_mem, float[])
  buffer2Array(Lorg/jocl/cl_mem;[I)V = Buffer2Array(Org.Jocl.Cl_mem, int[])
  execute(Lorg/encog/engine/opencl/kernels/EncogKernel;)V = Execute(Org.Encog.Engine.Opencl.Kernels.EncogKernel)
  waitFinish()V = WaitFinish()
org/encog/engine/opencl/exceptions/MissingOpenCLAdapterError = Org.Encog.Engine.Opencl.Exceptions.MissingOpenCLAdapterError
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/encog/engine/opencl/exceptions/OpenCLError = Org.Encog.Engine.Opencl.Exceptions.OpenCLError
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/encog/engine/opencl/exceptions/OutOfOpenCLResources = Org.Encog.Engine.Opencl.Exceptions.OutOfOpenCLResources
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/encog/engine/opencl/kernels/EncogKernel = Org.Encog.Engine.Opencl.Kernels.EncogKernel
  <init>(Lorg/encog/engine/opencl/EncogCLDevice;Ljava/lang/String;Ljava/lang/String;)V = .ctor(Org.Encog.Engine.Opencl.EncogCLDevice, string, string)
  getCLSource()Ljava/lang/String; = CLSource
  setCLSource(Ljava/lang/String;)V = CLSource
  getContext()Lorg/jocl/cl_context; = Context
  getDevice()Lorg/encog/engine/opencl/EncogCLDevice; = Device
  getGlobalWork()I = GlobalWork
  setGlobalWork(I)V = GlobalWork
  getKernel()Lorg/jocl/cl_kernel; = Kernel
  getLocalWork()I = LocalWork
  setLocalWork(I)V = LocalWork
  getMaxWorkGroupSize()I = MaxWorkGroupSize
  getProgram()Lorg/jocl/cl_program; = Program
  getSourceName()Ljava/lang/String; = SourceName
  compile()V = Compile()
  compile(Ljava/util/Map;)V = Compile(System.Collections.Generic.IDictionary<string, string>)
  createArrayReadOnly([F)Lorg/jocl/cl_mem; = CreateArrayReadOnly(float[])
  createArrayReadOnly([I)Lorg/jocl/cl_mem; = CreateArrayReadOnly(int[])
  createFloatArrayWriteOnly(I)Lorg/jocl/cl_mem; = CreateFloatArrayWriteOnly(int)
  getWorkGroupLong(I)J = GetWorkGroupLong(int)
  prepareKernel()V = PrepareKernel()
  release()V = Release()
  releaseBuffer(Lorg/jocl/cl_mem;)V = ReleaseBuffer(Org.Jocl.Cl_mem)
  setArg(ILorg/jocl/cl_mem;)V = SetArg(int, Org.Jocl.Cl_mem)
org/encog/engine/opencl/kernels/KernelNetworkTrain = Org.Encog.Engine.Opencl.Kernels.KernelNetworkTrain
  <init>(Lorg/encog/engine/opencl/EncogCLDevice;Lorg/encog/engine/network/flat/FlatNetwork;Lorg/encog/engine/data/EngineIndexableSet;I)V = .ctor(Org.Encog.Engine.Opencl.EncogCLDevice, Org.Encog.Engine.Network.Flat.FlatNetwork, Org.Encog.Engine.Data.IEngineIndexableSet, int)
  PARRAY_INPUT_COUNT = ParrayInputCount
  PARRAY_ITEMS_PER = ParrayItemsPer
  PARRAY_ITERATIONS = ParrayIterations
  PARRAY_LAYER_COUNT = ParrayLayerCount
  PARRAY_LEARN = ParrayLearn
  PARRAY_OUTPUT_COUNT = ParrayOutputCount
  PARRAY_START = ParrayStart
  assignWorkgroupSizes(II)V = AssignWorkgroupSizes(int, int)
  calculate(IIZI)V = Calculate(int, int, bool, int)
  compile(Ljava/util/Map;Lorg/encog/engine/network/train/prop/OpenCLTrainingProfile;Lorg/encog/engine/network/flat/FlatNetwork;)V = Compile(System.Collections.Generic.IDictionary<string, string>, Org.Encog.Engine.Network.Train.Prop.OpenCLTrainingProfile, Org.Encog.Engine.Network.Flat.FlatNetwork)
  getErrors()[F = GetErrors()
  getTempDataArray()[F = GetTempDataArray()
  getWeightOutArray()[F = GetWeightOutArray()
  init(Lorg/encog/engine/network/train/prop/OpenCLTrainingProfile;)V = Init(Org.Encog.Engine.Network.Train.Prop.OpenCLTrainingProfile)
  setTempDataArray([F)V = SetTempDataArray(float[])
org/encog/engine/opencl/kernels/KernelVectorAdd = Org.Encog.Engine.Opencl.Kernels.KernelVectorAdd
  <init>(Lorg/encog/engine/opencl/EncogCLDevice;I)V = .ctor(Org.Encog.Engine.Opencl.EncogCLDevice, int)
  add(Lorg/encog/engine/opencl/EncogCLDevice;[D[D)[D = Add(Org.Encog.Engine.Opencl.EncogCLDevice, double[], double[])
org/encog/engine/StatusReportable = Org.Encog.Engine.IStatusReportable
  report(IILjava/lang/String;)V = Report(int, int, string)
org/encog/engine/util/BoundMath = Org.Encog.Engine.Util.BoundMath
  cos(D)D = Cos(double)
  exp(D)D = Exp(double)
  log(D)D = Log(double)
  pow(DD)D = Pow(double, double)
  sin(D)D = Sin(double)
  sqrt(D)D = Sqrt(double)
org/encog/engine/util/BoundNumbers = Org.Encog.Engine.Util.BoundNumbers
  TOO_BIG = TooBig
  TOO_SMALL = TooSmall
  bound(D)D = Bound(double)
org/encog/engine/util/EngineArray = Org.Encog.Engine.Util.EngineArray
  arrayCopy([D)[D = ArrayCopy(double[])
  arrayCopy([D[D)V = ArrayCopy(double[], double[])
  arrayCopy([D[F)V = ArrayCopy(double[], float[])
  arrayCopy([DI[DII)V = ArrayCopy(double[], int, double[], int, int)
  arrayCopy([[D)[[D = ArrayCopy(double[][])
  arrayCopy([F[D)V = ArrayCopy(float[], double[])
  arrayCopy([I)[I = ArrayCopy(int[])
  arrayCopy([I[I)V = ArrayCopy(int[], int[])
  doubleToObject([D)[Ljava/lang/Double; = DoubleToObject(double[])
  fill([DD)V = Fill(double[], double)
  fill([FF)V = Fill(float[], float)
  findStringInArray([Ljava/lang/String;Ljava/lang/String;)I = FindStringInArray(string[], string)
  listToDouble(Ljava/util/Collection;)[D = ListToDouble(System.Collections.Generic.ICollection<object>)
  objectToDouble([Ljava/lang/Double;)[D = ObjectToDouble(Java.Lang.Double[])
  vectorProduct([D[D)D = VectorProduct(double[], double[])
org/encog/engine/util/ErrorCalculation = Org.Encog.Engine.Util.ErrorCalculation
  <init>()V = .ctor()
  getMode()Lorg/encog/engine/util/ErrorCalculationMode; = Mode
  setMode(Lorg/encog/engine/util/ErrorCalculationMode;)V = Mode
  calculate()D = Calculate()
  calculateARCTAN()D = CalculateARCTAN()
  calculateMSE()D = CalculateMSE()
  calculateRMS()D = CalculateRMS()
  reset()V = Reset()
  updateError(DD)V = UpdateError(double, double)
  updateError([D[D)V = UpdateError(double[], double[])
org/encog/engine/util/ErrorCalculationMode = Org.Encog.Engine.Util.ErrorCalculationMode
  ARCTAN = Arctan
  MSE = Mse
  RMS = Rms
  valueOf(Ljava/lang/String;)Lorg/encog/engine/util/ErrorCalculationMode; = ValueOf(string)
  values()[Lorg/encog/engine/util/ErrorCalculationMode; = Values()
org/encog/engine/util/Format = Org.Encog.Engine.Util.Format
  MEMORY_GIG = MemoryGig
  MEMORY_K = MemoryK
  MEMORY_MEG = MemoryMeg
  MEMORY_TERA = MemoryTera
  SECONDS_INA_DAY = SecondsInaDay
  SECONDS_INA_HOUR = SecondsInaHour
  SECONDS_INA_MINUTE = SecondsInaMinute
  formatDouble(DI)Ljava/lang/String; = FormatDouble(double, int)
  formatInteger(I)Ljava/lang/String; = FormatInteger(int)
  formatMemory(J)Ljava/lang/String; = FormatMemory(long)
  formatPercent(D)Ljava/lang/String; = FormatPercent(double)
  formatPercentWhole(D)Ljava/lang/String; = FormatPercentWhole(double)
  formatTimeSpan(I)Ljava/lang/String; = FormatTimeSpan(int)
org/encog/engine/util/IntRange = Org.Encog.Engine.Util.IntRange
  <init>(II)V = .ctor(int, int)
  getHigh()I = High
  setHigh(I)V = High
  getLow()I = Low
  setLow(I)V = Low
org/encog/engine/util/ObjectPair = Org.Encog.Engine.Util.ObjectPair
  <init>(Ljava/lang/Object;Ljava/lang/Object;)V = .ctor(Java.Lang.Object, Java.Lang.Object)
  getA()Ljava/lang/Object; = GetA()
  getB()Ljava/lang/Object; = GetB()
org/encog/engine/util/ResourceLoader = Org.Encog.Engine.Util.ResourceLoader
  createInputStream(Ljava/lang/String;)Ljava/io/InputStream; = CreateInputStream(string)
  loadString(Ljava/lang/String;)Ljava/lang/String; = LoadString(string)
org/encog/engine/util/Stopwatch = Org.Encog.Engine.Util.Stopwatch
  <init>()V = .ctor()
  getElapsedMilliseconds()J = ElapsedMilliseconds
  getElapsedTicks()J = ElapsedTicks
  reset()V = Reset()
  start()V = Start()
  stop()V = Stop()
org/encog/engine/validate/BasicMachineLearningValidate = Org.Encog.Engine.Validate.BasicMachineLearningValidate
  <init>()V = .ctor()
  validate(Lorg/encog/engine/EngineMachineLearning;)V = Validate(Org.Encog.Engine.IEngineMachineLearning)
org/encog/engine/validate/ValidateMachineLearning = Org.Encog.Engine.Validate.IValidateMachineLearning
  isValid(Lorg/encog/engine/EngineMachineLearning;)Ljava/lang/String; = IsValid(Org.Encog.Engine.IEngineMachineLearning)
  validate(Lorg/encog/engine/EngineMachineLearning;)V = Validate(Org.Encog.Engine.IEngineMachineLearning)
org/encog/engine/validate/ValidateMachineLearningError = Org.Encog.Engine.Validate.ValidateMachineLearningError
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/jocl/BuildProgramFunction = Org.Jocl.IBuildProgramFunction
  function(Lorg/jocl/cl_program;Ljava/lang/Object;)V = Function(Org.Jocl.Cl_program, Java.Lang.Object)
org/jocl/CL = Org.Jocl.CL
  CL_A = ClA
  CL_ADDRESS_CLAMP = ClAddressClamp
  CL_ADDRESS_CLAMP_TO_EDGE = ClAddressClampToEdge
  CL_ADDRESS_NONE = ClAddressNone
  CL_ADDRESS_REPEAT = ClAddressRepeat
  CL_ARGB = ClArgb
  CL_BGRA = ClBgra
  CL_BUILD_ERROR = ClBuildError
  CL_BUILD_IN_PROGRESS = ClBuildInProgress
  CL_BUILD_NONE = ClBuildNone
  CL_BUILD_PROGRAM_FAILURE = ClBuildProgramFailure
  CL_BUILD_SUCCESS = ClBuildSuccess
  CL_CGL_SHAREGROUP_KHR = ClCglSharegroupKhr
  CL_CHAR_BIT = ClCharBit
  CL_CHAR_MAX = ClCharMax
  CL_CHAR_MIN = ClCharMin
  CL_COMMAND_ACQUIRE_GL_OBJECTS = ClCommandAcquireGlObjects
  CL_COMMAND_COPY_BUFFER = ClCommandCopyBuffer
  CL_COMMAND_COPY_BUFFER_TO_IMAGE = ClCommandCopyBufferToImage
  CL_COMMAND_COPY_IMAGE = ClCommandCopyImage
  CL_COMMAND_COPY_IMAGE_TO_BUFFER = ClCommandCopyImageToBuffer
  CL_COMMAND_MAP_BUFFER = ClCommandMapBuffer
  CL_COMMAND_MAP_IMAGE = ClCommandMapImage
  CL_COMMAND_MARKER = ClCommandMarker
  CL_COMMAND_NATIVE_KERNEL = ClCommandNativeKernel
  CL_COMMAND_NDRANGE_KERNEL = ClCommandNdrangeKernel
  CL_COMMAND_READ_BUFFER = ClCommandReadBuffer
  CL_COMMAND_READ_IMAGE = ClCommandReadImage
  CL_COMMAND_RELEASE_GL_OBJECTS = ClCommandReleaseGlObjects
  CL_COMMAND_TASK = ClCommandTask
  CL_COMMAND_UNMAP_MEM_OBJECT = ClCommandUnmapMemObject
  CL_COMMAND_WRITE_BUFFER = ClCommandWriteBuffer
  CL_COMMAND_WRITE_IMAGE = ClCommandWriteImage
  CL_COMPILER_NOT_AVAILABLE = ClCompilerNotAvailable
  CL_COMPLETE = ClComplete
  CL_CONTEXT_DEVICES = ClContextDevices
  CL_CONTEXT_PLATFORM = ClContextPlatform
  CL_CONTEXT_PROPERTIES = ClContextProperties
  CL_CONTEXT_REFERENCE_COUNT = ClContextReferenceCount
  CL_CURRENT_DEVICE_FOR_GL_CONTEXT_KHR = ClCurrentDeviceForGlContextKhr
  CL_DBL_DIG = ClDblDig
  CL_DBL_EPSILON = ClDblEpsilon
  CL_DBL_MANT_DIG = ClDblMantDig
  CL_DBL_MAX = ClDblMax
  CL_DBL_MAX_10_EXP = ClDblMax10Exp
  CL_DBL_MAX_EXP = ClDblMaxExp
  CL_DBL_MIN = ClDblMin
  CL_DBL_MIN_10_EXP = ClDblMin10Exp
  CL_DBL_MIN_EXP = ClDblMinExp
  CL_DBL_RADIX = ClDblRadix
  CL_DEVICE_ADDRESS_32_BITS = ClDeviceAddress32Bits
  CL_DEVICE_ADDRESS_64_BITS = ClDeviceAddress64Bits
  CL_DEVICE_ADDRESS_BITS = ClDeviceAddressBits
  CL_DEVICE_AVAILABLE = ClDeviceAvailable
  CL_DEVICE_COMPILER_AVAILABLE = ClDeviceCompilerAvailable
  CL_DEVICE_ENDIAN_LITTLE = ClDeviceEndianLittle
  CL_DEVICE_ERROR_CORRECTION_SUPPORT = ClDeviceErrorCorrectionSupport
  CL_DEVICE_EXECUTION_CAPABILITIES = ClDeviceExecutionCapabilities
  CL_DEVICE_EXTENSIONS = ClDeviceExtensions
  CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE = ClDeviceGlobalMemCachelineSize
  CL_DEVICE_GLOBAL_MEM_CACHE_SIZE = ClDeviceGlobalMemCacheSize
  CL_DEVICE_GLOBAL_MEM_CACHE_TYPE = ClDeviceGlobalMemCacheType
  CL_DEVICE_GLOBAL_MEM_SIZE = ClDeviceGlobalMemSize
  CL_DEVICE_IMAGE2D_MAX_HEIGHT = ClDeviceImage2dMaxHeight
  CL_DEVICE_IMAGE2D_MAX_WIDTH = ClDeviceImage2dMaxWidth
  CL_DEVICE_IMAGE3D_MAX_DEPTH = ClDeviceImage3dMaxDepth
  CL_DEVICE_IMAGE3D_MAX_HEIGHT = ClDeviceImage3dMaxHeight
  CL_DEVICE_IMAGE3D_MAX_WIDTH = ClDeviceImage3dMaxWidth
  CL_DEVICE_IMAGE_SUPPORT = ClDeviceImageSupport
  CL_DEVICE_LOCAL_MEM_SIZE = ClDeviceLocalMemSize
  CL_DEVICE_LOCAL_MEM_TYPE = ClDeviceLocalMemType
  CL_DEVICE_MAX_CLOCK_FREQUENCY = ClDeviceMaxClockFrequency
  CL_DEVICE_MAX_COMPUTE_UNITS = ClDeviceMaxComputeUnits
  CL_DEVICE_MAX_CONSTANT_ARGS = ClDeviceMaxConstantArgs
  CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE = ClDeviceMaxConstantBufferSize
  CL_DEVICE_MAX_MEM_ALLOC_SIZE = ClDeviceMaxMemAllocSize
  CL_DEVICE_MAX_PARAMETER_SIZE = ClDeviceMaxParameterSize
  CL_DEVICE_MAX_READ_IMAGE_ARGS = ClDeviceMaxReadImageArgs
  CL_DEVICE_MAX_SAMPLERS = ClDeviceMaxSamplers
  CL_DEVICE_MAX_WORK_GROUP_SIZE = ClDeviceMaxWorkGroupSize
  CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS = ClDeviceMaxWorkItemDimensions
  CL_DEVICE_MAX_WORK_ITEM_SIZES = ClDeviceMaxWorkItemSizes
  CL_DEVICE_MAX_WRITE_IMAGE_ARGS = ClDeviceMaxWriteImageArgs
  CL_DEVICE_MEM_BASE_ADDR_ALIGN = ClDeviceMemBaseAddrAlign
  CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE = ClDeviceMinDataTypeAlignSize
  CL_DEVICE_NAME = ClDeviceName
  CL_DEVICE_NOT_AVAILABLE = ClDeviceNotAvailable
  CL_DEVICE_NOT_FOUND = ClDeviceNotFound
  CL_DEVICE_PLATFORM = ClDevicePlatform
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR = ClDevicePreferredVectorWidthChar
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE = ClDevicePreferredVectorWidthDouble
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT = ClDevicePreferredVectorWidthFloat
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT = ClDevicePreferredVectorWidthInt
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG = ClDevicePreferredVectorWidthLong
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT = ClDevicePreferredVectorWidthShort
  CL_DEVICE_PROFILE = ClDeviceProfile
  CL_DEVICE_PROFILING_TIMER_RESOLUTION = ClDeviceProfilingTimerResolution
  CL_DEVICE_QUEUE_PROPERTIES = ClDeviceQueueProperties
  CL_DEVICES_FOR_GL_CONTEXT_KHR = ClDevicesForGlContextKhr
  CL_DEVICE_SINGLE_FP_CONFIG = ClDeviceSingleFpConfig
  CL_DEVICE_TYPE = ClDeviceType
  CL_DEVICE_TYPE_ACCELERATOR = ClDeviceTypeAccelerator
  CL_DEVICE_TYPE_ALL = ClDeviceTypeAll
  CL_DEVICE_TYPE_CPU = ClDeviceTypeCpu
  CL_DEVICE_TYPE_DEFAULT = ClDeviceTypeDefault
  CL_DEVICE_TYPE_GPU = ClDeviceTypeGpu
  CL_DEVICE_VENDOR = ClDeviceVendor
  CL_DEVICE_VENDOR_ID = ClDeviceVendorId
  CL_DEVICE_VERSION = ClDeviceVersion
  CL_DRIVER_VERSION = ClDriverVersion
  CL_EGL_DISPLAY_KHR = ClEglDisplayKhr
  CL_EVENT_COMMAND_EXECUTION_STATUS = ClEventCommandExecutionStatus
  CL_EVENT_COMMAND_QUEUE = ClEventCommandQueue
  CL_EVENT_COMMAND_TYPE = ClEventCommandType
  CL_EVENT_REFERENCE_COUNT = ClEventReferenceCount
  CL_EXEC_KERNEL = ClExecKernel
  CL_EXEC_NATIVE_KERNEL = ClExecNativeKernel
  CL_FALSE = ClFalse
  CL_FILTER_LINEAR = ClFilterLinear
  CL_FILTER_NEAREST = ClFilterNearest
  CL_FLOAT = ClFloat
  CL_FLT_DIG = ClFltDig
  CL_FLT_EPSILON = ClFltEpsilon
  CL_FLT_MANT_DIG = ClFltMantDig
  CL_FLT_MAX = ClFltMax
  CL_FLT_MAX_10_EXP = ClFltMax10Exp
  CL_FLT_MAX_EXP = ClFltMaxExp
  CL_FLT_MIN = ClFltMin
  CL_FLT_MIN_10_EXP = ClFltMin10Exp
  CL_FLT_MIN_EXP = ClFltMinExp
  CL_FLT_RADIX = ClFltRadix
  CL_FP_DENORM = ClFpDenorm
  CL_FP_FMA = ClFpFma
  CL_FP_INF_NAN = ClFpInfNan
  CL_FP_ROUND_TO_INF = ClFpRoundToInf
  CL_FP_ROUND_TO_NEAREST = ClFpRoundToNearest
  CL_FP_ROUND_TO_ZERO = ClFpRoundToZero
  CL_GL_CONTEXT_KHR = ClGlContextKhr
  CL_GL_MIPMAP_LEVEL = ClGlMipmapLevel
  CL_GLOBAL = ClGlobal
  CL_GL_OBJECT_BUFFER = ClGlObjectBuffer
  CL_GL_OBJECT_RENDERBUFFER = ClGlObjectRenderbuffer
  CL_GL_OBJECT_TEXTURE2D = ClGlObjectTexture2d
  CL_GL_OBJECT_TEXTURE3D = ClGlObjectTexture3d
  CL_GL_TEXTURE_TARGET = ClGlTextureTarget
  CL_GLX_DISPLAY_KHR = ClGlxDisplayKhr
  CL_HALF_FLOAT = ClHalfFloat
  CL_IMAGE_DEPTH = ClImageDepth
  CL_IMAGE_ELEMENT_SIZE = ClImageElementSize
  CL_IMAGE_FORMAT = ClImageFormat
  CL_IMAGE_FORMAT_MISMATCH = ClImageFormatMismatch
  CL_IMAGE_FORMAT_NOT_SUPPORTED = ClImageFormatNotSupported
  CL_IMAGE_HEIGHT = ClImageHeight
  CL_IMAGE_ROW_PITCH = ClImageRowPitch
  CL_IMAGE_SLICE_PITCH = ClImageSlicePitch
  CL_IMAGE_WIDTH = ClImageWidth
  CL_INTENSITY = ClIntensity
  CL_INT_MAX = ClIntMax
  CL_INT_MIN = ClIntMin
  CL_INVALID_ARG_INDEX = ClInvalidArgIndex
  CL_INVALID_ARG_SIZE = ClInvalidArgSize
  CL_INVALID_ARG_VALUE = ClInvalidArgValue
  CL_INVALID_BINARY = ClInvalidBinary
  CL_INVALID_BUFFER_SIZE = ClInvalidBufferSize
  CL_INVALID_BUILD_OPTIONS = ClInvalidBuildOptions
  CL_INVALID_COMMAND_QUEUE = ClInvalidCommandQueue
  CL_INVALID_CONTEXT = ClInvalidContext
  CL_INVALID_DEVICE = ClInvalidDevice
  CL_INVALID_DEVICE_TYPE = ClInvalidDeviceType
  CL_INVALID_EVENT = ClInvalidEvent
  CL_INVALID_EVENT_WAIT_LIST = ClInvalidEventWaitList
  CL_INVALID_GLOBAL_OFFSET = ClInvalidGlobalOffset
  CL_INVALID_GLOBAL_WORK_SIZE = ClInvalidGlobalWorkSize
  CL_INVALID_GL_OBJECT = ClInvalidGlObject
  CL_INVALID_GL_SHAREGROUP_REFERENCE_KHR = ClInvalidGlSharegroupReferenceKhr
  CL_INVALID_HOST_PTR = ClInvalidHostPtr
  CL_INVALID_IMAGE_FORMAT_DESCRIPTOR = ClInvalidImageFormatDescriptor
  CL_INVALID_IMAGE_SIZE = ClInvalidImageSize
  CL_INVALID_KERNEL = ClInvalidKernel
  CL_INVALID_KERNEL_ARGS = ClInvalidKernelArgs
  CL_INVALID_KERNEL_DEFINITION = ClInvalidKernelDefinition
  CL_INVALID_KERNEL_NAME = ClInvalidKernelName
  CL_INVALID_MEM_OBJECT = ClInvalidMemObject
  CL_INVALID_MIP_LEVEL = ClInvalidMipLevel
  CL_INVALID_OPERATION = ClInvalidOperation
  CL_INVALID_PLATFORM = ClInvalidPlatform
  CL_INVALID_PROGRAM = ClInvalidProgram
  CL_INVALID_PROGRAM_EXECUTABLE = ClInvalidProgramExecutable
  CL_INVALID_QUEUE_PROPERTIES = ClInvalidQueueProperties
  CL_INVALID_SAMPLER = ClInvalidSampler
  CL_INVALID_VALUE = ClInvalidValue
  CL_INVALID_WORK_DIMENSION = ClInvalidWorkDimension
  CL_INVALID_WORK_GROUP_SIZE = ClInvalidWorkGroupSize
  CL_INVALID_WORK_ITEM_SIZE = ClInvalidWorkItemSize
  CL_JOCL_INTERNAL_ERROR = ClJoclInternalError
  CL_KERNEL_COMPILE_WORK_GROUP_SIZE = ClKernelCompileWorkGroupSize
  CL_KERNEL_CONTEXT = ClKernelContext
  CL_KERNEL_FUNCTION_NAME = ClKernelFunctionName
  CL_KERNEL_LOCAL_MEM_SIZE = ClKernelLocalMemSize
  CL_KERNEL_NUM_ARGS = ClKernelNumArgs
  CL_KERNEL_PROGRAM = ClKernelProgram
  CL_KERNEL_REFERENCE_COUNT = ClKernelReferenceCount
  CL_KERNEL_WORK_GROUP_SIZE = ClKernelWorkGroupSize
  CL_LOCAL = ClLocal
  CL_LONG_MAX = ClLongMax
  CL_LONG_MIN = ClLongMin
  CL_LUMINANCE = ClLuminance
  CL_MAP_FAILURE = ClMapFailure
  CL_MAP_READ = ClMapRead
  CL_MAP_WRITE = ClMapWrite
  CL_MEM_ALLOC_HOST_PTR = ClMemAllocHostPtr
  CL_MEM_CONTEXT = ClMemContext
  CL_MEM_COPY_HOST_PTR = ClMemCopyHostPtr
  CL_MEM_COPY_OVERLAP = ClMemCopyOverlap
  CL_MEM_FLAGS = ClMemFlags
  CL_MEM_HOST_PTR = ClMemHostPtr
  CL_MEM_MAP_COUNT = ClMemMapCount
  CL_MEM_OBJECT_ALLOCATION_FAILURE = ClMemObjectAllocationFailure
  CL_MEM_OBJECT_BUFFER = ClMemObjectBuffer
  CL_MEM_OBJECT_IMAGE2D = ClMemObjectImage2d
  CL_MEM_OBJECT_IMAGE3D = ClMemObjectImage3d
  CL_MEM_READ_ONLY = ClMemReadOnly
  CL_MEM_READ_WRITE = ClMemReadWrite
  CL_MEM_REFERENCE_COUNT = ClMemReferenceCount
  CL_MEM_SIZE = ClMemSize
  CL_MEM_TYPE = ClMemType
  CL_MEM_USE_HOST_PTR = ClMemUseHostPtr
  CL_MEM_WRITE_ONLY = ClMemWriteOnly
  CL_NONE = ClNone
  CL_OUT_OF_HOST_MEMORY = ClOutOfHostMemory
  CL_OUT_OF_RESOURCES = ClOutOfResources
  CL_PLATFORM_EXTENSIONS = ClPlatformExtensions
  CL_PLATFORM_NAME = ClPlatformName
  CL_PLATFORM_PROFILE = ClPlatformProfile
  CL_PLATFORM_VENDOR = ClPlatformVendor
  CL_PLATFORM_VERSION = ClPlatformVersion
  CL_PROFILING_COMMAND_END = ClProfilingCommandEnd
  CL_PROFILING_COMMAND_QUEUED = ClProfilingCommandQueued
  CL_PROFILING_COMMAND_START = ClProfilingCommandStart
  CL_PROFILING_COMMAND_SUBMIT = ClProfilingCommandSubmit
  CL_PROFILING_INFO_NOT_AVAILABLE = ClProfilingInfoNotAvailable
  CL_PROGRAM_BINARIES = ClProgramBinaries
  CL_PROGRAM_BINARY_SIZES = ClProgramBinarySizes
  CL_PROGRAM_BUILD_LOG = ClProgramBuildLog
  CL_PROGRAM_BUILD_OPTIONS = ClProgramBuildOptions
  CL_PROGRAM_BUILD_STATUS = ClProgramBuildStatus
  CL_PROGRAM_CONTEXT = ClProgramContext
  CL_PROGRAM_DEVICES = ClProgramDevices
  CL_PROGRAM_NUM_DEVICES = ClProgramNumDevices
  CL_PROGRAM_REFERENCE_COUNT = ClProgramReferenceCount
  CL_PROGRAM_SOURCE = ClProgramSource
  CL_QUEUE_CONTEXT = ClQueueContext
  CL_QUEUED = ClQueued
  CL_QUEUE_DEVICE = ClQueueDevice
  CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE = ClQueueOutOfOrderExecModeEnable
  CL_QUEUE_PROFILING_ENABLE = ClQueueProfilingEnable
  CL_QUEUE_PROPERTIES = ClQueueProperties
  CL_QUEUE_REFERENCE_COUNT = ClQueueReferenceCount
  CL_R = ClR
  CL_RA = ClRa
  CL_READ_ONLY_CACHE = ClReadOnlyCache
  CL_READ_WRITE_CACHE = ClReadWriteCache
  CL_RG = ClRg
  CL_RGB = ClRgb
  CL_RGBA = ClRgba
  CL_RUNNING = ClRunning
  CL_SAMPLER_ADDRESSING_MODE = ClSamplerAddressingMode
  CL_SAMPLER_CONTEXT = ClSamplerContext
  CL_SAMPLER_FILTER_MODE = ClSamplerFilterMode
  CL_SAMPLER_NORMALIZED_COORDS = ClSamplerNormalizedCoords
  CL_SAMPLER_REFERENCE_COUNT = ClSamplerReferenceCount
  CL_SCHAR_MAX = ClScharMax
  CL_SCHAR_MIN = ClScharMin
  CL_SHRT_MAX = ClShrtMax
  CL_SHRT_MIN = ClShrtMin
  CL_SIGNED_INT16 = ClSignedInt16
  CL_SIGNED_INT32 = ClSignedInt32
  CL_SIGNED_INT8 = ClSignedInt8
  CL_SNORM_INT16 = ClSnormInt16
  CL_SNORM_INT8 = ClSnormInt8
  CL_SUBMITTED = ClSubmitted
  CL_SUCCESS = ClSuccess
  CL_TRUE = ClTrue
  CL_UCHAR_MAX = ClUcharMax
  CL_UINT_MAX = ClUintMax
  CL_ULONG_MAX = ClUlongMax
  CL_UNORM_INT_101010 = ClUnormInt101010
  CL_UNORM_INT16 = ClUnormInt16
  CL_UNORM_INT8 = ClUnormInt8
  CL_UNORM_SHORT_555 = ClUnormShort555
  CL_UNORM_SHORT_565 = ClUnormShort565
  CL_UNSIGNED_INT16 = ClUnsignedInt16
  CL_UNSIGNED_INT32 = ClUnsignedInt32
  CL_UNSIGNED_INT8 = ClUnsignedInt8
  CL_USHRT_MAX = ClUshrtMax
  CL_VERSION_1_0 = ClVersion10
  CL_WGL_HDC_KHR = ClWglHdcKhr
  clBuildProgram(Lorg/jocl/cl_program;I[Lorg/jocl/cl_device_id;Ljava/lang/String;Lorg/jocl/BuildProgramFunction;Ljava/lang/Object;)I = ClBuildProgram(Org.Jocl.Cl_program, int, Org.Jocl.Cl_device_id[], string, Org.Jocl.IBuildProgramFunction, Java.Lang.Object)
  clCreateBuffer(Lorg/jocl/cl_context;JJLorg/jocl/Pointer;[I)Lorg/jocl/cl_mem; = ClCreateBuffer(Org.Jocl.Cl_context, long, long, Org.Jocl.Pointer, int[])
  clCreateCommandQueue(Lorg/jocl/cl_context;Lorg/jocl/cl_device_id;J[I)Lorg/jocl/cl_command_queue; = ClCreateCommandQueue(Org.Jocl.Cl_context, Org.Jocl.Cl_device_id, long, int[])
  clCreateContext(Lorg/jocl/cl_context_properties;I[Lorg/jocl/cl_device_id;Lorg/jocl/CreateContextFunction;Ljava/lang/Object;[I)Lorg/jocl/cl_context; = ClCreateContext(Org.Jocl.Cl_context_properties, int, Org.Jocl.Cl_device_id[], Org.Jocl.ICreateContextFunction, Java.Lang.Object, int[])
  clCreateContextFromType(Lorg/jocl/cl_context_properties;JLorg/jocl/CreateContextFunction;Ljava/lang/Object;[I)Lorg/jocl/cl_context; = ClCreateContextFromType(Org.Jocl.Cl_context_properties, long, Org.Jocl.ICreateContextFunction, Java.Lang.Object, int[])
  clCreateFromGLBuffer(Lorg/jocl/cl_context;JI[I)Lorg/jocl/cl_mem; = ClCreateFromGLBuffer(Org.Jocl.Cl_context, long, int, int[])
  clCreateFromGLRenderbuffer(Lorg/jocl/cl_context;JI[I)Lorg/jocl/cl_mem; = ClCreateFromGLRenderbuffer(Org.Jocl.Cl_context, long, int, int[])
  clCreateFromGLTexture2D(Lorg/jocl/cl_context;JIII[I)Lorg/jocl/cl_mem; = ClCreateFromGLTexture2D(Org.Jocl.Cl_context, long, int, int, int, int[])
  clCreateFromGLTexture3D(Lorg/jocl/cl_context;JIII[I)Lorg/jocl/cl_mem; = ClCreateFromGLTexture3D(Org.Jocl.Cl_context, long, int, int, int, int[])
  clCreateImage2D(Lorg/jocl/cl_context;J[Lorg/jocl/cl_image_format;JJJLorg/jocl/Pointer;[I)Lorg/jocl/cl_mem; = ClCreateImage2D(Org.Jocl.Cl_context, long, Org.Jocl.Cl_image_format[], long, long, long, Org.Jocl.Pointer, int[])
  clCreateImage3D(Lorg/jocl/cl_context;J[Lorg/jocl/cl_image_format;JJJJJLorg/jocl/Pointer;[I)Lorg/jocl/cl_mem; = ClCreateImage3D(Org.Jocl.Cl_context, long, Org.Jocl.Cl_image_format[], long, long, long, long, long, Org.Jocl.Pointer, int[])
  clCreateKernel(Lorg/jocl/cl_program;Ljava/lang/String;[I)Lorg/jocl/cl_kernel; = ClCreateKernel(Org.Jocl.Cl_program, string, int[])
  clCreateKernelsInProgram(Lorg/jocl/cl_program;I[Lorg/jocl/cl_kernel;[I)I = ClCreateKernelsInProgram(Org.Jocl.Cl_program, int, Org.Jocl.Cl_kernel[], int[])
  clCreateProgramWithBinary(Lorg/jocl/cl_context;I[Lorg/jocl/cl_device_id;[J[[B[I[I)Lorg/jocl/cl_program; = ClCreateProgramWithBinary(Org.Jocl.Cl_context, int, Org.Jocl.Cl_device_id[], long[], byte[][], int[], int[])
  clCreateProgramWithSource(Lorg/jocl/cl_context;I[Ljava/lang/String;[J[I)Lorg/jocl/cl_program; = ClCreateProgramWithSource(Org.Jocl.Cl_context, int, string[], long[], int[])
  clCreateSampler(Lorg/jocl/cl_context;ZII[I)Lorg/jocl/cl_sampler; = ClCreateSampler(Org.Jocl.Cl_context, bool, int, int, int[])
  clEnqueueAcquireGLObjects(Lorg/jocl/cl_command_queue;I[Lorg/jocl/cl_mem;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueAcquireGLObjects(Org.Jocl.Cl_command_queue, int, Org.Jocl.Cl_mem[], int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueBarrier(Lorg/jocl/cl_command_queue;)I = ClEnqueueBarrier(Org.Jocl.Cl_command_queue)
  clEnqueueCopyBuffer(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;Lorg/jocl/cl_mem;JJJI[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueCopyBuffer(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, Org.Jocl.Cl_mem, long, long, long, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueCopyBufferToImage(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;Lorg/jocl/cl_mem;J[J[JI[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueCopyBufferToImage(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, Org.Jocl.Cl_mem, long, long[], long[], int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueCopyImage(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;Lorg/jocl/cl_mem;[J[J[JI[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueCopyImage(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, Org.Jocl.Cl_mem, long[], long[], long[], int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueCopyImageToBuffer(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;Lorg/jocl/cl_mem;[J[JJI[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueCopyImageToBuffer(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, Org.Jocl.Cl_mem, long[], long[], long, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueMapBuffer(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;ZJJJI[Lorg/jocl/cl_event;Lorg/jocl/cl_event;[I)Ljava/nio/ByteBuffer; = ClEnqueueMapBuffer(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, bool, long, long, long, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event, int[])
  clEnqueueMapImage(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;ZJ[J[J[J[JI[Lorg/jocl/cl_event;Lorg/jocl/cl_event;[I)Ljava/nio/ByteBuffer; = ClEnqueueMapImage(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, bool, long, long[], long[], long[], long[], int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event, int[])
  clEnqueueMarker(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_event;)I = ClEnqueueMarker(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_event)
  clEnqueueNativeKernel(Lorg/jocl/cl_command_queue;Lorg/jocl/EnqueueNativeKernelFunction;Ljava/lang/Object;JI[Lorg/jocl/cl_mem;[Lorg/jocl/Pointer;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueNativeKernel(Org.Jocl.Cl_command_queue, Org.Jocl.IEnqueueNativeKernelFunction, Java.Lang.Object, long, int, Org.Jocl.Cl_mem[], Org.Jocl.Pointer[], int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueNDRangeKernel(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_kernel;I[J[J[JI[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueNDRangeKernel(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_kernel, int, long[], long[], long[], int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueReadBuffer(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;ZJJLorg/jocl/Pointer;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueReadBuffer(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, bool, long, long, Org.Jocl.Pointer, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueReadImage(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;Z[J[JJJLorg/jocl/Pointer;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueReadImage(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, bool, long[], long[], long, long, Org.Jocl.Pointer, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueReleaseGLObjects(Lorg/jocl/cl_command_queue;I[Lorg/jocl/cl_mem;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueReleaseGLObjects(Org.Jocl.Cl_command_queue, int, Org.Jocl.Cl_mem[], int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueTask(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_kernel;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueTask(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_kernel, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueUnmapMemObject(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;Ljava/nio/ByteBuffer;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueUnmapMemObject(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, Java.Nio.ByteBuffer, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueWaitForEvents(Lorg/jocl/cl_command_queue;I[Lorg/jocl/cl_event;)I = ClEnqueueWaitForEvents(Org.Jocl.Cl_command_queue, int, Org.Jocl.Cl_event[])
  clEnqueueWriteBuffer(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;ZJJLorg/jocl/Pointer;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueWriteBuffer(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, bool, long, long, Org.Jocl.Pointer, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clEnqueueWriteImage(Lorg/jocl/cl_command_queue;Lorg/jocl/cl_mem;Z[J[JJJLorg/jocl/Pointer;I[Lorg/jocl/cl_event;Lorg/jocl/cl_event;)I = ClEnqueueWriteImage(Org.Jocl.Cl_command_queue, Org.Jocl.Cl_mem, bool, long[], long[], long, long, Org.Jocl.Pointer, int, Org.Jocl.Cl_event[], Org.Jocl.Cl_event)
  clFinish(Lorg/jocl/cl_command_queue;)I = ClFinish(Org.Jocl.Cl_command_queue)
  clFlush(Lorg/jocl/cl_command_queue;)I = ClFlush(Org.Jocl.Cl_command_queue)
  clGetCommandQueueInfo(Lorg/jocl/cl_command_queue;IJLorg/jocl/Pointer;[J)I = ClGetCommandQueueInfo(Org.Jocl.Cl_command_queue, int, long, Org.Jocl.Pointer, long[])
  clGetContextInfo(Lorg/jocl/cl_context;IJLorg/jocl/Pointer;[J)I = ClGetContextInfo(Org.Jocl.Cl_context, int, long, Org.Jocl.Pointer, long[])
  clGetDeviceIDs(Lorg/jocl/cl_platform_id;JI[Lorg/jocl/cl_device_id;[I)I = ClGetDeviceIDs(Org.Jocl.Cl_platform_id, long, int, Org.Jocl.Cl_device_id[], int[])
  clGetDeviceInfo(Lorg/jocl/cl_device_id;IJLorg/jocl/Pointer;[J)I = ClGetDeviceInfo(Org.Jocl.Cl_device_id, int, long, Org.Jocl.Pointer, long[])
  clGetEventInfo(Lorg/jocl/cl_event;IJLorg/jocl/Pointer;[J)I = ClGetEventInfo(Org.Jocl.Cl_event, int, long, Org.Jocl.Pointer, long[])
  clGetEventProfilingInfo(Lorg/jocl/cl_event;IJLorg/jocl/Pointer;[J)I = ClGetEventProfilingInfo(Org.Jocl.Cl_event, int, long, Org.Jocl.Pointer, long[])
  clGetGLObjectInfo(Lorg/jocl/cl_mem;[I[I)I = ClGetGLObjectInfo(Org.Jocl.Cl_mem, int[], int[])
  clGetGLTextureInfo(Lorg/jocl/cl_mem;IJLorg/jocl/Pointer;[J)I = ClGetGLTextureInfo(Org.Jocl.Cl_mem, int, long, Org.Jocl.Pointer, long[])
  clGetImageInfo(Lorg/jocl/cl_mem;IJLorg/jocl/Pointer;[J)I = ClGetImageInfo(Org.Jocl.Cl_mem, int, long, Org.Jocl.Pointer, long[])
  clGetKernelInfo(Lorg/jocl/cl_kernel;IJLorg/jocl/Pointer;[J)I = ClGetKernelInfo(Org.Jocl.Cl_kernel, int, long, Org.Jocl.Pointer, long[])
  clGetKernelWorkGroupInfo(Lorg/jocl/cl_kernel;Lorg/jocl/cl_device_id;IJLorg/jocl/Pointer;[J)I = ClGetKernelWorkGroupInfo(Org.Jocl.Cl_kernel, Org.Jocl.Cl_device_id, int, long, Org.Jocl.Pointer, long[])
  clGetMemObjectInfo(Lorg/jocl/cl_mem;IJLorg/jocl/Pointer;[J)I = ClGetMemObjectInfo(Org.Jocl.Cl_mem, int, long, Org.Jocl.Pointer, long[])
  clGetPlatformIDs(I[Lorg/jocl/cl_platform_id;[I)I = ClGetPlatformIDs(int, Org.Jocl.Cl_platform_id[], int[])
  clGetPlatformInfo(Lorg/jocl/cl_platform_id;IJLorg/jocl/Pointer;[J)I = ClGetPlatformInfo(Org.Jocl.Cl_platform_id, int, long, Org.Jocl.Pointer, long[])
  clGetProgramBuildInfo(Lorg/jocl/cl_program;Lorg/jocl/cl_device_id;IJLorg/jocl/Pointer;[J)I = ClGetProgramBuildInfo(Org.Jocl.Cl_program, Org.Jocl.Cl_device_id, int, long, Org.Jocl.Pointer, long[])
  clGetProgramInfo(Lorg/jocl/cl_program;IJLorg/jocl/Pointer;[J)I = ClGetProgramInfo(Org.Jocl.Cl_program, int, long, Org.Jocl.Pointer, long[])
  clGetSamplerInfo(Lorg/jocl/cl_sampler;IJLorg/jocl/Pointer;[J)I = ClGetSamplerInfo(Org.Jocl.Cl_sampler, int, long, Org.Jocl.Pointer, long[])
  clGetSupportedImageFormats(Lorg/jocl/cl_context;JII[Lorg/jocl/cl_image_format;[I)I = ClGetSupportedImageFormats(Org.Jocl.Cl_context, long, int, int, Org.Jocl.Cl_image_format[], int[])
  clReleaseCommandQueue(Lorg/jocl/cl_command_queue;)I = ClReleaseCommandQueue(Org.Jocl.Cl_command_queue)
  clReleaseContext(Lorg/jocl/cl_context;)I = ClReleaseContext(Org.Jocl.Cl_context)
  clReleaseEvent(Lorg/jocl/cl_event;)I = ClReleaseEvent(Org.Jocl.Cl_event)
  clReleaseKernel(Lorg/jocl/cl_kernel;)I = ClReleaseKernel(Org.Jocl.Cl_kernel)
  clReleaseMemObject(Lorg/jocl/cl_mem;)I = ClReleaseMemObject(Org.Jocl.Cl_mem)
  clReleaseProgram(Lorg/jocl/cl_program;)I = ClReleaseProgram(Org.Jocl.Cl_program)
  clReleaseSampler(Lorg/jocl/cl_sampler;)I = ClReleaseSampler(Org.Jocl.Cl_sampler)
  clRetainCommandQueue(Lorg/jocl/cl_command_queue;)I = ClRetainCommandQueue(Org.Jocl.Cl_command_queue)
  clRetainContext(Lorg/jocl/cl_context;)I = ClRetainContext(Org.Jocl.Cl_context)
  clRetainEvent(Lorg/jocl/cl_event;)I = ClRetainEvent(Org.Jocl.Cl_event)
  clRetainKernel(Lorg/jocl/cl_kernel;)I = ClRetainKernel(Org.Jocl.Cl_kernel)
  clRetainMemObject(Lorg/jocl/cl_mem;)I = ClRetainMemObject(Org.Jocl.Cl_mem)
  clRetainProgram(Lorg/jocl/cl_program;)I = ClRetainProgram(Org.Jocl.Cl_program)
  clRetainSampler(Lorg/jocl/cl_sampler;)I = ClRetainSampler(Org.Jocl.Cl_sampler)
  clSetCommandQueueProperty(Lorg/jocl/cl_command_queue;JZ[J)I = ClSetCommandQueueProperty(Org.Jocl.Cl_command_queue, long, bool, long[])
  clSetKernelArg(Lorg/jocl/cl_kernel;IJLorg/jocl/Pointer;)I = ClSetKernelArg(Org.Jocl.Cl_kernel, int, long, Org.Jocl.Pointer)
  clUnloadCompiler()I = ClUnloadCompiler()
  clWaitForEvents(I[Lorg/jocl/cl_event;)I = ClWaitForEvents(int, Org.Jocl.Cl_event[])
  setExceptionsEnabled(Z)V = SetExceptionsEnabled(bool)
  setLogLevel(Lorg/jocl/CL$LogLevel;)V = SetLogLevel(Org.Jocl.CL.LogLevel)
  stringFor_cl_addressing_mode(I)Ljava/lang/String; = StringFor_cl_addressing_mode(int)
  stringFor_cl_build_status(I)Ljava/lang/String; = StringFor_cl_build_status(int)
  stringFor_cl_channel_order(I)Ljava/lang/String; = StringFor_cl_channel_order(int)
  stringFor_cl_channel_type(I)Ljava/lang/String; = StringFor_cl_channel_type(int)
  stringFor_cl_command_queue_info(I)Ljava/lang/String; = StringFor_cl_command_queue_info(int)
  stringFor_cl_command_queue_properties(J)Ljava/lang/String; = StringFor_cl_command_queue_properties(long)
  stringFor_cl_command_type(I)Ljava/lang/String; = StringFor_cl_command_type(int)
  stringFor_cl_context_info(I)Ljava/lang/String; = StringFor_cl_context_info(int)
  stringFor_cl_context_properties(I)Ljava/lang/String; = StringFor_cl_context_properties(int)
  stringFor_cl_device_address_info(J)Ljava/lang/String; = StringFor_cl_device_address_info(long)
  stringFor_cl_device_exec_capabilities(J)Ljava/lang/String; = StringFor_cl_device_exec_capabilities(long)
  stringFor_cl_device_fp_config(J)Ljava/lang/String; = StringFor_cl_device_fp_config(long)
  stringFor_cl_device_info(I)Ljava/lang/String; = StringFor_cl_device_info(int)
  stringFor_cl_device_local_mem_type(I)Ljava/lang/String; = StringFor_cl_device_local_mem_type(int)
  stringFor_cl_device_mem_cache_type(I)Ljava/lang/String; = StringFor_cl_device_mem_cache_type(int)
  stringFor_cl_device_type(J)Ljava/lang/String; = StringFor_cl_device_type(long)
  stringFor_cl_event_info(I)Ljava/lang/String; = StringFor_cl_event_info(int)
  stringFor_cl_filter_mode(I)Ljava/lang/String; = StringFor_cl_filter_mode(int)
  stringFor_cl_gl_object_type(I)Ljava/lang/String; = StringFor_cl_gl_object_type(int)
  stringFor_cl_gl_texture_info(I)Ljava/lang/String; = StringFor_cl_gl_texture_info(int)
  stringFor_cl_image_info(I)Ljava/lang/String; = StringFor_cl_image_info(int)
  stringFor_cl_kernel_info(I)Ljava/lang/String; = StringFor_cl_kernel_info(int)
  stringFor_cl_kernel_work_group_info(I)Ljava/lang/String; = StringFor_cl_kernel_work_group_info(int)
  stringFor_cl_khr_gl_sharing(I)Ljava/lang/String; = StringFor_cl_khr_gl_sharing(int)
  stringFor_cl_map_flags(J)Ljava/lang/String; = StringFor_cl_map_flags(long)
  stringFor_cl_mem_flags(J)Ljava/lang/String; = StringFor_cl_mem_flags(long)
  stringFor_cl_mem_info(I)Ljava/lang/String; = StringFor_cl_mem_info(int)
  stringFor_cl_mem_object_type(I)Ljava/lang/String; = StringFor_cl_mem_object_type(int)
  stringFor_cl_platform_info(I)Ljava/lang/String; = StringFor_cl_platform_info(int)
  stringFor_cl_profiling_info(I)Ljava/lang/String; = StringFor_cl_profiling_info(int)
  stringFor_cl_program_build_info(I)Ljava/lang/String; = StringFor_cl_program_build_info(int)
  stringFor_cl_program_info(I)Ljava/lang/String; = StringFor_cl_program_info(int)
  stringFor_cl_sampler_info(I)Ljava/lang/String; = StringFor_cl_sampler_info(int)
  stringFor_command_execution_status(I)Ljava/lang/String; = StringFor_command_execution_status(int)
  stringFor_errorCode(I)Ljava/lang/String; = StringFor_errorCode(int)
org/jocl/cl_command_queue = Org.Jocl.Cl_command_queue
  <init>()V = .ctor()
org/jocl/cl_context = Org.Jocl.Cl_context
  <init>()V = .ctor()
org/jocl/cl_context_properties = Org.Jocl.Cl_context_properties
  <init>()V = .ctor()
  addProperty(JJ)V = AddProperty(long, long)
  addProperty(JLorg/jocl/cl_platform_id;)V = AddProperty(long, Org.Jocl.Cl_platform_id)
org/jocl/cl_device_id = Org.Jocl.Cl_device_id
  <init>()V = .ctor()
org/jocl/cl_event = Org.Jocl.Cl_event
  <init>()V = .ctor()
org/jocl/cl_image_format = Org.Jocl.Cl_image_format
  <init>()V = .ctor()
  image_channel_data_type = ImageChannelDataType
  image_channel_order = ImageChannelOrder
org/jocl/cl_kernel = Org.Jocl.Cl_kernel
  <init>()V = .ctor()
org/jocl/cl_mem = Org.Jocl.Cl_mem
  <init>()V = .ctor()
org/jocl/cl_platform_id = Org.Jocl.Cl_platform_id
  <init>()V = .ctor()
org/jocl/cl_program = Org.Jocl.Cl_program
  <init>()V = .ctor()
org/jocl/cl_sampler = Org.Jocl.Cl_sampler
  <init>()V = .ctor()
org/jocl/CLException = Org.Jocl.CLException
  <init>(Ljava/lang/String;)V = .ctor(string)
org/jocl/CreateContextFunction = Org.Jocl.ICreateContextFunction
  function(Ljava/lang/String;Lorg/jocl/Pointer;JLjava/lang/Object;)V = Function(string, Org.Jocl.Pointer, long, Java.Lang.Object)
org/jocl/EnqueueNativeKernelFunction = Org.Jocl.IEnqueueNativeKernelFunction
  function(Ljava/lang/Object;)V = Function(Java.Lang.Object)
org/jocl/NativePointerObject = Org.Jocl.NativePointerObject
org/jocl/Pointer = Org.Jocl.Pointer
  <init>()V = .ctor()
  <init>(Ljava/nio/Buffer;)V = .ctor(Java.Nio.Buffer)
  <init>(Lorg/jocl/Pointer;)V = .ctor(Org.Jocl.Pointer)
  <init>(Lorg/jocl/Pointer;J)V = .ctor(Org.Jocl.Pointer, long)
  to([B)Lorg/jocl/Pointer; = To(byte[])
  to([C)Lorg/jocl/Pointer; = To(char[])
  to([D)Lorg/jocl/Pointer; = To(double[])
  to([F)Lorg/jocl/Pointer; = To(float[])
  to([I)Lorg/jocl/Pointer; = To(int[])
  to(Ljava/nio/Buffer;)Lorg/jocl/Pointer; = To(Java.Nio.Buffer)
  to([J)Lorg/jocl/Pointer; = To(long[])
  to([Lorg/jocl/NativePointerObject;)Lorg/jocl/Pointer; = To(params Org.Jocl.NativePointerObject[])
  to([S)Lorg/jocl/Pointer; = To(short[])
  withByteOffset(J)Lorg/jocl/Pointer; = WithByteOffset(long)
org/jocl/Sizeof = Org.Jocl.Sizeof
  cl_char = ClChar
  cl_char16 = ClChar16
  cl_char2 = ClChar2
  cl_char4 = ClChar4
  cl_char8 = ClChar8
  cl_command_queue = ClCommandQueue
  cl_context = ClContext
  cl_device_id = ClDeviceId
  cl_double = ClDouble
  cl_double16 = ClDouble16
  cl_double2 = ClDouble2
  cl_double4 = ClDouble4
  cl_double8 = ClDouble8
  cl_event = ClEvent
  cl_float = ClFloat
  cl_float16 = ClFloat16
  cl_float2 = ClFloat2
  cl_float4 = ClFloat4
  cl_float8 = ClFloat8
  cl_half = ClHalf
  cl_int = ClInt
  cl_int16 = ClInt16
  cl_int2 = ClInt2
  cl_int4 = ClInt4
  cl_int8 = ClInt8
  cl_kernel = ClKernel
  cl_long = ClLong
  cl_long16 = ClLong16
  cl_long2 = ClLong2
  cl_long4 = ClLong4
  cl_long8 = ClLong8
  cl_mem = ClMem
  cl_platform_id = ClPlatformId
  cl_program = ClProgram
  cl_sampler = ClSampler
  cl_short = ClShort
  cl_short16 = ClShort16
  cl_short2 = ClShort2
  cl_short4 = ClShort4
  cl_short8 = ClShort8
  cl_uchar = ClUchar
  cl_uchar16 = ClUchar16
  cl_uchar2 = ClUchar2
  cl_uchar4 = ClUchar4
  cl_uchar8 = ClUchar8
  cl_uint = ClUint
  cl_uint16 = ClUint16
  cl_uint2 = ClUint2
  cl_uint4 = ClUint4
  cl_uint8 = ClUint8
  cl_ulong = ClUlong
  cl_ulong16 = ClUlong16
  cl_ulong2 = ClUlong2
  cl_ulong4 = ClUlong4
  cl_ulong8 = ClUlong8
  cl_ushort = ClUshort
  cl_ushort16 = ClUshort16
  cl_ushort2 = ClUshort2
  cl_ushort4 = ClUshort4
  cl_ushort8 = ClUshort8
  POINTER = Pointer
  size_t = SizeT
org/neuroph/contrib/IACFunction = Org.Neuroph.Contrib.IACFunction
  <init>()V = .ctor()
  getOutput(D)D = GetOutput(double)
  getOutput(DD)D = GetOutput(double, double)
org/neuroph/contrib/IACNetwork = Org.Neuroph.Contrib.IACNetwork
  <init>()V = .ctor()
org/neuroph/contrib/IACNeuron = Org.Neuroph.Contrib.IACNeuron
  <init>()V = .ctor()
org/neuroph/contrib/imgrec/ColorMode = Org.Neuroph.Contrib.Imgrec.ColorMode
  BLACK_AND_WHITE = BlackAndWhite
  FULL_COLOR = FullColor
  valueOf(Ljava/lang/String;)Lorg/neuroph/contrib/imgrec/ColorMode; = ValueOf(string)
  values()[Lorg/neuroph/contrib/imgrec/ColorMode; = Values()
org/neuroph/contrib/imgrec/FractionRgbData = Org.Neuroph.Contrib.Imgrec.FractionRgbData
  blueValues = BlueValues
  flattenedRgbValues = FlattenedRgbValues
  greenValues = GreenValues
  redValues = RedValues
  getHeight()I = Height
  getWidth()I = Width
  convertRgbInputToBinaryBlackAndWhite([D)[D = ConvertRgbInputToBinaryBlackAndWhite(double[])
  getBlueValues()[[D = GetBlueValues()
  getFlattenedRgbValues()[D = GetFlattenedRgbValues()
  getGreenValues()[[D = GetGreenValues()
  getRedValues()[[D = GetRedValues()
org/neuroph/contrib/imgrec/ImageRecognitionHelper = Org.Neuroph.Contrib.Imgrec.ImageRecognitionHelper
  <init>()V = .ctor()
  createBlackAndWhiteTrainingSet(Ljava/util/List;Ljava/util/Map;)Lorg/neuroph/core/learning/TrainingSet; = CreateBlackAndWhiteTrainingSet(System.Collections.Generic.IList<string>, System.Collections.Generic.IDictionary<string, Org.Neuroph.Contrib.Imgrec.FractionRgbData>)
  createTrainingSet(Ljava/util/List;Ljava/util/Map;)Lorg/neuroph/core/learning/TrainingSet; = CreateTrainingSet(System.Collections.Generic.IList<string>, System.Collections.Generic.IDictionary<string, Org.Neuroph.Contrib.Imgrec.FractionRgbData>)
org/neuroph/contrib/imgrec/ImageRecognitionPlugin = Org.Neuroph.Contrib.Imgrec.ImageRecognitionPlugin
  IMG_REC_PLUGIN_NAME = ImgRecPluginName
  getColorMode()Lorg/neuroph/contrib/imgrec/ColorMode; = ColorMode
  getMaxOutput()Ljava/util/HashMap; = MaxOutput
  getOutput()Ljava/util/HashMap; = Output
  processInput()V = ProcessInput()
  recognizeImage(Ljava/io/File;)Ljava/util/HashMap; = RecognizeImage(Java.IO.File)
  recognizeImage(Ljava/net/URL;)Ljava/util/HashMap; = RecognizeImage(Java.Net.URL)
  setInput(Ljava/io/File;)V = SetInput(Java.IO.File)
  setInput(Ljava/net/URL;)V = SetInput(Java.Net.URL)
org/neuroph/contrib/imgrec/ImageRecognitionSample = Org.Neuroph.Contrib.Imgrec.ImageRecognitionSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/contrib/imgrec/ImageSampler = Org.Neuroph.Contrib.Imgrec.ImageSampler
  <init>()V = .ctor()
org/neuroph/contrib/imgrec/ImageSizeMismatchException = Org.Neuroph.Contrib.Imgrec.ImageSizeMismatchException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/contrib/matrixmlp/MatrixInputLayer = Org.Neuroph.Contrib.Matrixmlp.MatrixInputLayer
  <init>(I)V = .ctor(int)
  calculate()V = Calculate()
  getInputs()[D = GetInputs()
  getOutputs()[D = GetOutputs()
  setInputs([D)V = SetInputs(double[])
  setOutputs([D)V = SetOutputs(double[])
org/neuroph/contrib/matrixmlp/MatrixLayer = Org.Neuroph.Contrib.Matrixmlp.IMatrixLayer
  calculate()V = Calculate()
  getInputs()[D = GetInputs()
  getOutputs()[D = GetOutputs()
  setInputs([D)V = SetInputs(double[])
  setOutputs([D)V = SetOutputs(double[])
org/neuroph/contrib/matrixmlp/MatrixMlpLayer = Org.Neuroph.Contrib.Matrixmlp.MatrixMlpLayer
  <init>(Lorg/neuroph/core/Layer;Lorg/neuroph/contrib/matrixmlp/MatrixLayer;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Layer, Org.Neuroph.Contrib.Matrixmlp.IMatrixLayer, Org.Neuroph.Core.Transfer.TransferFunction)
  getNeuronsCount()I = NeuronsCount
  getNextLayer()Lorg/neuroph/contrib/matrixmlp/MatrixLayer; = NextLayer
  setNextLayer(Lorg/neuroph/contrib/matrixmlp/MatrixLayer;)V = NextLayer
  getPreviousLayer()Lorg/neuroph/contrib/matrixmlp/MatrixLayer; = PreviousLayer
  setPreviousLayer(Lorg/neuroph/contrib/matrixmlp/MatrixLayer;)V = PreviousLayer
  getTransferFunction()Lorg/neuroph/core/transfer/TransferFunction; = TransferFunction
  calculate()V = Calculate()
  copyMatricesToNeurons()V = CopyMatricesToNeurons()
  copyNeuronsToMatrices()V = CopyNeuronsToMatrices()
  getDeltaWeights()[[D = GetDeltaWeights()
  getErrors()[D = GetErrors()
  getInputs()[D = GetInputs()
  getInputsFromPreviousLayer()V = GetInputsFromPreviousLayer()
  getNetInput()[D = GetNetInput()
  getOutputs()[D = GetOutputs()
  getWeights()[[D = GetWeights()
  saveCurrentWeights()V = SaveCurrentWeights()
  setErrors([D)V = SetErrors(double[])
  setInputs([D)V = SetInputs(double[])
  setOutputs([D)V = SetOutputs(double[])
  sync()V = Sync()
org/neuroph/contrib/matrixmlp/MatrixMomentumBackpropagation = Org.Neuroph.Contrib.Matrixmlp.MatrixMomentumBackpropagation
  <init>()V = .ctor()
  updateLayerWeights(Lorg/neuroph/contrib/matrixmlp/MatrixMlpLayer;[D)V = UpdateLayerWeights(Org.Neuroph.Contrib.Matrixmlp.MatrixMlpLayer, double[])
org/neuroph/contrib/matrixmlp/MatrixMultiLayerPerceptron = Org.Neuroph.Contrib.Matrixmlp.MatrixMultiLayerPerceptron
  <init>(Lorg/neuroph/nnet/MultiLayerPerceptron;)V = .ctor(Org.Neuroph.Nnet.MultiLayerPerceptron)
  getMatrixLayers()[Lorg/neuroph/contrib/matrixmlp/MatrixLayer; = GetMatrixLayers()
org/neuroph/contrib/matrixmlp/TestMatrixMLP = Org.Neuroph.Contrib.Matrixmlp.TestMatrixMLP
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/contrib/ocr/OcrHelper = Org.Neuroph.Contrib.Ocr.OcrHelper
  <init>()V = .ctor()
org/neuroph/contrib/ocr/OcrPlugin = Org.Neuroph.Contrib.Ocr.OcrPlugin
  OCR_PLUGIN_NAME = OcrPluginName
  getColorMode()Lorg/neuroph/contrib/imgrec/ColorMode; = ColorMode
org/neuroph/contrib/ocr/OcrUtils = Org.Neuroph.Contrib.Ocr.OcrUtils
  <init>()V = .ctor()
org/neuroph/contrib/RecommenderNetwork = Org.Neuroph.Contrib.RecommenderNetwork
  <init>()V = .ctor()
  createDemoNetwork()V = CreateDemoNetwork()
org/neuroph/core/Connection = Org.Neuroph.Core.Connection
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron)
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Weight;)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Weight)
  fromNeuron = FromNeuron
  toNeuron = ToNeuron
  weight = Weight
  getFromNeuron()Lorg/neuroph/core/Neuron; = FromNeuron
  setFromNeuron(Lorg/neuroph/core/Neuron;)V = FromNeuron
  getInput()D = Input
  getToNeuron()Lorg/neuroph/core/Neuron; = ToNeuron
  setToNeuron(Lorg/neuroph/core/Neuron;)V = ToNeuron
  getWeight()Lorg/neuroph/core/Weight; = Weight
  setWeight(Lorg/neuroph/core/Weight;)V = Weight
  getWeightedInput()D = WeightedInput
org/neuroph/core/exceptions/NeurophError = Org.Neuroph.Core.Exceptions.NeurophError
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/core/exceptions/VectorSizeMismatchException = Org.Neuroph.Core.Exceptions.VectorSizeMismatchException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/core/input/And = Org.Neuroph.Core.Input.And
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/Difference = Org.Neuroph.Core.Input.Difference
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
  getOutput(Ljava/util/List;)[D = GetOutput(System.Collections.Generic.IList<Org.Neuroph.Core.Connection>)
org/neuroph/core/input/InputFunction = Org.Neuroph.Core.Input.InputFunction
  <init>()V = .ctor()
  <init>(Lorg/neuroph/core/input/WeightsFunction;Lorg/neuroph/core/input/SummingFunction;)V = .ctor(Org.Neuroph.Core.Input.WeightsFunction, Org.Neuroph.Core.Input.SummingFunction)
  getSummingFunction()Lorg/neuroph/core/input/SummingFunction; = SummingFunction
  getWeightsFunction()Lorg/neuroph/core/input/WeightsFunction; = WeightsFunction
  getOutput(Ljava/util/List;)D = GetOutput(System.Collections.Generic.IList<Org.Neuroph.Core.Connection>)
org/neuroph/core/input/Intensity = Org.Neuroph.Core.Input.Intensity
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/Max = Org.Neuroph.Core.Input.Max
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/Min = Org.Neuroph.Core.Input.Min
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/Or = Org.Neuroph.Core.Input.Or
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/Product = Org.Neuroph.Core.Input.Product
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/Sum = Org.Neuroph.Core.Input.Sum
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/SummingFunction = Org.Neuroph.Core.Input.SummingFunction
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/SumSqr = Org.Neuroph.Core.Input.SumSqr
  <init>()V = .ctor()
  getOutput([D)D = GetOutput(double[])
org/neuroph/core/input/WeightedInput = Org.Neuroph.Core.Input.WeightedInput
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
  getOutput(Ljava/util/List;)[D = GetOutput(System.Collections.Generic.IList<Org.Neuroph.Core.Connection>)
org/neuroph/core/input/WeightedSum = Org.Neuroph.Core.Input.WeightedSum
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
org/neuroph/core/input/WeightsFunction = Org.Neuroph.Core.Input.WeightsFunction
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
  getOutput(Ljava/util/List;)[D = GetOutput(System.Collections.Generic.IList<Org.Neuroph.Core.Connection>)
org/neuroph/core/Layer = Org.Neuroph.Core.Layer
  <init>()V = .ctor()
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
  neurons = Neurons
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getNeurons()Ljava/util/List; = Neurons
  getNeuronsCount()I = NeuronsCount
  getNeuronsIterator()Ljava/util/Iterator; = NeuronsIterator
  getParentNetwork()Lorg/neuroph/core/NeuralNetwork; = ParentNetwork
  setParentNetwork(Lorg/neuroph/core/NeuralNetwork;)V = ParentNetwork
  addNeuron(ILorg/neuroph/core/Neuron;)V = AddNeuron(int, Org.Neuroph.Core.Neuron)
  addNeuron(Lorg/neuroph/core/Neuron;)V = AddNeuron(Org.Neuroph.Core.Neuron)
  calculate()V = Calculate()
  getNeuronAt(I)Lorg/neuroph/core/Neuron; = GetNeuronAt(int)
  indexOf(Lorg/neuroph/core/Neuron;)I = IndexOf(Org.Neuroph.Core.Neuron)
  initializeWeights(D)V = InitializeWeights(double)
  initializeWeights(DD)V = InitializeWeights(double, double)
  initializeWeights(Ljava/util/Random;)V = InitializeWeights(Java.Util.Random)
  randomizeWeights()V = RandomizeWeights()
  randomizeWeights(DD)V = RandomizeWeights(double, double)
  removeNeuron(Lorg/neuroph/core/Neuron;)V = RemoveNeuron(Org.Neuroph.Core.Neuron)
  removeNeuronAt(I)V = RemoveNeuronAt(int)
  reset()V = Reset()
  setNeuron(ILorg/neuroph/core/Neuron;)V = SetNeuron(int, Org.Neuroph.Core.Neuron)
org/neuroph/core/learning/IterativeLearning = Org.Neuroph.Core.Learning.IterativeLearning
  <init>()V = .ctor()
  currentIteration = CurrentIteration
  iterationsLimited = IterationsLimited
  learningRate = LearningRate
  maxIterations = MaxIterations
  getCurrentIteration()Ljava/lang/Integer; = CurrentIteration
  isPausedLearning()Z = IsPausedLearning
  getLearningRate()D = LearningRate
  setLearningRate(D)V = LearningRate
  doLearningEpoch(Lorg/neuroph/core/learning/TrainingSet;)V = DoLearningEpoch(Org.Neuroph.Core.Learning.TrainingSet)
  doOneLearningIteration(Lorg/neuroph/core/learning/TrainingSet;)V = DoOneLearningIteration(Org.Neuroph.Core.Learning.TrainingSet)
  learn(Lorg/neuroph/core/learning/TrainingSet;)V = Learn(Org.Neuroph.Core.Learning.TrainingSet)
  learn(Lorg/neuroph/core/learning/TrainingSet;I)V = Learn(Org.Neuroph.Core.Learning.TrainingSet, int)
  pause()V = Pause()
  reset()V = Reset()
  resume()V = Resume()
  setMaxIterations(I)V = SetMaxIterations(int)
org/neuroph/core/learning/LearningRule = Org.Neuroph.Core.Learning.LearningRule
  <init>()V = .ctor()
  neuralNetwork = NeuralNetwork
  isStopped()Z = IsStopped
  getNeuralNetwork()Lorg/neuroph/core/NeuralNetwork; = NeuralNetwork
  setNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;)V = NeuralNetwork
  getTrainingSet()Lorg/neuroph/core/learning/TrainingSet; = TrainingSet
  setTrainingSet(Lorg/neuroph/core/learning/TrainingSet;)V = TrainingSet
  learn(Lorg/neuroph/core/learning/TrainingSet;)V = Learn(Org.Neuroph.Core.Learning.TrainingSet)
  notifyChange()V = NotifyChange()
  run()V = Run()
  setStarted()V = SetStarted()
  stopLearning()V = StopLearning()
org/neuroph/core/learning/SupervisedLearning = Org.Neuroph.Core.Learning.SupervisedLearning
  <init>()V = .ctor()
  maxError = MaxError
  patternErrorSqrSum = PatternErrorSqrSum
  previousEpochError = PreviousEpochError
  totalNetworkError = TotalNetworkError
  totalPatternErrorSqrSum = TotalPatternErrorSqrSum
  hasReachedStopCondition()Z = HasReachedStopCondition
  getMaxError()D = MaxError
  setMaxError(D)V = MaxError
  getMinErrorChange()D = MinErrorChange
  setMinErrorChange(D)V = MinErrorChange
  getMinErrorChangeIterationsCount()I = MinErrorChangeIterationsCount
  getMinErrorChangeIterationsLimit()I = MinErrorChangeIterationsLimit
  setMinErrorChangeIterationsLimit(I)V = MinErrorChangeIterationsLimit
  getPreviousEpochError()D = PreviousEpochError
  getTotalNetworkError()D = TotalNetworkError
  doLearningEpoch(Lorg/neuroph/core/learning/TrainingSet;)V = DoLearningEpoch(Org.Neuroph.Core.Learning.TrainingSet)
  errorChangeStalled()Z = ErrorChangeStalled()
  getPatternError([D[D)[D = GetPatternError(double[], double[])
  learn(Lorg/neuroph/core/learning/TrainingSet;D)V = Learn(Org.Neuroph.Core.Learning.TrainingSet, double)
  learn(Lorg/neuroph/core/learning/TrainingSet;DI)V = Learn(Org.Neuroph.Core.Learning.TrainingSet, double, int)
  learnPattern(Lorg/neuroph/core/learning/SupervisedTrainingElement;)V = LearnPattern(Org.Neuroph.Core.Learning.SupervisedTrainingElement)
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updatePatternError([D)V = UpdatePatternError(double[])
  updateTotalNetworkError()V = UpdateTotalNetworkError()
  updateTotalNetworkError([D)V = UpdateTotalNetworkError(double[])
org/neuroph/core/learning/SupervisedTrainingElement = Org.Neuroph.Core.Learning.SupervisedTrainingElement
  <init>([D[D)V = .ctor(double[], double[])
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Ljava/util/ArrayList;Ljava/util/ArrayList;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Double>, System.Collections.Generic.IList<Java.Lang.Double>)
  getDesiredOutput()[D = GetDesiredOutput()
  setDesiredOutput([D)V = SetDesiredOutput(double[])
org/neuroph/core/learning/TrainingData = Org.Neuroph.Core.Learning.TrainingData
  <init>(I)V = .ctor(int)
  DELTA_WEIGHT_SUM = DeltaWeightSum
  PREVIOUS_WEIGHT = PreviousWeight
  get(I)D = Get(int)
  set(ID)V = Set(int, double)
org/neuroph/core/learning/TrainingElement = Org.Neuroph.Core.Learning.TrainingElement
  <init>([D)V = .ctor(params double[])
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/util/ArrayList;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Double>)
  input = Input
  label = Label
  isSupervised()Z = IsSupervised
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getIdealArray()[D = GetIdealArray()
  getInput()[D = GetInput()
  getInputArray()[D = GetInputArray()
  setIdealArray([D)V = SetIdealArray(double[])
  setInput([D)V = SetInput(double[])
  setInputArray([D)V = SetInputArray(double[])
org/neuroph/core/learning/TrainingSet = Org.Neuroph.Core.Learning.TrainingSet
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  <init>(II)V = .ctor(int, int)
  <init>(Ljava/lang/String;)V = .ctor(string)
  getFilePath()Ljava/lang/String; = FilePath
  setFilePath(Ljava/lang/String;)V = FilePath
  getIdealSize()I = IdealSize
  getInputSize()I = InputSize
  isEmpty()Z = IsEmpty
  isSupervised()Z = IsSupervised
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getOutputSize()I = OutputSize
  getRecordCount()J = RecordCount
  addElement(Lorg/neuroph/core/learning/TrainingElement;)V = AddElement(Org.Neuroph.Core.Learning.TrainingElement)
  clear()V = Clear()
  elementAt(I)Lorg/neuroph/core/learning/TrainingElement; = ElementAt(int)
  getRecord(JLorg/encog/engine/data/EngineData;)V = GetRecord(long, Org.Encog.Engine.Data.IEngineData)
  iterator()Ljava/util/Iterator; = Iterator()
  load(Ljava/lang/String;)Lorg/neuroph/core/learning/TrainingSet; = Load(string)
  openAdditional()Lorg/encog/engine/data/EngineIndexableSet; = OpenAdditional()
  removeElementAt(I)V = RemoveElementAt(int)
  save()V = Save()
  save(Ljava/lang/String;)V = Save(string)
  size()I = Size()
  trainingElements()Ljava/util/List; = TrainingElements()
org/neuroph/core/learning/UnsupervisedLearning = Org.Neuroph.Core.Learning.UnsupervisedLearning
  <init>()V = .ctor()
  adjustWeights()V = AdjustWeights()
  doLearningEpoch(Lorg/neuroph/core/learning/TrainingSet;)V = DoLearningEpoch(Org.Neuroph.Core.Learning.TrainingSet)
  learnPattern(Lorg/neuroph/core/learning/TrainingElement;)V = LearnPattern(Org.Neuroph.Core.Learning.TrainingElement)
org/neuroph/core/NeuralNetwork = Org.Neuroph.Core.NeuralNetwork
  <init>()V = .ctor()
  getInputNeurons()Ljava/util/List; = InputNeurons
  setInputNeurons(Ljava/util/List;)V = InputNeurons
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getLayers()Ljava/util/List; = Layers
  getLayersCount()I = LayersCount
  getLayersIterator()Ljava/util/Iterator; = LayersIterator
  getLearningRule()Lorg/neuroph/core/learning/LearningRule; = LearningRule
  setLearningRule(Lorg/neuroph/core/learning/LearningRule;)V = LearningRule
  getLearningThread()Ljava/lang/Thread; = LearningThread
  getNetworkType()Lorg/neuroph/util/NeuralNetworkType; = NetworkType
  setNetworkType(Lorg/neuroph/util/NeuralNetworkType;)V = NetworkType
  getOutputNeurons()Ljava/util/List; = OutputNeurons
  setOutputNeurons(Ljava/util/List;)V = OutputNeurons
  addLayer(ILorg/neuroph/core/Layer;)V = AddLayer(int, Org.Neuroph.Core.Layer)
  addLayer(Lorg/neuroph/core/Layer;)V = AddLayer(Org.Neuroph.Core.Layer)
  addPlugin(Lorg/neuroph/util/plugins/PluginBase;)V = AddPlugin(Org.Neuroph.Util.Plugins.PluginBase)
  calculate()V = Calculate()
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  getLayerAt(I)Lorg/neuroph/core/Layer; = GetLayerAt(int)
  getOutput()[D = GetOutput()
  getPlugin(Ljava/lang/Class;)Lorg/neuroph/util/plugins/PluginBase; = GetPlugin(Java.Lang.Class)
  indexOf(Lorg/neuroph/core/Layer;)I = IndexOf(Org.Neuroph.Core.Layer)
  initializeWeights(D)V = InitializeWeights(double)
  initializeWeights(DD)V = InitializeWeights(double, double)
  initializeWeights(Ljava/util/Random;)V = InitializeWeights(Java.Util.Random)
  learnInNewThread(Lorg/neuroph/core/learning/TrainingSet;)V = LearnInNewThread(Org.Neuroph.Core.Learning.TrainingSet)
  learnInNewThread(Lorg/neuroph/core/learning/TrainingSet;Lorg/neuroph/core/learning/LearningRule;)V = LearnInNewThread(Org.Neuroph.Core.Learning.TrainingSet, Org.Neuroph.Core.Learning.LearningRule)
  learnInSameThread(Lorg/neuroph/core/learning/TrainingSet;)V = LearnInSameThread(Org.Neuroph.Core.Learning.TrainingSet)
  learnInSameThread(Lorg/neuroph/core/learning/TrainingSet;Lorg/neuroph/core/learning/LearningRule;)V = LearnInSameThread(Org.Neuroph.Core.Learning.TrainingSet, Org.Neuroph.Core.Learning.LearningRule)
  load(Ljava/io/InputStream;)Lorg/neuroph/core/NeuralNetwork; = Load(System.IO.Stream)
  load(Ljava/lang/String;)Lorg/neuroph/core/NeuralNetwork; = Load(string)
  notifyChange()V = NotifyChange()
  pauseLearning()V = PauseLearning()
  randomizeWeights()V = RandomizeWeights()
  randomizeWeights(DD)V = RandomizeWeights(double, double)
  removeLayer(Lorg/neuroph/core/Layer;)V = RemoveLayer(Org.Neuroph.Core.Layer)
  removeLayerAt(I)V = RemoveLayerAt(int)
  removePlugin(Ljava/lang/String;)V = RemovePlugin(string)
  reset()V = Reset()
  resumeLearning()V = ResumeLearning()
  run()V = Run()
  save(Ljava/lang/String;)V = Save(string)
  setInput([D)V = SetInput(params double[])
  stopLearning()V = StopLearning()
org/neuroph/core/Neuron = Org.Neuroph.Core.Neuron
  <init>()V = .ctor()
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  error = Error
  inputConnections = InputConnections
  inputFunction = InputFunction
  netInput = NetInput
  outConnections = OutConnections
  output = Output
  parentLayer = ParentLayer
  transferFunction = TransferFunction
  getError()D = Error
  setError(D)V = Error
  hasInputConnections()Z = HasInputConnections
  getInputConnections()Ljava/util/List; = InputConnections
  getInputFunction()Lorg/neuroph/core/input/InputFunction; = InputFunction
  setInputFunction(Lorg/neuroph/core/input/InputFunction;)V = InputFunction
  getInputsIterator()Ljava/util/Iterator; = InputsIterator
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getNetInput()D = NetInput
  getOutConnections()Ljava/util/List; = OutConnections
  getOutput()D = Output
  setOutput(D)V = Output
  getParentLayer()Lorg/neuroph/core/Layer; = ParentLayer
  setParentLayer(Lorg/neuroph/core/Layer;)V = ParentLayer
  getTransferFunction()Lorg/neuroph/core/transfer/TransferFunction; = TransferFunction
  setTransferFunction(Lorg/neuroph/core/transfer/TransferFunction;)V = TransferFunction
  getWeightsVector()Ljava/util/Vector; = WeightsVector
  addInputConnection(Lorg/neuroph/core/Connection;)V = AddInputConnection(Org.Neuroph.Core.Connection)
  addInputConnection(Lorg/neuroph/core/Neuron;)V = AddInputConnection(Org.Neuroph.Core.Neuron)
  addInputConnection(Lorg/neuroph/core/Neuron;D)V = AddInputConnection(Org.Neuroph.Core.Neuron, double)
  addOutputConnection(Lorg/neuroph/core/Connection;)V = AddOutputConnection(Org.Neuroph.Core.Connection)
  calculate()V = Calculate()
  getConnectionFrom(Lorg/neuroph/core/Neuron;)Lorg/neuroph/core/Connection; = GetConnectionFrom(Org.Neuroph.Core.Neuron)
  initializeWeights(D)V = InitializeWeights(double)
  initializeWeights(DD)V = InitializeWeights(double, double)
  initializeWeights(Ljava/util/Random;)V = InitializeWeights(Java.Util.Random)
  randomizeInputWeights()V = RandomizeInputWeights()
  randomizeInputWeights(DD)V = RandomizeInputWeights(double, double)
  removeInputConnectionFrom(Lorg/neuroph/core/Neuron;)V = RemoveInputConnectionFrom(Org.Neuroph.Core.Neuron)
  reset()V = Reset()
  setInput(D)V = SetInput(double)
org/neuroph/core/transfer/Gaussian = Org.Neuroph.Core.Transfer.Gaussian
  <init>()V = .ctor()
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSigma()D = Sigma
  setSigma(D)V = Sigma
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Linear = Org.Neuroph.Core.Transfer.Linear
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Ramp = Org.Neuroph.Core.Transfer.Ramp
  <init>()V = .ctor()
  <init>(DDDDD)V = .ctor(double, double, double, double, double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getXHigh()D = XHigh
  setXHigh(D)V = XHigh
  getXLow()D = XLow
  setXLow(D)V = XLow
  getYHigh()D = YHigh
  setYHigh(D)V = YHigh
  getYLow()D = YLow
  setYLow(D)V = YLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sgn = Org.Neuroph.Core.Transfer.Sgn
  <init>()V = .ctor()
  getProperties()Ljava/util/Properties; = Properties
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sigmoid = Org.Neuroph.Core.Transfer.Sigmoid
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Step = Org.Neuroph.Core.Transfer.Step
  <init>()V = .ctor()
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getProperties()Lorg/neuroph/util/Properties; = Properties
  getYHigh()D = YHigh
  setYHigh(D)V = YHigh
  getYLow()D = YLow
  setYLow(D)V = YLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Tanh = Org.Neuroph.Core.Transfer.Tanh
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getDerivative(D)D = GetDerivative(double)
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/TransferFunction = Org.Neuroph.Core.Transfer.TransferFunction
  <init>()V = .ctor()
  getDerivative(D)D = GetDerivative(double)
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Trapezoid = Org.Neuroph.Core.Transfer.Trapezoid
  <init>()V = .ctor()
  <init>(DDDD)V = .ctor(double, double, double, double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getLeftHigh()D = LeftHigh
  setLeftHigh(D)V = LeftHigh
  getLeftLow()D = LeftLow
  setLeftLow(D)V = LeftLow
  getRightHigh()D = RightHigh
  setRightHigh(D)V = RightHigh
  getRightLow()D = RightLow
  setRightLow(D)V = RightLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/Weight = Org.Neuroph.Core.Weight
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  getTrainingData()Lorg/neuroph/core/learning/TrainingData; = TrainingData
  getValue()D = Value
  setValue(D)V = Value
  dec(D)V = Dec(double)
  inc(D)V = Inc(double)
  initTrainingDataBuffer(I)V = InitTrainingDataBuffer(int)
  randomize()V = Randomize()
  randomize(DD)V = Randomize(double, double)
org/neuroph/nnet/Adaline = Org.Neuroph.Nnet.Adaline
  <init>(I)V = .ctor(int)
org/neuroph/nnet/BAM = Org.Neuroph.Nnet.BAM
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/comp/BiasNeuron = Org.Neuroph.Nnet.Comp.BiasNeuron
  <init>()V = .ctor()
org/neuroph/nnet/comp/CompetitiveLayer = Org.Neuroph.Nnet.Comp.CompetitiveLayer
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
  getMaxIterations()I = MaxIterations
  setMaxIterations(I)V = MaxIterations
  getWinner()Lorg/neuroph/nnet/comp/CompetitiveNeuron; = Winner
org/neuroph/nnet/comp/CompetitiveNeuron = Org.Neuroph.Nnet.Comp.CompetitiveNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  getConnectionsFromOtherLayers()Ljava/util/Vector; = ConnectionsFromOtherLayers
  isCompeting()Z = IsCompeting
  setIsCompeting(Z)V = IsCompeting
org/neuroph/nnet/comp/DelayedConnection = Org.Neuroph.Nnet.Comp.DelayedConnection
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;DI)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double, int)
  getDelay()I = Delay
  setDelay(I)V = Delay
org/neuroph/nnet/comp/DelayedNeuron = Org.Neuroph.Nnet.Comp.DelayedNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  outputHistory = OutputHistory
  getOutput(I)D = GetOutput(int)
org/neuroph/nnet/comp/InputNeuron = Org.Neuroph.Nnet.Comp.InputNeuron
  <init>()V = .ctor()
org/neuroph/nnet/comp/InputOutputNeuron = Org.Neuroph.Nnet.Comp.InputOutputNeuron
  <init>()V = .ctor()
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  getBias()D = Bias
  setBias(D)V = Bias
org/neuroph/nnet/comp/ThresholdNeuron = Org.Neuroph.Nnet.Comp.ThresholdNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  thresh = Thresh
  getThresh()D = Thresh
  setThresh(D)V = Thresh
org/neuroph/nnet/CompetitiveNetwork = Org.Neuroph.Nnet.CompetitiveNetwork
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/flat/FlatLearningType = Org.Neuroph.Nnet.Flat.FlatLearningType
  BackPropagation = BackPropagation
  ManhattanUpdateRule = ManhattanUpdateRule
  ResilientPropagation = ResilientPropagation
  valueOf(Ljava/lang/String;)Lorg/neuroph/nnet/flat/FlatLearningType; = ValueOf(string)
  values()[Lorg/neuroph/nnet/flat/FlatLearningType; = Values()
org/neuroph/nnet/flat/FlatNetworkLearning = Org.Neuroph.Nnet.Flat.FlatNetworkLearning
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork)
  <init>(Lorg/neuroph/core/NeuralNetwork;)V = .ctor(Org.Neuroph.Core.NeuralNetwork)
  getLearningType()Lorg/neuroph/nnet/flat/FlatLearningType; = LearningType
  setLearningType(Lorg/neuroph/nnet/flat/FlatLearningType;)V = LearningType
  getMomentum()D = Momentum
  setMomentum(D)V = Momentum
  getNumThreads()I = NumThreads
  setNumThreads(I)V = NumThreads
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updatePatternError([D)V = UpdatePatternError(double[])
  updateTotalNetworkError()V = UpdateTotalNetworkError()
  updateTotalNetworkError([D)V = UpdateTotalNetworkError(double[])
org/neuroph/nnet/flat/FlatNetworkPlugin = Org.Neuroph.Nnet.Flat.FlatNetworkPlugin
  <init>(Lorg/encog/engine/network/flat/FlatNetwork;)V = .ctor(Org.Encog.Engine.Network.Flat.FlatNetwork)
  flatNetwork = FlatNetwork
  PLUGIN_NAME = PluginName
  getFlatNetwork()Lorg/encog/engine/network/flat/FlatNetwork; = FlatNetwork
  flattenNeuralNetworkNetwork(Lorg/neuroph/core/NeuralNetwork;)Z = FlattenNeuralNetworkNetwork(Org.Neuroph.Core.NeuralNetwork)
  initCL()V = InitCL()
  shutdown()V = Shutdown()
  unFlattenNeuralNetworkNetwork(Lorg/neuroph/core/NeuralNetwork;)Z = UnFlattenNeuralNetworkNetwork(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/nnet/flat/FlatWeight = Org.Neuroph.Nnet.Flat.FlatWeight
  <init>([DI)V = .ctor(double[], int)
  <init>(D)V = .ctor(double)
  getPreviousValue()D = PreviousValue
  setPreviousValue(D)V = PreviousValue
org/neuroph/nnet/Hopfield = Org.Neuroph.Nnet.Hopfield
  <init>(I)V = .ctor(int)
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
org/neuroph/nnet/Instar = Org.Neuroph.Nnet.Instar
  <init>(I)V = .ctor(int)
org/neuroph/nnet/Kohonen = Org.Neuroph.Nnet.Kohonen
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/learning/BackPropagation = Org.Neuroph.Nnet.Learning.BackPropagation
  <init>()V = .ctor()
  adjustHiddenLayers()V = AdjustHiddenLayers()
org/neuroph/nnet/learning/BinaryDeltaRule = Org.Neuroph.Nnet.Learning.BinaryDeltaRule
  <init>()V = .ctor()
  getErrorCorrection()D = ErrorCorrection
  setErrorCorrection(D)V = ErrorCorrection
org/neuroph/nnet/learning/BinaryHebbianLearning = Org.Neuroph.Nnet.Learning.BinaryHebbianLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/CompetitiveLearning = Org.Neuroph.Nnet.Learning.CompetitiveLearning
  <init>()V = .ctor()
  adjustWeights()V = AdjustWeights()
org/neuroph/nnet/learning/DynamicBackPropagation = Org.Neuroph.Nnet.Learning.DynamicBackPropagation
  <init>()V = .ctor()
  getLearningRateChange()D = LearningRateChange
  setLearningRateChange(D)V = LearningRateChange
  getMaxLearningRate()D = MaxLearningRate
  setMaxLearningRate(D)V = MaxLearningRate
  getMaxMomentum()D = MaxMomentum
  setMaxMomentum(D)V = MaxMomentum
  getMinLearningRate()D = MinLearningRate
  setMinLearningRate(D)V = MinLearningRate
  getMinMomentum()D = MinMomentum
  setMinMomentum(D)V = MinMomentum
  getMomentumChange()D = MomentumChange
  setMomentumChange(D)V = MomentumChange
  getUseDynamicLearningRate()Z = UseDynamicLearningRate
  setUseDynamicLearningRate(Z)V = UseDynamicLearningRate
  getUseDynamicMomentum()Z = UseDynamicMomentum
  setUseDynamicMomentum(Z)V = UseDynamicMomentum
  adjustLearningRate()V = AdjustLearningRate()
  adjustMomentum()V = AdjustMomentum()
org/neuroph/nnet/learning/HopfieldLearning = Org.Neuroph.Nnet.Learning.HopfieldLearning
  <init>()V = .ctor()
  learn(Lorg/neuroph/core/learning/TrainingSet;)V = Learn(Org.Neuroph.Core.Learning.TrainingSet)
org/neuroph/nnet/learning/InstarLearning = Org.Neuroph.Nnet.Learning.InstarLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/KohonenLearning = Org.Neuroph.Nnet.Learning.KohonenLearning
  <init>()V = .ctor()
  getIteration()Ljava/lang/Integer; = Iteration
  getLearningRate()D = LearningRate
  setLearningRate(D)V = LearningRate
  getMapSize()I = MapSize
  learn(Lorg/neuroph/core/learning/TrainingSet;)V = Learn(Org.Neuroph.Core.Learning.TrainingSet)
  setIterations(II)V = SetIterations(int, int)
org/neuroph/nnet/learning/LMS = Org.Neuroph.Nnet.Learning.LMS
  <init>()V = .ctor()
  trainingDataBufferSize = TrainingDataBufferSize
  isBatchMode()Z = BatchMode
  setBatchMode(Z)V = BatchMode
  getTrainingDataBufferSize()I = TrainingDataBufferSize
  setTrainingDataBufferSize(I)V = TrainingDataBufferSize
  applyWeightChange(Lorg/neuroph/core/Weight;D)V = ApplyWeightChange(Org.Neuroph.Core.Weight, double)
  batchModeWeightsUpdate()V = BatchModeWeightsUpdate()
  initTrainingDataBuffer()V = InitTrainingDataBuffer()
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updateNeuronWeights(Lorg/neuroph/core/Neuron;)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron)
  updatePatternError([D)V = UpdatePatternError(double[])
  updateTotalNetworkError()V = UpdateTotalNetworkError()
  updateTotalNetworkError([D)V = UpdateTotalNetworkError(double[])
org/neuroph/nnet/learning/MomentumBackpropagation = Org.Neuroph.Nnet.Learning.MomentumBackpropagation
  <init>()V = .ctor()
  momentum = Momentum
  getMomentum()D = Momentum
  setMomentum(D)V = Momentum
org/neuroph/nnet/learning/OjaLearning = Org.Neuroph.Nnet.Learning.OjaLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/OutstarLearning = Org.Neuroph.Nnet.Learning.OutstarLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/PerceptronLearning = Org.Neuroph.Nnet.Learning.PerceptronLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/SigmoidDeltaRule = Org.Neuroph.Nnet.Learning.SigmoidDeltaRule
  <init>()V = .ctor()
  adjustOutputNeurons([D)V = AdjustOutputNeurons(double[])
org/neuroph/nnet/learning/SimulatedAnnealingLearning = Org.Neuroph.Nnet.Learning.SimulatedAnnealingLearning
  <init>(Lorg/neuroph/core/NeuralNetwork;)V = .ctor(Org.Neuroph.Core.NeuralNetwork)
  <init>(Lorg/neuroph/core/NeuralNetwork;DDI)V = .ctor(Org.Neuroph.Core.NeuralNetwork, double, double, int)
  network = Network
  temperature = Temperature
  getNetwork()Lorg/neuroph/core/NeuralNetwork; = Network
  randomize()V = Randomize()
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updatePatternError([D)V = UpdatePatternError(double[])
  updateTotalNetworkError()V = UpdateTotalNetworkError()
  updateTotalNetworkError([D)V = UpdateTotalNetworkError(double[])
org/neuroph/nnet/learning/SupervisedHebbianLearning = Org.Neuroph.Nnet.Learning.SupervisedHebbianLearning
  <init>()V = .ctor()
  updateNeuronWeights(Lorg/neuroph/core/Neuron;D)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron, double)
org/neuroph/nnet/learning/UnsupervisedHebbianLearning = Org.Neuroph.Nnet.Learning.UnsupervisedHebbianLearning
  <init>()V = .ctor()
  adjustWeights()V = AdjustWeights()
  updateNeuronWeights(Lorg/neuroph/core/Neuron;)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron)
org/neuroph/nnet/MaxNet = Org.Neuroph.Nnet.MaxNet
  <init>(I)V = .ctor(int)
org/neuroph/nnet/ModularNetwork = Org.Neuroph.Nnet.ModularNetwork
  <init>()V = .ctor()
  addNetwork(Lorg/neuroph/core/NeuralNetwork;)V = AddNetwork(Org.Neuroph.Core.NeuralNetwork)
  getNetwork(Ljava/lang/String;)Lorg/neuroph/core/NeuralNetwork; = GetNetwork(string)
  removeNetwork(Ljava/lang/String;)V = RemoveNetwork(string)
org/neuroph/nnet/MultiLayerPerceptron = Org.Neuroph.Nnet.MultiLayerPerceptron
  <init>([I)V = .ctor(params int[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>)
  <init>(Ljava/util/List;Lorg/neuroph/util/NeuronProperties;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.NeuronProperties)
  <init>(Ljava/util/List;Lorg/neuroph/util/TransferFunctionType;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.TransferFunctionType)
  <init>(Lorg/neuroph/util/TransferFunctionType;[I)V = .ctor(Org.Neuroph.Util.TransferFunctionType, params int[])
  connectInputsToOutputs()V = ConnectInputsToOutputs()
org/neuroph/nnet/NeuroFuzzyPerceptron = Org.Neuroph.Nnet.NeuroFuzzyPerceptron
  <init>([[D[[D)V = .ctor(double[][], double[][])
  <init>(ILjava/util/Vector;I)V = .ctor(int, Java.Util.Vector, int)
org/neuroph/nnet/Neuroph = Org.Neuroph.Nnet.Neuroph
  <init>()V = .ctor()
  getInstance()Lorg/neuroph/nnet/Neuroph; = Instance
  setFlattenNetworks(Z)V = SetFlattenNetworks(bool)
  shouldFlattenNetworks()Z = ShouldFlattenNetworks()
  shutdown()V = Shutdown()
org/neuroph/nnet/Outstar = Org.Neuroph.Nnet.Outstar
  <init>(I)V = .ctor(int)
org/neuroph/nnet/Perceptron = Org.Neuroph.Nnet.Perceptron
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/nnet/RbfNetwork = Org.Neuroph.Nnet.RbfNetwork
  <init>(III)V = .ctor(int, int, int)
org/neuroph/nnet/SupervisedHebbianNetwork = Org.Neuroph.Nnet.SupervisedHebbianNetwork
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/nnet/UnsupervisedHebbianNetwork = Org.Neuroph.Nnet.UnsupervisedHebbianNetwork
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/samples/HopfieldSample = Org.Neuroph.Samples.HopfieldSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/intronn/SunSpots = Org.Neuroph.Samples.Intronn.SunSpots
  <init>()V = .ctor()
  EVALUATE_END = EvaluateEnd
  EVALUATE_START = EvaluateStart
  MAX_ERROR = MaxError
  STARTING_YEAR = StartingYear
  SUNSPOTS = Sunspots
  TRAIN_END = TrainEnd
  TRAIN_START = TrainStart
  WINDOW_SIZE = WindowSize
  generateTraining()Lorg/neuroph/core/learning/TrainingSet; = GenerateTraining()
  main([Ljava/lang/String;)V = Main(string[])
  normalizeSunspots(DD)V = NormalizeSunspots(double, double)
  predict(Lorg/neuroph/core/NeuralNetwork;)V = Predict(Org.Neuroph.Core.NeuralNetwork)
  run()V = Run()
  update(Ljava/util/Observable;Ljava/lang/Object;)V = Update(Java.Util.Observable, Java.Lang.Object)
org/neuroph/samples/PerceptronSample = Org.Neuroph.Samples.PerceptronSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/learning/TrainingSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Learning.TrainingSet)
org/neuroph/samples/stockmarket/Main = Org.Neuroph.Samples.Stockmarket.Main
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/stockmarket/StockFileReader = Org.Neuroph.Samples.Stockmarket.StockFileReader
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  getMaxCounter()I = MaxCounter
  setMaxCounter(I)V = MaxCounter
  getValuesRow()[Ljava/lang/String; = GetValuesRow()
  read(Ljava/lang/String;)V = Read(string)
  setValuesRow([Ljava/lang/String;)V = SetValuesRow(string[])
org/neuroph/samples/stockmarket/StockSocketReader = Org.Neuroph.Samples.Stockmarket.StockSocketReader
  <init>()V = .ctor()
  <init>(I)V = .ctor(int)
  getMaxCounter()I = MaxCounter
  setMaxCounter(I)V = MaxCounter
  getTsleep()J = Tsleep
  setTsleep(J)V = Tsleep
  getValuesRow()[Ljava/lang/String; = GetValuesRow()
  run()V = Run()
  setValuesRow([Ljava/lang/String;)V = SetValuesRow(string[])
org/neuroph/samples/stockmarket/StockTrainingSetImport = Org.Neuroph.Samples.Stockmarket.StockTrainingSetImport
  <init>()V = .ctor()
  importFromArray([DII)Lorg/neuroph/core/learning/TrainingSet; = ImportFromArray(double[], int, int)
org/neuroph/samples/stockmarket/TrainingData = Org.Neuroph.Samples.Stockmarket.TrainingData
  <init>()V = .ctor()
  <init>([Ljava/lang/String;)V = .ctor(string[])
  getNormalizer()D = Normalizer
  setNormalizer(D)V = Normalizer
  getTrainingSet()Lorg/neuroph/core/learning/TrainingSet; = TrainingSet
  setTrainingSet(Lorg/neuroph/core/learning/TrainingSet;)V = TrainingSet
  getValuesRow()[Ljava/lang/String; = GetValuesRow()
  setValuesRow([Ljava/lang/String;)V = SetValuesRow(string[])
org/neuroph/samples/timeseries/GenerateSet = Org.Neuroph.Samples.Timeseries.GenerateSet
  <init>(Ljava/lang/String;ZII)V = .ctor(string, bool, int, int)
  doIt()V = DoIt()
org/neuroph/samples/timeseries/GenerateSineWave = Org.Neuroph.Samples.Timeseries.GenerateSineWave
  getNextSample()D = NextSample
org/neuroph/samples/timeseries/GenerateTrainingSets = Org.Neuroph.Samples.Timeseries.GenerateTrainingSets
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/XorMultiLayerPerceptronSample = Org.Neuroph.Samples.XorMultiLayerPerceptronSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/learning/TrainingSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Learning.TrainingSet)
org/neuroph/util/ConnectionFactory = Org.Neuroph.Util.ConnectionFactory
  <init>()V = .ctor()
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;DI)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double, int)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Weight;)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Weight)
  forwardConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;)V = ForwardConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer)
  forwardConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;D)V = ForwardConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, double)
  fullConnect(Lorg/neuroph/core/Layer;)V = FullConnect(Org.Neuroph.Core.Layer)
  fullConnect(Lorg/neuroph/core/Layer;D)V = FullConnect(Org.Neuroph.Core.Layer, double)
  fullConnect(Lorg/neuroph/core/Layer;DI)V = FullConnect(Org.Neuroph.Core.Layer, double, int)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;Z)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, bool)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;D)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, double)
org/neuroph/util/FileUtils = Org.Neuroph.Util.FileUtils
  <init>()V = .ctor()
  readStringFromFile(Ljava/io/File;)Ljava/lang/String; = ReadStringFromFile(Java.IO.File)
  writeStringToFile(Ljava/io/File;Ljava/lang/String;)V = WriteStringToFile(Java.IO.File, string)
org/neuroph/util/LayerFactory = Org.Neuroph.Util.LayerFactory
  <init>()V = .ctor()
  createLayer(ILorg/neuroph/util/NeuronProperties;)Lorg/neuroph/core/Layer; = CreateLayer(int, Org.Neuroph.Util.NeuronProperties)
  createLayer(ILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/core/Layer; = CreateLayer(int, Org.Neuroph.Util.TransferFunctionType)
  createLayer(Ljava/util/Vector;)Lorg/neuroph/core/Layer; = CreateLayer(Java.Util.Vector)
org/neuroph/util/NeuralNetworkCODEC = Org.Neuroph.Util.NeuralNetworkCODEC
  array2network([DLorg/neuroph/core/NeuralNetwork;)V = Array2network(double[], Org.Neuroph.Core.NeuralNetwork)
  determineArraySize(Lorg/neuroph/core/NeuralNetwork;)I = DetermineArraySize(Org.Neuroph.Core.NeuralNetwork)
  network2array(Lorg/neuroph/core/NeuralNetwork;[D)V = Network2array(Org.Neuroph.Core.NeuralNetwork, double[])
org/neuroph/util/NeuralNetworkFactory = Org.Neuroph.Util.NeuralNetworkFactory
  <init>()V = .ctor()
  createAdaline(I)Lorg/neuroph/nnet/Adaline; = CreateAdaline(int)
  createBam(II)Lorg/neuroph/nnet/BAM; = CreateBam(int, int)
  createCompetitiveNetwork(II)Lorg/neuroph/nnet/CompetitiveNetwork; = CreateCompetitiveNetwork(int, int)
  createHopfield(I)Lorg/neuroph/nnet/Hopfield; = CreateHopfield(int)
  createInstar(I)Lorg/neuroph/nnet/Instar; = CreateInstar(int)
  createKohonen(II)Lorg/neuroph/nnet/Kohonen; = CreateKohonen(int, int)
  createMaxNet(I)Lorg/neuroph/nnet/MaxNet; = CreateMaxNet(int)
  createMLPerceptron(Ljava/lang/String;Lorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/MultiLayerPerceptron; = CreateMLPerceptron(string, Org.Neuroph.Util.TransferFunctionType)
  createMLPerceptron(Ljava/lang/String;Lorg/neuroph/util/TransferFunctionType;Ljava/lang/Class;ZZ)Lorg/neuroph/nnet/MultiLayerPerceptron; = CreateMLPerceptron(string, Org.Neuroph.Util.TransferFunctionType, Java.Lang.Class, bool, bool)
  createOutstar(I)Lorg/neuroph/nnet/Outstar; = CreateOutstar(int)
  createPerceptron(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/Perceptron; = CreatePerceptron(int, int, Org.Neuroph.Util.TransferFunctionType)
  createPerceptron(IILorg/neuroph/util/TransferFunctionType;Ljava/lang/Class;)Lorg/neuroph/nnet/Perceptron; = CreatePerceptron(int, int, Org.Neuroph.Util.TransferFunctionType, Java.Lang.Class)
  createRbfNetwork(III)Lorg/neuroph/nnet/RbfNetwork; = CreateRbfNetwork(int, int, int)
  createSupervisedHebbian(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/SupervisedHebbianNetwork; = CreateSupervisedHebbian(int, int, Org.Neuroph.Util.TransferFunctionType)
  createUnsupervisedHebbian(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/UnsupervisedHebbianNetwork; = CreateUnsupervisedHebbian(int, int, Org.Neuroph.Util.TransferFunctionType)
  setDefaultIO(Lorg/neuroph/core/NeuralNetwork;)V = SetDefaultIO(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/util/NeuralNetworkType = Org.Neuroph.Util.NeuralNetworkType
  ADALINE = Adaline
  BAM = Bam
  COMPETITIVE = Competitive
  HOPFIELD = Hopfield
  INSTAR = Instar
  KOHONEN = Kohonen
  MAXNET = Maxnet
  MULTI_LAYER_PERCEPTRON = MultiLayerPerceptron
  NEURO_FUZZY_REASONER = NeuroFuzzyReasoner
  OUTSTAR = Outstar
  PERCEPTRON = Perceptron
  RBF_NETWORK = RbfNetwork
  RECOMMENDER = Recommender
  SUPERVISED_HEBBIAN_NET = SupervisedHebbianNet
  UNSUPERVISED_HEBBIAN_NET = UnsupervisedHebbianNet
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/NeuralNetworkType; = ValueOf(string)
  values()[Lorg/neuroph/util/NeuralNetworkType; = Values()
org/neuroph/util/NeuronFactory = Org.Neuroph.Util.NeuronFactory
  <init>()V = .ctor()
  createNeuron(Lorg/neuroph/util/NeuronProperties;)Lorg/neuroph/core/Neuron; = CreateNeuron(Org.Neuroph.Util.NeuronProperties)
org/neuroph/util/NeuronProperties = Org.Neuroph.Util.NeuronProperties
  <init>()V = .ctor()
  <init>(Ljava/lang/Class;Ljava/lang/Class;)V = .ctor(Java.Lang.Class, Java.Lang.Class)
  <init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V = .ctor(Java.Lang.Class, Java.Lang.Class, Java.Lang.Class)
  <init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V = .ctor(Java.Lang.Class, Java.Lang.Class, Java.Lang.Class, Java.Lang.Class)
  <init>(Ljava/lang/Class;Lorg/neuroph/util/TransferFunctionType;)V = .ctor(Java.Lang.Class, Org.Neuroph.Util.TransferFunctionType)
  <init>(Lorg/neuroph/util/TransferFunctionType;)V = .ctor(Org.Neuroph.Util.TransferFunctionType)
  <init>(Lorg/neuroph/util/TransferFunctionType;Z)V = .ctor(Org.Neuroph.Util.TransferFunctionType, bool)
  <init>(Lorg/neuroph/util/WeightsFunctionType;Lorg/neuroph/util/SummingFunctionType;Lorg/neuroph/util/TransferFunctionType;)V = .ctor(Org.Neuroph.Util.WeightsFunctionType, Org.Neuroph.Util.SummingFunctionType, Org.Neuroph.Util.TransferFunctionType)
  getInputFunction()Ljava/lang/Class; = InputFunction
  getNeuronType()Ljava/lang/Class; = NeuronType
  getSummingFunction()Ljava/lang/Class; = SummingFunction
  getTransferFunction()Ljava/lang/Class; = TransferFunction
  getTransferFunctionProperties()Lorg/neuroph/util/Properties; = TransferFunctionProperties
  getWeightsFunction()Ljava/lang/Class; = WeightsFunction
org/neuroph/util/plugins/LabelsPlugin = Org.Neuroph.Util.Plugins.LabelsPlugin
  <init>()V = .ctor()
  LABELS_PLUGIN_NAME = LabelsPluginName
  getLabel(Ljava/lang/Object;)Ljava/lang/String; = GetLabel(Java.Lang.Object)
  setLabel(Ljava/lang/Object;Ljava/lang/String;)V = SetLabel(Java.Lang.Object, string)
org/neuroph/util/plugins/PluginBase = Org.Neuroph.Util.Plugins.PluginBase
  <init>(Ljava/lang/String;)V = .ctor(string)
  getName()Ljava/lang/String; = Name
  getParentNetwork()Lorg/neuroph/core/NeuralNetwork; = ParentNetwork
  setParentNetwork(Lorg/neuroph/core/NeuralNetwork;)V = ParentNetwork
org/neuroph/util/Properties = Org.Neuroph.Util.Properties
  <init>()V = .ctor()
  createKeys([Ljava/lang/String;)V = CreateKeys(params string[])
  getProperty(Ljava/lang/String;)Ljava/lang/Object; = GetProperty(string)
  hasProperty(Ljava/lang/String;)Z = HasProperty(string)
  setProperty(Ljava/lang/String;Ljava/lang/Object;)V = SetProperty(string, Java.Lang.Object)
org/neuroph/util/SummingFunctionType = Org.Neuroph.Util.SummingFunctionType
  AND = And
  INTENSITY = Intensity
  MAX = Max
  MIN = Min
  OR = Or
  PRODUCT = Product
  SUM = Sum
  SUMSQR = Sumsqr
  getTypeClass()Ljava/lang/Class; = TypeClass
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/SummingFunctionType; = ValueOf(string)
  values()[Lorg/neuroph/util/SummingFunctionType; = Values()
org/neuroph/util/TrainingSetImport = Org.Neuroph.Util.TrainingSetImport
  <init>()V = .ctor()
  importFromFile(Ljava/lang/String;IILjava/lang/String;)Lorg/neuroph/core/learning/TrainingSet; = ImportFromFile(string, int, int, string)
org/neuroph/util/TransferFunctionType = Org.Neuroph.Util.TransferFunctionType
  GAUSSIAN = Gaussian
  LINEAR = Linear
  RAMP = Ramp
  SGN = Sgn
  SIGMOID = Sigmoid
  STEP = Step
  TANH = Tanh
  TRAPEZOID = Trapezoid
  getTypeClass()Ljava/lang/Class; = TypeClass
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/TransferFunctionType; = ValueOf(string)
  values()[Lorg/neuroph/util/TransferFunctionType; = Values()
org/neuroph/util/VectorParser = Org.Neuroph.Util.VectorParser
  <init>()V = .ctor()
  convertToArray(Ljava/util/List;)[D = ConvertToArray(System.Collections.Generic.IList<Java.Lang.Double>)
  convertToVector([D)Ljava/util/ArrayList; = ConvertToVector(double[])
  parseDoubleArray(Ljava/lang/String;)[D = ParseDoubleArray(string)
  parseInteger(Ljava/lang/String;)Ljava/util/ArrayList; = ParseInteger(string)
  toDoubleArray(Ljava/util/List;)[D = ToDoubleArray(System.Collections.Generic.IList<Java.Lang.Double>)
org/neuroph/util/WeightsFunctionType = Org.Neuroph.Util.WeightsFunctionType
  DIFFERENCE = Difference
  WEIGHTED_INPUT = WeightedInput
  getTypeClass()Ljava/lang/Class; = TypeClass
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/WeightsFunctionType; = ValueOf(string)
  values()[Lorg/neuroph/util/WeightsFunctionType; = Values()
