org/neuroph/core/Connection = Org.Neuroph.Core.Connection
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron)
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Weight;)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Weight)
  fromNeuron = FromNeuron
  toNeuron = ToNeuron
  weight = Weight
  getFromNeuron()Lorg/neuroph/core/Neuron; = FromNeuron
  setFromNeuron(Lorg/neuroph/core/Neuron;)V = FromNeuron
  getInput()D = Input
  getToNeuron()Lorg/neuroph/core/Neuron; = ToNeuron
  setToNeuron(Lorg/neuroph/core/Neuron;)V = ToNeuron
  getWeight()Lorg/neuroph/core/Weight; = Weight
  setWeight(Lorg/neuroph/core/Weight;)V = Weight
  getWeightedInput()D = WeightedInput
org/neuroph/core/events/LearningEvent = Org.Neuroph.Core.Events.LearningEvent
  <init>(Lorg/neuroph/core/learning/LearningRule;)V = .ctor(Org.Neuroph.Core.Learning.LearningRule)
org/neuroph/core/events/LearningEventListener = Org.Neuroph.Core.Events.ILearningEventListener
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
org/neuroph/core/events/NeuralNetworkEvent = Org.Neuroph.Core.Events.NeuralNetworkEvent
  <init>(Lorg/neuroph/core/NeuralNetwork;)V = .ctor(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/core/events/NeuralNetworkEventListener = Org.Neuroph.Core.Events.INeuralNetworkEventListener
  handleNeuralNetworkEvent(Lorg/neuroph/core/events/NeuralNetworkEvent;)V = HandleNeuralNetworkEvent(Org.Neuroph.Core.Events.NeuralNetworkEvent)
org/neuroph/core/events/NNCalculatedEvent = Org.Neuroph.Core.Events.NNCalculatedEvent
  <init>(Lorg/neuroph/core/NeuralNetwork;)V = .ctor(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/core/exceptions/NeurophException = Org.Neuroph.Core.Exceptions.NeurophException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/core/exceptions/VectorSizeMismatchException = Org.Neuroph.Core.Exceptions.VectorSizeMismatchException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/core/input/And = Org.Neuroph.Core.Input.And
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Difference = Org.Neuroph.Core.Input.Difference
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/InputFunction = Org.Neuroph.Core.Input.InputFunction
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Max = Org.Neuroph.Core.Input.Max
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Min = Org.Neuroph.Core.Input.Min
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Or = Org.Neuroph.Core.Input.Or
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Product = Org.Neuroph.Core.Input.Product
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/Sum = Org.Neuroph.Core.Input.Sum
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/SumSqr = Org.Neuroph.Core.Input.SumSqr
  <init>()V = .ctor()
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/input/WeightedSum = Org.Neuroph.Core.Input.WeightedSum
  <init>()V = .ctor()
  getOutput([D[D)[D = GetOutput(double[], double[])
  getOutput([Lorg/neuroph/core/Connection;)D = GetOutput(Org.Neuroph.Core.Connection[])
org/neuroph/core/Layer = Org.Neuroph.Core.Layer
  <init>()V = .ctor()
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
  neurons = Neurons
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getNeuronsCount()I = NeuronsCount
  getParentNetwork()Lorg/neuroph/core/NeuralNetwork; = ParentNetwork
  setParentNetwork(Lorg/neuroph/core/NeuralNetwork;)V = ParentNetwork
  addNeuron(ILorg/neuroph/core/Neuron;)V = AddNeuron(int, Org.Neuroph.Core.Neuron)
  addNeuron(Lorg/neuroph/core/Neuron;)V = AddNeuron(Org.Neuroph.Core.Neuron)
  calculate()V = Calculate()
  getNeuronAt(I)Lorg/neuroph/core/Neuron; = GetNeuronAt(int)
  getNeurons()[Lorg/neuroph/core/Neuron; = GetNeurons()
  indexOf(Lorg/neuroph/core/Neuron;)I = IndexOf(Org.Neuroph.Core.Neuron)
  initializeWeights(D)V = InitializeWeights(double)
  randomizeWeights()V = RandomizeWeights()
  randomizeWeights(DD)V = RandomizeWeights(double, double)
  randomizeWeights(Ljava/util/Random;)V = RandomizeWeights(Java.Util.Random)
  removeAllNeurons()V = RemoveAllNeurons()
  removeNeuron(Lorg/neuroph/core/Neuron;)V = RemoveNeuron(Org.Neuroph.Core.Neuron)
  removeNeuronAt(I)V = RemoveNeuronAt(int)
  reset()V = Reset()
  setNeuron(ILorg/neuroph/core/Neuron;)V = SetNeuron(int, Org.Neuroph.Core.Neuron)
org/neuroph/core/learning/DataSet = Org.Neuroph.Core.Learning.DataSet
  <init>(I)V = .ctor(int)
  <init>(II)V = .ctor(int, int)
  getFilePath()Ljava/lang/String; = FilePath
  setFilePath(Ljava/lang/String;)V = FilePath
  getInputSize()I = InputSize
  isEmpty()Z = IsEmpty
  isSupervised()Z = IsSupervised
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getOutputSize()I = OutputSize
  getRows()Ljava/util/List; = Rows
  addRow([D)V = AddRow(double[])
  addRow([D[D)V = AddRow(double[], double[])
  addRow(Lorg/neuroph/core/learning/DataSetRow;)V = AddRow(Org.Neuroph.Core.Learning.DataSetRow)
  clear()V = Clear()
  createFromFile(Ljava/lang/String;IILjava/lang/String;)Lorg/neuroph/core/learning/DataSet; = CreateFromFile(string, int, int, string)
  createTrainingAndTestSubsets(II)[Lorg/neuroph/core/learning/DataSet; = CreateTrainingAndTestSubsets(int, int)
  getColumnNames()[Ljava/lang/String; = GetColumnNames()
  getRowAt(I)Lorg/neuroph/core/learning/DataSetRow; = GetRowAt(int)
  iterator()Ljava/util/Iterator; = Iterator()
  load(Ljava/lang/String;)Lorg/neuroph/core/learning/DataSet; = Load(string)
  normalize()V = Normalize()
  normalize(Lorg/neuroph/util/norm/Normalizer;)V = Normalize(Org.Neuroph.Util.Norm.INormalizer)
  removeRowAt(I)V = RemoveRowAt(int)
  save()V = Save()
  save(Ljava/lang/String;)V = Save(string)
  saveAsTxt(Ljava/lang/String;Ljava/lang/String;)V = SaveAsTxt(string, string)
  setColumnNames([Ljava/lang/String;)V = SetColumnNames(string[])
  shuffle()V = Shuffle()
  size()I = Size()
org/neuroph/core/learning/DataSetRow = Org.Neuroph.Core.Learning.DataSetRow
  <init>([D)V = .ctor(params double[])
  <init>([D[D)V = .ctor(double[], double[])
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  <init>(Ljava/util/ArrayList;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Double>)
  <init>(Ljava/util/ArrayList;Ljava/util/ArrayList;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Double>, System.Collections.Generic.IList<Java.Lang.Double>)
  input = Input
  label = Label
  isSupervised()Z = IsSupervised
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getDesiredOutput()[D = GetDesiredOutput()
  getInput()[D = GetInput()
  setDesiredOutput([D)V = SetDesiredOutput(double[])
  setInput([D)V = SetInput(double[])
org/neuroph/core/learning/IterativeLearning = Org.Neuroph.Core.Learning.IterativeLearning
  <init>()V = .ctor()
  currentIteration = CurrentIteration
  iterationsLimited = IterationsLimited
  learningRate = LearningRate
  maxIterations = MaxIterations
  getCurrentIteration()Ljava/lang/Integer; = CurrentIteration
  isPausedLearning()Z = IsPausedLearning
  getLearningRate()D = LearningRate
  setLearningRate(D)V = LearningRate
  afterEpoch()V = AfterEpoch()
  beforeEpoch()V = BeforeEpoch()
  doLearningEpoch(Lorg/neuroph/core/learning/DataSet;)V = DoLearningEpoch(Org.Neuroph.Core.Learning.DataSet)
  doOneLearningIteration(Lorg/neuroph/core/learning/DataSet;)V = DoOneLearningIteration(Org.Neuroph.Core.Learning.DataSet)
  learn(Lorg/neuroph/core/learning/DataSet;)V = Learn(Org.Neuroph.Core.Learning.DataSet)
  learn(Lorg/neuroph/core/learning/DataSet;I)V = Learn(Org.Neuroph.Core.Learning.DataSet, int)
  pause()V = Pause()
  resume()V = Resume()
  setMaxIterations(I)V = SetMaxIterations(int)
org/neuroph/core/learning/LearningRule = Org.Neuroph.Core.Learning.LearningRule
  <init>()V = .ctor()
  neuralNetwork = NeuralNetwork
  isStopped()Z = IsStopped
  getNeuralNetwork()Lorg/neuroph/core/NeuralNetwork; = NeuralNetwork
  setNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;)V = NeuralNetwork
  getTrainingSet()Lorg/neuroph/core/learning/DataSet; = TrainingSet
  setTrainingSet(Lorg/neuroph/core/learning/DataSet;)V = TrainingSet
  addListener(Lorg/neuroph/core/events/LearningEventListener;)V = AddListener(Org.Neuroph.Core.Events.ILearningEventListener)
  fireLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = FireLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  learn(Lorg/neuroph/core/learning/DataSet;)V = Learn(Org.Neuroph.Core.Learning.DataSet)
  onStart()V = OnStart()
  removeListener(Lorg/neuroph/core/events/LearningEventListener;)V = RemoveListener(Org.Neuroph.Core.Events.ILearningEventListener)
  stopLearning()V = StopLearning()
org/neuroph/core/learning/SupervisedLearning = Org.Neuroph.Core.Learning.SupervisedLearning
  <init>()V = .ctor()
  maxError = MaxError
  previousEpochError = PreviousEpochError
  totalNetworkError = TotalNetworkError
  totalSquaredErrorSum = TotalSquaredErrorSum
  hasReachedStopCondition()Z = HasReachedStopCondition
  isInBatchMode()Z = IsInBatchMode
  getMaxError()D = MaxError
  setMaxError(D)V = MaxError
  getMinErrorChange()D = MinErrorChange
  setMinErrorChange(D)V = MinErrorChange
  getMinErrorChangeIterationsCount()I = MinErrorChangeIterationsCount
  getMinErrorChangeIterationsLimit()I = MinErrorChangeIterationsLimit
  setMinErrorChangeIterationsLimit(I)V = MinErrorChangeIterationsLimit
  getPreviousEpochError()D = PreviousEpochError
  getTotalNetworkError()D = TotalNetworkError
  addToSquaredErrorSum([D)V = AddToSquaredErrorSum(double[])
  calculateOutputError([D[D)[D = CalculateOutputError(double[], double[])
  doBatchWeightsUpdate()V = DoBatchWeightsUpdate()
  doLearningEpoch(Lorg/neuroph/core/learning/DataSet;)V = DoLearningEpoch(Org.Neuroph.Core.Learning.DataSet)
  errorChangeStalled()Z = ErrorChangeStalled()
  learn(Lorg/neuroph/core/learning/DataSet;D)V = Learn(Org.Neuroph.Core.Learning.DataSet, double)
  learn(Lorg/neuroph/core/learning/DataSet;DI)V = Learn(Org.Neuroph.Core.Learning.DataSet, double, int)
  learnPattern(Lorg/neuroph/core/learning/DataSetRow;)V = LearnPattern(Org.Neuroph.Core.Learning.DataSetRow)
  setBatchMode(Z)V = SetBatchMode(bool)
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
org/neuroph/core/learning/UnsupervisedLearning = Org.Neuroph.Core.Learning.UnsupervisedLearning
  <init>()V = .ctor()
  doLearningEpoch(Lorg/neuroph/core/learning/DataSet;)V = DoLearningEpoch(Org.Neuroph.Core.Learning.DataSet)
  learnPattern(Lorg/neuroph/core/learning/DataSetRow;)V = LearnPattern(Org.Neuroph.Core.Learning.DataSetRow)
  updateNetworkWeights()V = UpdateNetworkWeights()
org/neuroph/core/NeuralNetwork = Org.Neuroph.Core.NeuralNetwork
  <init>()V = .ctor()
  output = Output
  getInputsCount()I = InputsCount
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getLayersCount()I = LayersCount
  getLearningRule()Lorg/neuroph/core/learning/LearningRule; = LearningRule
  setLearningRule(Lorg/neuroph/core/learning/LearningRule;)V = LearningRule
  getLearningThread()Ljava/lang/Thread; = LearningThread
  getNetworkType()Lorg/neuroph/util/NeuralNetworkType; = NetworkType
  setNetworkType(Lorg/neuroph/util/NeuralNetworkType;)V = NetworkType
  getOutputsCount()I = OutputsCount
  addLayer(ILorg/neuroph/core/Layer;)V = AddLayer(int, Org.Neuroph.Core.Layer)
  addLayer(Lorg/neuroph/core/Layer;)V = AddLayer(Org.Neuroph.Core.Layer)
  addListener(Lorg/neuroph/core/events/NeuralNetworkEventListener;)V = AddListener(Org.Neuroph.Core.Events.INeuralNetworkEventListener)
  addPlugin(Lorg/neuroph/util/plugins/PluginBase;)V = AddPlugin(Org.Neuroph.Util.Plugins.PluginBase)
  calculate()V = Calculate()
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  fireNetworkEvent(Lorg/neuroph/core/events/NeuralNetworkEvent;)V = FireNetworkEvent(Org.Neuroph.Core.Events.NeuralNetworkEvent)
  getInputNeurons()[Lorg/neuroph/core/Neuron; = GetInputNeurons()
  getLayerAt(I)Lorg/neuroph/core/Layer; = GetLayerAt(int)
  getLayers()[Lorg/neuroph/core/Layer; = GetLayers()
  getOutput()[D = GetOutput()
  getOutputNeurons()[Lorg/neuroph/core/Neuron; = GetOutputNeurons()
  getPlugin(Ljava/lang/Class;)Lorg/neuroph/util/plugins/PluginBase; = GetPlugin(Java.Lang.Class)
  indexOf(Lorg/neuroph/core/Layer;)I = IndexOf(Org.Neuroph.Core.Layer)
  learn(Lorg/neuroph/core/learning/DataSet;)V = Learn(Org.Neuroph.Core.Learning.DataSet)
  learn(Lorg/neuroph/core/learning/DataSet;Lorg/neuroph/core/learning/LearningRule;)V = Learn(Org.Neuroph.Core.Learning.DataSet, Org.Neuroph.Core.Learning.LearningRule)
  learnInNewThread(Lorg/neuroph/core/learning/DataSet;)V = LearnInNewThread(Org.Neuroph.Core.Learning.DataSet)
  learnInNewThread(Lorg/neuroph/core/learning/DataSet;Lorg/neuroph/core/learning/LearningRule;)V = LearnInNewThread(Org.Neuroph.Core.Learning.DataSet, Org.Neuroph.Core.Learning.LearningRule)
  load(Ljava/io/InputStream;)Lorg/neuroph/core/NeuralNetwork; = Load(System.IO.Stream)
  load(Ljava/lang/String;)Lorg/neuroph/core/NeuralNetwork; = Load(string)
  pauseLearning()V = PauseLearning()
  randomizeWeights()V = RandomizeWeights()
  randomizeWeights(DD)V = RandomizeWeights(double, double)
  randomizeWeights(Ljava/util/Random;)V = RandomizeWeights(Java.Util.Random)
  randomizeWeights(Lorg/neuroph/util/random/WeightsRandomizer;)V = RandomizeWeights(Org.Neuroph.Util.Random.WeightsRandomizer)
  removeLayer(Lorg/neuroph/core/Layer;)V = RemoveLayer(Org.Neuroph.Core.Layer)
  removeLayerAt(I)V = RemoveLayerAt(int)
  removeListener(Lorg/neuroph/core/events/NeuralNetworkEventListener;)V = RemoveListener(Org.Neuroph.Core.Events.INeuralNetworkEventListener)
  removePlugin(Ljava/lang/Class;)V = RemovePlugin(Java.Lang.Class)
  reset()V = Reset()
  resumeLearning()V = ResumeLearning()
  save(Ljava/lang/String;)V = Save(string)
  setInput([D)V = SetInput(params double[])
  setInputNeurons([Lorg/neuroph/core/Neuron;)V = SetInputNeurons(Org.Neuroph.Core.Neuron[])
  setOutputNeurons([Lorg/neuroph/core/Neuron;)V = SetOutputNeurons(Org.Neuroph.Core.Neuron[])
  stopLearning()V = StopLearning()
org/neuroph/core/Neuron = Org.Neuroph.Core.Neuron
  <init>()V = .ctor()
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  error = Error
  inputConnections = InputConnections
  inputFunction = InputFunction
  netInput = NetInput
  outConnections = OutConnections
  output = Output
  parentLayer = ParentLayer
  transferFunction = TransferFunction
  getError()D = Error
  setError(D)V = Error
  hasInputConnections()Z = HasInputConnections
  getInputFunction()Lorg/neuroph/core/input/InputFunction; = InputFunction
  setInputFunction(Lorg/neuroph/core/input/InputFunction;)V = InputFunction
  getLabel()Ljava/lang/String; = Label
  setLabel(Ljava/lang/String;)V = Label
  getNetInput()D = NetInput
  getOutput()D = Output
  setOutput(D)V = Output
  getParentLayer()Lorg/neuroph/core/Layer; = ParentLayer
  setParentLayer(Lorg/neuroph/core/Layer;)V = ParentLayer
  getTransferFunction()Lorg/neuroph/core/transfer/TransferFunction; = TransferFunction
  setTransferFunction(Lorg/neuroph/core/transfer/TransferFunction;)V = TransferFunction
  addInputConnection(Lorg/neuroph/core/Connection;)V = AddInputConnection(Org.Neuroph.Core.Connection)
  addInputConnection(Lorg/neuroph/core/Neuron;)V = AddInputConnection(Org.Neuroph.Core.Neuron)
  addInputConnection(Lorg/neuroph/core/Neuron;D)V = AddInputConnection(Org.Neuroph.Core.Neuron, double)
  addOutputConnection(Lorg/neuroph/core/Connection;)V = AddOutputConnection(Org.Neuroph.Core.Connection)
  calculate()V = Calculate()
  getConnectionFrom(Lorg/neuroph/core/Neuron;)Lorg/neuroph/core/Connection; = GetConnectionFrom(Org.Neuroph.Core.Neuron)
  getInputConnections()[Lorg/neuroph/core/Connection; = GetInputConnections()
  getOutConnections()[Lorg/neuroph/core/Connection; = GetOutConnections()
  getWeights()[Lorg/neuroph/core/Weight; = GetWeights()
  hasInputConnectionFrom(Lorg/neuroph/core/Neuron;)Z = HasInputConnectionFrom(Org.Neuroph.Core.Neuron)
  hasOutputConnectionTo(Lorg/neuroph/core/Neuron;)Z = HasOutputConnectionTo(Org.Neuroph.Core.Neuron)
  initializeWeights(D)V = InitializeWeights(double)
  randomizeWeights()V = RandomizeWeights()
  randomizeWeights(DD)V = RandomizeWeights(double, double)
  randomizeWeights(Ljava/util/Random;)V = RandomizeWeights(Java.Util.Random)
  removeAllConnections()V = RemoveAllConnections()
  removeAllInputConnections()V = RemoveAllInputConnections()
  removeAllOutputConnections()V = RemoveAllOutputConnections()
  removeInputConnection(Lorg/neuroph/core/Connection;)V = RemoveInputConnection(Org.Neuroph.Core.Connection)
  removeInputConnectionFrom(Lorg/neuroph/core/Neuron;)V = RemoveInputConnectionFrom(Org.Neuroph.Core.Neuron)
  removeOutputConnection(Lorg/neuroph/core/Connection;)V = RemoveOutputConnection(Org.Neuroph.Core.Connection)
  removeOutputConnectionTo(Lorg/neuroph/core/Neuron;)V = RemoveOutputConnectionTo(Org.Neuroph.Core.Neuron)
  reset()V = Reset()
  setInput(D)V = SetInput(double)
org/neuroph/core/transfer/Gaussian = Org.Neuroph.Core.Transfer.Gaussian
  <init>()V = .ctor()
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSigma()D = Sigma
  setSigma(D)V = Sigma
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Linear = Org.Neuroph.Core.Transfer.Linear
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Log = Org.Neuroph.Core.Transfer.Log
  <init>()V = .ctor()
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Ramp = Org.Neuroph.Core.Transfer.Ramp
  <init>()V = .ctor()
  <init>(DDDDD)V = .ctor(double, double, double, double, double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getXHigh()D = XHigh
  setXHigh(D)V = XHigh
  getXLow()D = XLow
  setXLow(D)V = XLow
  getYHigh()D = YHigh
  setYHigh(D)V = YHigh
  getYLow()D = YLow
  setYLow(D)V = YLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sgn = Org.Neuroph.Core.Transfer.Sgn
  <init>()V = .ctor()
  getProperties()Ljava/util/Properties; = Properties
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sigmoid = Org.Neuroph.Core.Transfer.Sigmoid
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Sin = Org.Neuroph.Core.Transfer.Sin
  <init>()V = .ctor()
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Step = Org.Neuroph.Core.Transfer.Step
  <init>()V = .ctor()
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getProperties()Lorg/neuroph/util/Properties; = Properties
  getYHigh()D = YHigh
  setYHigh(D)V = YHigh
  getYLow()D = YLow
  setYLow(D)V = YLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Tanh = Org.Neuroph.Core.Transfer.Tanh
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getSlope()D = Slope
  setSlope(D)V = Slope
  getDerivative(D)D = GetDerivative(double)
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/TransferFunction = Org.Neuroph.Core.Transfer.TransferFunction
  <init>()V = .ctor()
  output = Output
  getDerivative(D)D = GetDerivative(double)
  getOutput(D)D = GetOutput(double)
org/neuroph/core/transfer/Trapezoid = Org.Neuroph.Core.Transfer.Trapezoid
  <init>()V = .ctor()
  <init>(DDDD)V = .ctor(double, double, double, double)
  <init>(Lorg/neuroph/util/Properties;)V = .ctor(Org.Neuroph.Util.Properties)
  getLeftHigh()D = LeftHigh
  setLeftHigh(D)V = LeftHigh
  getLeftLow()D = LeftLow
  setLeftLow(D)V = LeftLow
  getRightHigh()D = RightHigh
  setRightHigh(D)V = RightHigh
  getRightLow()D = RightLow
  setRightLow(D)V = RightLow
  getOutput(D)D = GetOutput(double)
org/neuroph/core/Weight = Org.Neuroph.Core.Weight
  <init>()V = .ctor()
  <init>(D)V = .ctor(double)
  value = Value
  weightChange = WeightChange
  getTrainingData()Ljava/lang/Object; = TrainingData
  setTrainingData(Ljava/lang/Object;)V = TrainingData
  getValue()D = Value
  setValue(D)V = Value
  dec(D)V = Dec(double)
  inc(D)V = Inc(double)
  randomize()V = Randomize()
  randomize(DD)V = Randomize(double, double)
  randomize(Ljava/util/Random;)V = Randomize(Java.Util.Random)
org/neuroph/imgrec/ColorMode = Org.Neuroph.Imgrec.ColorMode
  BLACK_AND_WHITE = BlackAndWhite
  FULL_COLOR = FullColor
  valueOf(Ljava/lang/String;)Lorg/neuroph/imgrec/ColorMode; = ValueOf(string)
  values()[Lorg/neuroph/imgrec/ColorMode; = Values()
org/neuroph/imgrec/FractionRgbData = Org.Neuroph.Imgrec.FractionRgbData
  <init>(Lorg/neuroph/imgrec/image/Image;)V = .ctor(Org.Neuroph.Imgrec.Image.IImage)
  blueValues = BlueValues
  flattenedRgbValues = FlattenedRgbValues
  greenValues = GreenValues
  redValues = RedValues
  getHeight()I = Height
  getWidth()I = Width
  convertRgbInputToBinaryBlackAndWhite([D)[D = ConvertRgbInputToBinaryBlackAndWhite(double[])
  getBlueValues()[[D = GetBlueValues()
  getFlattenedRgbValues()[D = GetFlattenedRgbValues()
  getGreenValues()[[D = GetGreenValues()
  getRedValues()[[D = GetRedValues()
  populateRGBArrays(Lorg/neuroph/imgrec/image/Image;)V = PopulateRGBArrays(Org.Neuroph.Imgrec.Image.IImage)
org/neuroph/imgrec/image/Color = Org.Neuroph.Imgrec.Image.Color
  <init>(I)V = .ctor(int)
  getBlue(I)I = GetBlue(int)
  getColor()I = GetColor()
  getGreen(I)I = GetGreen(int)
  getRed(I)I = GetRed(int)
org/neuroph/imgrec/image/Dimension = Org.Neuroph.Imgrec.Image.Dimension
  <init>(II)V = .ctor(int, int)
  getHeight()I = Height
  setHeight(I)V = Height
  getWidth()I = Width
  setWidth(I)V = Width
org/neuroph/imgrec/image/Image = Org.Neuroph.Imgrec.Image.IImage
  getHeight()I = Height
  getType()I = Type
  getWidth()I = Width
  crop(IIII)Lorg/neuroph/imgrec/image/Image; = Crop(int, int, int, int)
  getPixel(II)I = GetPixel(int, int)
  getPixels(IIIIII)[I = GetPixels(int, int, int, int, int, int)
  resize(II)Lorg/neuroph/imgrec/image/Image; = Resize(int, int)
  setPixel(III)V = SetPixel(int, int, int)
  setPixels([IIIIIII)V = SetPixels(int[], int, int, int, int, int, int)
org/neuroph/imgrec/image/ImageAndroid = Org.Neuroph.Imgrec.Image.ImageAndroid
  <init>(Landroid/graphics/Bitmap;)V = .ctor(Android.Graphics.Bitmap)
  getBitmap()Landroid/graphics/Bitmap; = Bitmap
  setBitmap(Landroid/graphics/Bitmap;)V = Bitmap
  getHeight()I = Height
  getType()I = Type
  getWidth()I = Width
  crop(IIII)Lorg/neuroph/imgrec/image/Image; = Crop(int, int, int, int)
  getPixel(II)I = GetPixel(int, int)
  getPixels(IIIIII)[I = GetPixels(int, int, int, int, int, int)
  resize(II)Lorg/neuroph/imgrec/image/Image; = Resize(int, int)
  setPixel(III)V = SetPixel(int, int, int)
  setPixels([IIIIIII)V = SetPixels(int[], int, int, int, int, int, int)
org/neuroph/imgrec/image/ImageFactory = Org.Neuroph.Imgrec.Image.ImageFactory
  <init>()V = .ctor()
  createImage(Ljava/lang/Integer;Ljava/lang/Integer;Ljava/lang/Integer;)Lorg/neuroph/imgrec/image/Image; = CreateImage(Java.Lang.Integer, Java.Lang.Integer, Java.Lang.Integer)
  getImage(Ljava/io/File;)Lorg/neuroph/imgrec/image/Image; = GetImage(Java.IO.File)
  getImage(Ljava/lang/String;)Lorg/neuroph/imgrec/image/Image; = GetImage(string)
  getImage(Ljava/net/URL;)Lorg/neuroph/imgrec/image/Image; = GetImage(Java.Net.URL)
org/neuroph/imgrec/image/ImageJ2SE = Org.Neuroph.Imgrec.Image.ImageJ2SE
  getHeight()I = Height
  getType()I = Type
  getWidth()I = Width
  crop(IIII)Lorg/neuroph/imgrec/image/Image; = Crop(int, int, int, int)
  getPixel(II)I = GetPixel(int, int)
  getPixels(IIIIII)[I = GetPixels(int, int, int, int, int, int)
  resize(II)Lorg/neuroph/imgrec/image/Image; = Resize(int, int)
  setPixel(III)V = SetPixel(int, int, int)
  setPixels([IIIIIII)V = SetPixels(int[], int, int, int, int, int, int)
org/neuroph/imgrec/image/ImageType = Org.Neuroph.Imgrec.Image.ImageType
  <init>()V = .ctor()
  ANDROID_TYPE_ALPHA_8 = AndroidTypeAlpha8
  ANDROID_TYPE_ARGB_8888 = AndroidTypeArgb8888
  ANDROID_TYPE_RGB_565 = AndroidTypeRgb565
  J2SE_TYPE_3BYTE_BGR = J2seType3byteBgr
  J2SE_TYPE_4BYTE_ABGR = J2seType4byteAbgr
  J2SE_TYPE_4BYTE_ABGR_PRE = J2seType4byteAbgrPre
  J2SE_TYPE_BYTE_BINARY = J2seTypeByteBinary
  J2SE_TYPE_BYTE_GRAY = J2seTypeByteGray
  J2SE_TYPE_BYTE_INDEXED = J2seTypeByteIndexed
  J2SE_TYPE_CUSTOM = J2seTypeCustom
  J2SE_TYPE_INT_ARGB = J2seTypeIntArgb
  J2SE_TYPE_INT_ARGB_PRE = J2seTypeIntArgbPre
  J2SE_TYPE_INT_BGR = J2seTypeIntBgr
  J2SE_TYPE_INT_RGB = J2seTypeIntRgb
  J2SE_TYPE_USHORT_555_RGB = J2seTypeUshort555Rgb
  J2SE_TYPE_USHORT_565_RGB = J2seTypeUshort565Rgb
  J2SE_TYPE_USHORT_GRAY = J2seTypeUshortGray
org/neuroph/imgrec/ImageRecognitionHelper = Org.Neuroph.Imgrec.ImageRecognitionHelper
  <init>()V = .ctor()
  createBlackAndWhiteTrainingSet(Ljava/util/List;Ljava/util/Map;)Lorg/neuroph/core/learning/DataSet; = CreateBlackAndWhiteTrainingSet(System.Collections.Generic.IList<string>, System.Collections.Generic.IDictionary<string, Org.Neuroph.Imgrec.FractionRgbData>)
  createNewNeuralNetwork(Ljava/lang/String;Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;Ljava/util/List;Ljava/util/List;Lorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/core/NeuralNetwork; = CreateNewNeuralNetwork(string, Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode, System.Collections.Generic.IList<string>, System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.TransferFunctionType)
  createTrainingSet(Ljava/util/List;Ljava/util/Map;)Lorg/neuroph/core/learning/DataSet; = CreateTrainingSet(System.Collections.Generic.IList<string>, System.Collections.Generic.IDictionary<string, Org.Neuroph.Imgrec.FractionRgbData>)
org/neuroph/imgrec/ImageRecognitionPlugin = Org.Neuroph.Imgrec.ImageRecognitionPlugin
  <init>(Lorg/neuroph/imgrec/image/Dimension;)V = .ctor(Org.Neuroph.Imgrec.Image.Dimension)
  <init>(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;)V = .ctor(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode)
  IMG_REC_PLUGIN_NAME = ImgRecPluginName
  getColorMode()Lorg/neuroph/imgrec/ColorMode; = ColorMode
  getMaxOutput()Ljava/util/HashMap; = MaxOutput
  getOutput()Ljava/util/HashMap; = Output
  getSamplingResolution()Lorg/neuroph/imgrec/image/Dimension; = SamplingResolution
  processInput()V = ProcessInput()
  recognizeImage(Ljava/io/File;)Ljava/util/HashMap; = RecognizeImage(Java.IO.File)
  recognizeImage(Ljava/net/URL;)Ljava/util/HashMap; = RecognizeImage(Java.Net.URL)
  recognizeImage(Lorg/neuroph/imgrec/image/Image;)Ljava/util/HashMap; = RecognizeImage(Org.Neuroph.Imgrec.Image.IImage)
  setInput(Ljava/io/File;)V = SetInput(Java.IO.File)
  setInput(Ljava/net/URL;)V = SetInput(Java.Net.URL)
  setInput(Lorg/neuroph/imgrec/image/Image;)V = SetInput(Org.Neuroph.Imgrec.Image.IImage)
org/neuroph/imgrec/ImageRecognitionSample = Org.Neuroph.Imgrec.ImageRecognitionSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/imgrec/ImageSampler = Org.Neuroph.Imgrec.ImageSampler
  <init>()V = .ctor()
  downSampleImage(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = DownSampleImage(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.Image.IImage)
  downSampleImage(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/image/Image;I)Lorg/neuroph/imgrec/image/Image; = DownSampleImage(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.Image.IImage, int)
org/neuroph/imgrec/ImageSizeMismatchException = Org.Neuroph.Imgrec.ImageSizeMismatchException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/imgrec/ImageUtilities = Org.Neuroph.Imgrec.ImageUtilities
  <init>()V = .ctor()
  resizeImage(Lorg/neuroph/imgrec/image/Image;II)Lorg/neuroph/imgrec/image/Image; = ResizeImage(Org.Neuroph.Imgrec.Image.IImage, int, int)
org/neuroph/nnet/Adaline = Org.Neuroph.Nnet.Adaline
  <init>(I)V = .ctor(int)
org/neuroph/nnet/BAM = Org.Neuroph.Nnet.BAM
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/comp/DelayedConnection = Org.Neuroph.Nnet.Comp.DelayedConnection
  <init>(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;DI)V = .ctor(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double, int)
  getDelay()I = Delay
  setDelay(I)V = Delay
org/neuroph/nnet/comp/layer/CompetitiveLayer = Org.Neuroph.Nnet.Comp.Layer.CompetitiveLayer
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
  getMaxIterations()I = MaxIterations
  setMaxIterations(I)V = MaxIterations
  getWinner()Lorg/neuroph/nnet/comp/neuron/CompetitiveNeuron; = Winner
org/neuroph/nnet/comp/layer/InputLayer = Org.Neuroph.Nnet.Comp.Layer.InputLayer
  <init>(I)V = .ctor(int)
org/neuroph/nnet/comp/neuron/BiasNeuron = Org.Neuroph.Nnet.Comp.Neuron.BiasNeuron
  <init>()V = .ctor()
org/neuroph/nnet/comp/neuron/CompetitiveNeuron = Org.Neuroph.Nnet.Comp.Neuron.CompetitiveNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  isCompeting()Z = IsCompeting
  setIsCompeting(Z)V = IsCompeting
  getConnectionsFromOtherLayers()[Lorg/neuroph/core/Connection; = GetConnectionsFromOtherLayers()
org/neuroph/nnet/comp/neuron/DelayedNeuron = Org.Neuroph.Nnet.Comp.Neuron.DelayedNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  outputHistory = OutputHistory
  getOutput(I)D = GetOutput(int)
org/neuroph/nnet/comp/neuron/InputNeuron = Org.Neuroph.Nnet.Comp.Neuron.InputNeuron
  <init>()V = .ctor()
org/neuroph/nnet/comp/neuron/InputOutputNeuron = Org.Neuroph.Nnet.Comp.Neuron.InputOutputNeuron
  <init>()V = .ctor()
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  getBias()D = Bias
  setBias(D)V = Bias
org/neuroph/nnet/comp/neuron/ThresholdNeuron = Org.Neuroph.Nnet.Comp.Neuron.ThresholdNeuron
  <init>(Lorg/neuroph/core/input/InputFunction;Lorg/neuroph/core/transfer/TransferFunction;)V = .ctor(Org.Neuroph.Core.Input.InputFunction, Org.Neuroph.Core.Transfer.TransferFunction)
  thresh = Thresh
  getThresh()D = Thresh
  setThresh(D)V = Thresh
org/neuroph/nnet/CompetitiveNetwork = Org.Neuroph.Nnet.CompetitiveNetwork
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/Hopfield = Org.Neuroph.Nnet.Hopfield
  <init>(I)V = .ctor(int)
  <init>(ILorg/neuroph/util/NeuronProperties;)V = .ctor(int, Org.Neuroph.Util.NeuronProperties)
org/neuroph/nnet/Instar = Org.Neuroph.Nnet.Instar
  <init>(I)V = .ctor(int)
org/neuroph/nnet/Kohonen = Org.Neuroph.Nnet.Kohonen
  <init>(II)V = .ctor(int, int)
org/neuroph/nnet/learning/AntiHebbianLearning = Org.Neuroph.Nnet.Learning.AntiHebbianLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/BackPropagation = Org.Neuroph.Nnet.Learning.BackPropagation
  <init>()V = .ctor()
  calculateErrorAndUpdateHiddenNeurons()V = CalculateErrorAndUpdateHiddenNeurons()
  calculateHiddenNeuronError(Lorg/neuroph/core/Neuron;)D = CalculateHiddenNeuronError(Org.Neuroph.Core.Neuron)
org/neuroph/nnet/learning/BinaryDeltaRule = Org.Neuroph.Nnet.Learning.BinaryDeltaRule
  <init>()V = .ctor()
  getErrorCorrection()D = ErrorCorrection
  setErrorCorrection(D)V = ErrorCorrection
org/neuroph/nnet/learning/BinaryHebbianLearning = Org.Neuroph.Nnet.Learning.BinaryHebbianLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/CompetitiveLearning = Org.Neuroph.Nnet.Learning.CompetitiveLearning
  <init>()V = .ctor()
  updateNetworkWeights()V = UpdateNetworkWeights()
org/neuroph/nnet/learning/DynamicBackPropagation = Org.Neuroph.Nnet.Learning.DynamicBackPropagation
  <init>()V = .ctor()
  getLearningRateChange()D = LearningRateChange
  setLearningRateChange(D)V = LearningRateChange
  getMaxLearningRate()D = MaxLearningRate
  setMaxLearningRate(D)V = MaxLearningRate
  getMaxMomentum()D = MaxMomentum
  setMaxMomentum(D)V = MaxMomentum
  getMinLearningRate()D = MinLearningRate
  setMinLearningRate(D)V = MinLearningRate
  getMinMomentum()D = MinMomentum
  setMinMomentum(D)V = MinMomentum
  getMomentumChange()D = MomentumChange
  setMomentumChange(D)V = MomentumChange
  getUseDynamicLearningRate()Z = UseDynamicLearningRate
  setUseDynamicLearningRate(Z)V = UseDynamicLearningRate
  getUseDynamicMomentum()Z = UseDynamicMomentum
  setUseDynamicMomentum(Z)V = UseDynamicMomentum
  adjustLearningRate()V = AdjustLearningRate()
  adjustMomentum()V = AdjustMomentum()
org/neuroph/nnet/learning/GeneralizedHebbianLearning = Org.Neuroph.Nnet.Learning.GeneralizedHebbianLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/HopfieldLearning = Org.Neuroph.Nnet.Learning.HopfieldLearning
  <init>()V = .ctor()
  learn(Lorg/neuroph/core/learning/DataSet;)V = Learn(Org.Neuroph.Core.Learning.DataSet)
org/neuroph/nnet/learning/InstarLearning = Org.Neuroph.Nnet.Learning.InstarLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/KohonenLearning = Org.Neuroph.Nnet.Learning.KohonenLearning
  <init>()V = .ctor()
  getIteration()Ljava/lang/Integer; = Iteration
  getLearningRate()D = LearningRate
  setLearningRate(D)V = LearningRate
  getMapSize()I = MapSize
  learn(Lorg/neuroph/core/learning/DataSet;)V = Learn(Org.Neuroph.Core.Learning.DataSet)
  setIterations(II)V = SetIterations(int, int)
org/neuroph/nnet/learning/LMS = Org.Neuroph.Nnet.Learning.LMS
  <init>()V = .ctor()
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updateNeuronWeights(Lorg/neuroph/core/Neuron;)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron)
org/neuroph/nnet/learning/MomentumBackpropagation = Org.Neuroph.Nnet.Learning.MomentumBackpropagation
  <init>()V = .ctor()
  momentum = Momentum
  getMomentum()D = Momentum
  setMomentum(D)V = Momentum
org/neuroph/nnet/learning/OjaLearning = Org.Neuroph.Nnet.Learning.OjaLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/OutstarLearning = Org.Neuroph.Nnet.Learning.OutstarLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/PerceptronLearning = Org.Neuroph.Nnet.Learning.PerceptronLearning
  <init>()V = .ctor()
org/neuroph/nnet/learning/ResilientPropagation = Org.Neuroph.Nnet.Learning.ResilientPropagation
  <init>()V = .ctor()
  getDecreaseFactor()D = DecreaseFactor
  setDecreaseFactor(D)V = DecreaseFactor
  getIncreaseFactor()D = IncreaseFactor
  setIncreaseFactor(D)V = IncreaseFactor
  getInitialDelta()D = InitialDelta
  setInitialDelta(D)V = InitialDelta
  getMaxDelta()D = MaxDelta
  setMaxDelta(D)V = MaxDelta
  getMinDelta()D = MinDelta
  setMinDelta(D)V = MinDelta
  resillientWeightUpdate(Lorg/neuroph/core/Weight;)V = ResillientWeightUpdate(Org.Neuroph.Core.Weight)
org/neuroph/nnet/learning/SigmoidDeltaRule = Org.Neuroph.Nnet.Learning.SigmoidDeltaRule
  <init>()V = .ctor()
  calculateErrorAndUpdateOutputNeurons([D)V = CalculateErrorAndUpdateOutputNeurons(double[])
org/neuroph/nnet/learning/SimulatedAnnealingLearning = Org.Neuroph.Nnet.Learning.SimulatedAnnealingLearning
  <init>(Lorg/neuroph/core/NeuralNetwork;)V = .ctor(Org.Neuroph.Core.NeuralNetwork)
  <init>(Lorg/neuroph/core/NeuralNetwork;DDI)V = .ctor(Org.Neuroph.Core.NeuralNetwork, double, double, int)
  network = Network
  temperature = Temperature
  getNetwork()Lorg/neuroph/core/NeuralNetwork; = Network
  randomize()V = Randomize()
  updateNetworkWeights([D)V = UpdateNetworkWeights(double[])
  updateTotalNetworkError([D)V = UpdateTotalNetworkError(double[])
org/neuroph/nnet/learning/SupervisedHebbianLearning = Org.Neuroph.Nnet.Learning.SupervisedHebbianLearning
  <init>()V = .ctor()
  updateNeuronWeights(Lorg/neuroph/core/Neuron;D)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron, double)
org/neuroph/nnet/learning/UnsupervisedHebbianLearning = Org.Neuroph.Nnet.Learning.UnsupervisedHebbianLearning
  <init>()V = .ctor()
  updateNetworkWeights()V = UpdateNetworkWeights()
  updateNeuronWeights(Lorg/neuroph/core/Neuron;)V = UpdateNeuronWeights(Org.Neuroph.Core.Neuron)
org/neuroph/nnet/MaxNet = Org.Neuroph.Nnet.MaxNet
  <init>(I)V = .ctor(int)
org/neuroph/nnet/MultiLayerPerceptron = Org.Neuroph.Nnet.MultiLayerPerceptron
  <init>([I)V = .ctor(params int[])
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>)
  <init>(Ljava/util/List;Lorg/neuroph/util/NeuronProperties;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.NeuronProperties)
  <init>(Ljava/util/List;Lorg/neuroph/util/TransferFunctionType;)V = .ctor(System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.TransferFunctionType)
  <init>(Lorg/neuroph/util/TransferFunctionType;[I)V = .ctor(Org.Neuroph.Util.TransferFunctionType, params int[])
  connectInputsToOutputs()V = ConnectInputsToOutputs()
org/neuroph/nnet/NeuroFuzzyPerceptron = Org.Neuroph.Nnet.NeuroFuzzyPerceptron
  <init>([[D[[D)V = .ctor(double[][], double[][])
  <init>(ILjava/util/Vector;I)V = .ctor(int, Java.Util.Vector, int)
org/neuroph/nnet/Outstar = Org.Neuroph.Nnet.Outstar
  <init>(I)V = .ctor(int)
org/neuroph/nnet/Perceptron = Org.Neuroph.Nnet.Perceptron
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/nnet/RbfNetwork = Org.Neuroph.Nnet.RbfNetwork
  <init>(III)V = .ctor(int, int, int)
org/neuroph/nnet/SupervisedHebbianNetwork = Org.Neuroph.Nnet.SupervisedHebbianNetwork
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/nnet/UnsupervisedHebbianNetwork = Org.Neuroph.Nnet.UnsupervisedHebbianNetwork
  <init>(II)V = .ctor(int, int)
  <init>(IILorg/neuroph/util/TransferFunctionType;)V = .ctor(int, int, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/ocr/CharExtractor = Org.Neuroph.Ocr.CharExtractor
org/neuroph/ocr/OcrHelper = Org.Neuroph.Ocr.OcrHelper
  <init>()V = .ctor()
  createNewNeuralNetwork(Ljava/lang/String;Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;Ljava/util/List;Ljava/util/List;Lorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/core/NeuralNetwork; = CreateNewNeuralNetwork(string, Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode, System.Collections.Generic.IList<string>, System.Collections.Generic.IList<Java.Lang.Integer>, Org.Neuroph.Util.TransferFunctionType)
org/neuroph/ocr/OcrPlugin = Org.Neuroph.Ocr.OcrPlugin
  <init>(Lorg/neuroph/imgrec/image/Dimension;Lorg/neuroph/imgrec/ColorMode;)V = .ctor(Org.Neuroph.Imgrec.Image.Dimension, Org.Neuroph.Imgrec.ColorMode)
  OCR_PLUGIN_NAME = OcrPluginName
  getColorMode()Lorg/neuroph/imgrec/ColorMode; = ColorMode
  getSamplingResolution()Lorg/neuroph/imgrec/image/Dimension; = SamplingResolution
  recognizeCharacter(Lorg/neuroph/imgrec/image/Image;)Ljava/lang/Character; = RecognizeCharacter(Org.Neuroph.Imgrec.Image.IImage)
  recognizeCharacter(Lorg/neuroph/imgrec/image/Image;Lorg/neuroph/imgrec/image/Dimension;)Ljava/lang/Character; = RecognizeCharacter(Org.Neuroph.Imgrec.Image.IImage, Org.Neuroph.Imgrec.Image.Dimension)
  recognizeCharacterProbabilities(Lorg/neuroph/imgrec/image/Image;)Ljava/util/HashMap; = RecognizeCharacterProbabilities(Org.Neuroph.Imgrec.Image.IImage)
org/neuroph/ocr/OcrSample = Org.Neuroph.Ocr.OcrSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/ocr/OcrUtils = Org.Neuroph.Ocr.OcrUtils
  <init>()V = .ctor()
  blackAndGrayCleaning(Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = BlackAndGrayCleaning(Org.Neuroph.Imgrec.Image.IImage)
  blackAndLightGrayCleaning(Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = BlackAndLightGrayCleaning(Org.Neuroph.Imgrec.Image.IImage)
  blackAndWhiteCleaning(Lorg/neuroph/imgrec/image/Image;)Lorg/neuroph/imgrec/image/Image; = BlackAndWhiteCleaning(Org.Neuroph.Imgrec.Image.IImage)
  colorCleaning(Lorg/neuroph/imgrec/image/Image;I)Lorg/neuroph/imgrec/image/Image; = ColorCleaning(Org.Neuroph.Imgrec.Image.IImage, int)
  getFractionRgbDataForImages(Ljava/util/HashMap;)Ljava/util/Map; = GetFractionRgbDataForImages(System.Collections.Generic.IDictionary<string, Org.Neuroph.Imgrec.Image.IImage>)
  loadAndCleanImage(Ljava/io/File;)Lorg/neuroph/imgrec/image/Image; = LoadAndCleanImage(Java.IO.File)
  loadImage(Ljava/io/File;)Lorg/neuroph/imgrec/image/Image; = LoadImage(Java.IO.File)
org/neuroph/samples/FileIOSample = Org.Neuroph.Samples.FileIOSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/HopfieldSample = Org.Neuroph.Samples.HopfieldSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/IrisClassificationSample = Org.Neuroph.Samples.IrisClassificationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/learning/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Learning.DataSet)
org/neuroph/samples/JDBCSample = Org.Neuroph.Samples.JDBCSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/NormalizationSample = Org.Neuroph.Samples.NormalizationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/samples/PerceptronSample = Org.Neuroph.Samples.PerceptronSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/learning/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Learning.DataSet)
org/neuroph/samples/RandomizationSample = Org.Neuroph.Samples.RandomizationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  printWeights(Lorg/neuroph/core/NeuralNetwork;)V = PrintWeights(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/samples/XorMultiLayerPerceptronSample = Org.Neuroph.Samples.XorMultiLayerPerceptronSample
  <init>()V = .ctor()
  handleLearningEvent(Lorg/neuroph/core/events/LearningEvent;)V = HandleLearningEvent(Org.Neuroph.Core.Events.LearningEvent)
  main([Ljava/lang/String;)V = Main(string[])
  run()V = Run()
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/learning/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Learning.DataSet)
org/neuroph/samples/XorResilientPropagationSample = Org.Neuroph.Samples.XorResilientPropagationSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
  testNeuralNetwork(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/core/learning/DataSet;)V = TestNeuralNetwork(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Core.Learning.DataSet)
org/neuroph/util/benchmark/Benchmark = Org.Neuroph.Util.Benchmark.Benchmark
  <init>()V = .ctor()
  addTask(Lorg/neuroph/util/benchmark/BenchmarkTask;)V = AddTask(Org.Neuroph.Util.Benchmark.BenchmarkTask)
  run()V = Run()
  runTask(Lorg/neuroph/util/benchmark/BenchmarkTask;)V = RunTask(Org.Neuroph.Util.Benchmark.BenchmarkTask)
org/neuroph/util/benchmark/BenchmarkSample = Org.Neuroph.Util.Benchmark.BenchmarkSample
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
org/neuroph/util/benchmark/BenchmarkTask = Org.Neuroph.Util.Benchmark.BenchmarkTask
  <init>(Ljava/lang/String;)V = .ctor(string)
  getName()Ljava/lang/String; = Name
  setName(Ljava/lang/String;)V = Name
  getTestIterations()I = TestIterations
  setTestIterations(I)V = TestIterations
  getWarmupIterations()I = WarmupIterations
  setWarmupIterations(I)V = WarmupIterations
  prepareTest()V = PrepareTest()
  runTest()V = RunTest()
org/neuroph/util/benchmark/BenchmarkTaskResults = Org.Neuroph.Util.Benchmark.BenchmarkTaskResults
  <init>(I)V = .ctor(int)
  getAverageTestTime()D = AverageTestTime
  getMaxTestTime()D = MaxTestTime
  getMinTestTime()D = MinTestTime
  getStandardDeviation()D = StandardDeviation
  getTestIterations()I = TestIterations
  addElapsedTime(J)V = AddElapsedTime(long)
  calculateStatistics()V = CalculateStatistics()
  getElapsedTimes()[J = GetElapsedTimes()
org/neuroph/util/benchmark/MyBenchmarkTask = Org.Neuroph.Util.Benchmark.MyBenchmarkTask
  <init>(Ljava/lang/String;)V = .ctor(string)
  prepareTest()V = PrepareTest()
  runTest()V = RunTest()
org/neuroph/util/benchmark/Stopwatch = Org.Neuroph.Util.Benchmark.Stopwatch
  <init>()V = .ctor()
  getElapsedTime()J = ElapsedTime
  reset()V = Reset()
  start()V = Start()
  stop()V = Stop()
org/neuroph/util/ConnectionFactory = Org.Neuroph.Util.ConnectionFactory
  <init>()V = .ctor()
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;D)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;DI)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, double, int)
  createConnection(Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Neuron;Lorg/neuroph/core/Weight;)V = CreateConnection(Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Neuron, Org.Neuroph.Core.Weight)
  forwardConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;)V = ForwardConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer)
  forwardConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;D)V = ForwardConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, double)
  fullConnect(Lorg/neuroph/core/Layer;)V = FullConnect(Org.Neuroph.Core.Layer)
  fullConnect(Lorg/neuroph/core/Layer;D)V = FullConnect(Org.Neuroph.Core.Layer, double)
  fullConnect(Lorg/neuroph/core/Layer;DI)V = FullConnect(Org.Neuroph.Core.Layer, double, int)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;Z)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, bool)
  fullConnect(Lorg/neuroph/core/Layer;Lorg/neuroph/core/Layer;D)V = FullConnect(Org.Neuroph.Core.Layer, Org.Neuroph.Core.Layer, double)
org/neuroph/util/FileUtils = Org.Neuroph.Util.FileUtils
  <init>()V = .ctor()
  readStringFromFile(Ljava/io/File;)Ljava/lang/String; = ReadStringFromFile(Java.IO.File)
  writeStringToFile(Ljava/io/File;Ljava/lang/String;)V = WriteStringToFile(Java.IO.File, string)
org/neuroph/util/io/FileInputAdapter = Org.Neuroph.Util.IO.FileInputAdapter
  <init>(Ljava/io/File;)V = .ctor(Java.IO.File)
  <init>(Ljava/lang/String;)V = .ctor(string)
org/neuroph/util/io/FileOutputAdapter = Org.Neuroph.Util.IO.FileOutputAdapter
  <init>(Ljava/io/File;)V = .ctor(Java.IO.File)
  <init>(Ljava/lang/String;)V = .ctor(string)
org/neuroph/util/io/InputAdapter = Org.Neuroph.Util.IO.IInputAdapter
  close()V = Close()
  readInput()[D = ReadInput()
org/neuroph/util/io/InputStreamAdapter = Org.Neuroph.Util.IO.InputStreamAdapter
  <init>(Ljava/io/BufferedReader;)V = .ctor(Java.IO.BufferedReader)
  <init>(Ljava/io/InputStream;)V = .ctor(System.IO.Stream)
  bufferedReader = BufferedReader
  close()V = Close()
  readInput()[D = ReadInput()
org/neuroph/util/io/IOHelper = Org.Neuroph.Util.IO.IOHelper
  <init>()V = .ctor()
  process(Lorg/neuroph/core/NeuralNetwork;Lorg/neuroph/util/io/InputAdapter;Lorg/neuroph/util/io/OutputAdapter;)V = Process(Org.Neuroph.Core.NeuralNetwork, Org.Neuroph.Util.IO.IInputAdapter, Org.Neuroph.Util.IO.IOutputAdapter)
org/neuroph/util/io/JDBCInputAdapter = Org.Neuroph.Util.IO.JDBCInputAdapter
  <init>(Ljava/sql/Connection;Ljava/lang/String;)V = .ctor(Java.Sql.IConnection, string)
  close()V = Close()
  readInput()[D = ReadInput()
org/neuroph/util/io/JDBCOutputAdapter = Org.Neuroph.Util.IO.JDBCOutputAdapter
  <init>(Ljava/sql/Connection;Ljava/lang/String;)V = .ctor(Java.Sql.IConnection, string)
  close()V = Close()
  writeOutput([D)V = WriteOutput(double[])
org/neuroph/util/io/NeurophInputException = Org.Neuroph.Util.IO.NeurophInputException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/util/io/NeurophOutputException = Org.Neuroph.Util.IO.NeurophOutputException
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
org/neuroph/util/io/OutputAdapter = Org.Neuroph.Util.IO.IOutputAdapter
  close()V = Close()
  writeOutput([D)V = WriteOutput(double[])
org/neuroph/util/io/OutputStreamAdapter = Org.Neuroph.Util.IO.OutputStreamAdapter
  <init>(Ljava/io/BufferedWriter;)V = .ctor(Java.IO.BufferedWriter)
  <init>(Ljava/io/OutputStream;)V = .ctor(System.IO.Stream)
  bufferedWriter = BufferedWriter
  close()V = Close()
  writeOutput([D)V = WriteOutput(double[])
org/neuroph/util/io/URLInputAdapter = Org.Neuroph.Util.IO.URLInputAdapter
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/net/URL;)V = .ctor(Java.Net.URL)
org/neuroph/util/io/URLOutputAdapter = Org.Neuroph.Util.IO.URLOutputAdapter
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/net/URL;)V = .ctor(Java.Net.URL)
org/neuroph/util/LayerFactory = Org.Neuroph.Util.LayerFactory
  <init>()V = .ctor()
  createLayer(ILjava/lang/Class;)Lorg/neuroph/core/Layer; = CreateLayer(int, Java.Lang.Class)
  createLayer(ILorg/neuroph/util/NeuronProperties;)Lorg/neuroph/core/Layer; = CreateLayer(int, Org.Neuroph.Util.NeuronProperties)
  createLayer(ILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/core/Layer; = CreateLayer(int, Org.Neuroph.Util.TransferFunctionType)
  createLayer(Ljava/util/List;)Lorg/neuroph/core/Layer; = CreateLayer(System.Collections.Generic.IList<Org.Neuroph.Util.NeuronProperties>)
org/neuroph/util/NeuralNetworkCODEC = Org.Neuroph.Util.NeuralNetworkCODEC
  array2network([DLorg/neuroph/core/NeuralNetwork;)V = Array2network(double[], Org.Neuroph.Core.NeuralNetwork)
  determineArraySize(Lorg/neuroph/core/NeuralNetwork;)I = DetermineArraySize(Org.Neuroph.Core.NeuralNetwork)
  network2array(Lorg/neuroph/core/NeuralNetwork;[D)V = Network2array(Org.Neuroph.Core.NeuralNetwork, double[])
org/neuroph/util/NeuralNetworkFactory = Org.Neuroph.Util.NeuralNetworkFactory
  <init>()V = .ctor()
  createAdaline(I)Lorg/neuroph/nnet/Adaline; = CreateAdaline(int)
  createBam(II)Lorg/neuroph/nnet/BAM; = CreateBam(int, int)
  createCompetitiveNetwork(II)Lorg/neuroph/nnet/CompetitiveNetwork; = CreateCompetitiveNetwork(int, int)
  createHopfield(I)Lorg/neuroph/nnet/Hopfield; = CreateHopfield(int)
  createInstar(I)Lorg/neuroph/nnet/Instar; = CreateInstar(int)
  createKohonen(II)Lorg/neuroph/nnet/Kohonen; = CreateKohonen(int, int)
  createMaxNet(I)Lorg/neuroph/nnet/MaxNet; = CreateMaxNet(int)
  createMLPerceptron(Ljava/lang/String;Lorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/MultiLayerPerceptron; = CreateMLPerceptron(string, Org.Neuroph.Util.TransferFunctionType)
  createMLPerceptron(Ljava/lang/String;Lorg/neuroph/util/TransferFunctionType;Ljava/lang/Class;ZZ)Lorg/neuroph/nnet/MultiLayerPerceptron; = CreateMLPerceptron(string, Org.Neuroph.Util.TransferFunctionType, Java.Lang.Class, bool, bool)
  createOutstar(I)Lorg/neuroph/nnet/Outstar; = CreateOutstar(int)
  createPerceptron(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/Perceptron; = CreatePerceptron(int, int, Org.Neuroph.Util.TransferFunctionType)
  createPerceptron(IILorg/neuroph/util/TransferFunctionType;Ljava/lang/Class;)Lorg/neuroph/nnet/Perceptron; = CreatePerceptron(int, int, Org.Neuroph.Util.TransferFunctionType, Java.Lang.Class)
  createRbfNetwork(III)Lorg/neuroph/nnet/RbfNetwork; = CreateRbfNetwork(int, int, int)
  createSupervisedHebbian(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/SupervisedHebbianNetwork; = CreateSupervisedHebbian(int, int, Org.Neuroph.Util.TransferFunctionType)
  createUnsupervisedHebbian(IILorg/neuroph/util/TransferFunctionType;)Lorg/neuroph/nnet/UnsupervisedHebbianNetwork; = CreateUnsupervisedHebbian(int, int, Org.Neuroph.Util.TransferFunctionType)
  setDefaultIO(Lorg/neuroph/core/NeuralNetwork;)V = SetDefaultIO(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/util/NeuralNetworkType = Org.Neuroph.Util.NeuralNetworkType
  ADALINE = Adaline
  BAM = Bam
  BOLTZMAN = Boltzman
  COMPETITIVE = Competitive
  COUNTERPROPAGATION = Counterpropagation
  HOPFIELD = Hopfield
  INSTAR = Instar
  INSTAR_OUTSTAR = InstarOutstar
  KOHONEN = Kohonen
  MAXNET = Maxnet
  MULTI_LAYER_PERCEPTRON = MultiLayerPerceptron
  NEURO_FUZZY_REASONER = NeuroFuzzyReasoner
  OUTSTAR = Outstar
  PCA_NETWORK = PcaNetwork
  PERCEPTRON = Perceptron
  RBF_NETWORK = RbfNetwork
  RECOMMENDER = Recommender
  SUPERVISED_HEBBIAN_NET = SupervisedHebbianNet
  UNSUPERVISED_HEBBIAN_NET = UnsupervisedHebbianNet
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/NeuralNetworkType; = ValueOf(string)
  values()[Lorg/neuroph/util/NeuralNetworkType; = Values()
org/neuroph/util/NeuronFactory = Org.Neuroph.Util.NeuronFactory
  <init>()V = .ctor()
  createNeuron(Lorg/neuroph/util/NeuronProperties;)Lorg/neuroph/core/Neuron; = CreateNeuron(Org.Neuroph.Util.NeuronProperties)
org/neuroph/util/NeuronProperties = Org.Neuroph.Util.NeuronProperties
  <init>()V = .ctor()
  <init>(Ljava/lang/Class;)V = .ctor(Java.Lang.Class)
  <init>(Ljava/lang/Class;Ljava/lang/Class;)V = .ctor(Java.Lang.Class, Java.Lang.Class)
  <init>(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)V = .ctor(Java.Lang.Class, Java.Lang.Class, Java.Lang.Class)
  <init>(Ljava/lang/Class;Lorg/neuroph/util/TransferFunctionType;)V = .ctor(Java.Lang.Class, Org.Neuroph.Util.TransferFunctionType)
  <init>(Lorg/neuroph/util/TransferFunctionType;Z)V = .ctor(Org.Neuroph.Util.TransferFunctionType, bool)
  getInputFunction()Ljava/lang/Class; = InputFunction
  getNeuronType()Ljava/lang/Class; = NeuronType
  getTransferFunction()Ljava/lang/Class; = TransferFunction
  getTransferFunctionProperties()Lorg/neuroph/util/Properties; = TransferFunctionProperties
  setProperty(Ljava/lang/String;Ljava/lang/Object;)V = SetProperty(string, Java.Lang.Object)
org/neuroph/util/Neuroph = Org.Neuroph.Util.Neuroph
  <init>()V = .ctor()
  getInputFunctions()Ljava/util/ArrayList; = InputFunctions
  getInstance()Lorg/neuroph/util/Neuroph; = Instance
  getLayers()Ljava/util/ArrayList; = Layers
  getLearningRules()Ljava/util/ArrayList; = LearningRules
  getNeurons()Ljava/util/ArrayList; = Neurons
  getTransferFunctions()Ljava/util/ArrayList; = TransferFunctions
  setFlattenNetworks(Z)V = SetFlattenNetworks(bool)
  shouldFlattenNetworks()Z = ShouldFlattenNetworks()
  shutdown()V = Shutdown()
org/neuroph/util/norm/DecimalScaleNormalizer = Org.Neuroph.Util.Norm.DecimalScaleNormalizer
  <init>()V = .ctor()
  findScaleVector()V = FindScaleVector()
  normalize(Lorg/neuroph/core/learning/DataSet;)V = Normalize(Org.Neuroph.Core.Learning.DataSet)
  normalizeScale([D)[D = NormalizeScale(double[])
org/neuroph/util/norm/MaxMinNormalizer = Org.Neuroph.Util.Norm.MaxMinNormalizer
  <init>()V = .ctor()
  normalize(Lorg/neuroph/core/learning/DataSet;)V = Normalize(Org.Neuroph.Core.Learning.DataSet)
org/neuroph/util/norm/MaxNormalizer = Org.Neuroph.Util.Norm.MaxNormalizer
  <init>()V = .ctor()
  normalize(Lorg/neuroph/core/learning/DataSet;)V = Normalize(Org.Neuroph.Core.Learning.DataSet)
  normalizeMax([D)[D = NormalizeMax(double[])
org/neuroph/util/norm/Normalizer = Org.Neuroph.Util.Norm.INormalizer
  normalize(Lorg/neuroph/core/learning/DataSet;)V = Normalize(Org.Neuroph.Core.Learning.DataSet)
org/neuroph/util/plugins/PluginBase = Org.Neuroph.Util.Plugins.PluginBase
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  getName()Ljava/lang/String; = Name
  getParentNetwork()Lorg/neuroph/core/NeuralNetwork; = ParentNetwork
  setParentNetwork(Lorg/neuroph/core/NeuralNetwork;)V = ParentNetwork
org/neuroph/util/Properties = Org.Neuroph.Util.Properties
  <init>()V = .ctor()
  createKeys([Ljava/lang/String;)V = CreateKeys(params string[])
  getProperty(Ljava/lang/String;)Ljava/lang/Object; = GetProperty(string)
  hasProperty(Ljava/lang/String;)Z = HasProperty(string)
  setProperty(Ljava/lang/String;Ljava/lang/Object;)V = SetProperty(string, Java.Lang.Object)
org/neuroph/util/random/DistortRandomizer = Org.Neuroph.Util.Random.DistortRandomizer
  <init>(D)V = .ctor(double)
org/neuroph/util/random/GaussianRandomizer = Org.Neuroph.Util.Random.GaussianRandomizer
  <init>(DD)V = .ctor(double, double)
org/neuroph/util/random/NguyenWidrowRandomizer = Org.Neuroph.Util.Random.NguyenWidrowRandomizer
  <init>(DD)V = .ctor(double, double)
org/neuroph/util/random/RangeRandomizer = Org.Neuroph.Util.Random.RangeRandomizer
  <init>(DD)V = .ctor(double, double)
  max = Max
  min = Min
org/neuroph/util/random/WeightsRandomizer = Org.Neuroph.Util.Random.WeightsRandomizer
  <init>()V = .ctor()
  <init>(Ljava/util/Random;)V = .ctor(Java.Util.Random)
  randomGenerator = RandomGenerator
  getRandomGenerator()Ljava/util/Random; = RandomGenerator
  nextRandomWeight()D = NextRandomWeight()
  randomize(Lorg/neuroph/core/NeuralNetwork;)V = Randomize(Org.Neuroph.Core.NeuralNetwork)
org/neuroph/util/TrainingSetImport = Org.Neuroph.Util.TrainingSetImport
  <init>()V = .ctor()
  importFromFile(Ljava/lang/String;IILjava/lang/String;)Lorg/neuroph/core/learning/DataSet; = ImportFromFile(string, int, int, string)
org/neuroph/util/TransferFunctionType = Org.Neuroph.Util.TransferFunctionType
  GAUSSIAN = Gaussian
  LINEAR = Linear
  LOG = Log
  RAMP = Ramp
  SGN = Sgn
  SIGMOID = Sigmoid
  SIN = Sin
  STEP = Step
  TANH = Tanh
  TRAPEZOID = Trapezoid
  getTypeClass()Ljava/lang/Class; = TypeClass
  getTypeLabel()Ljava/lang/String; = TypeLabel
  valueOf(Ljava/lang/String;)Lorg/neuroph/util/TransferFunctionType; = ValueOf(string)
  values()[Lorg/neuroph/util/TransferFunctionType; = Values()
org/neuroph/util/VectorParser = Org.Neuroph.Util.VectorParser
  <init>()V = .ctor()
  convertToArray(Ljava/util/List;)[D = ConvertToArray(System.Collections.Generic.IList<Java.Lang.Double>)
  convertToVector([D)Ljava/util/ArrayList; = ConvertToVector(double[])
  parseDoubleArray(Ljava/lang/String;)[D = ParseDoubleArray(string)
  parseInteger(Ljava/lang/String;)Ljava/util/ArrayList; = ParseInteger(string)
  toDoubleArray(Ljava/util/List;)[D = ToDoubleArray(System.Collections.Generic.IList<Java.Lang.Double>)
